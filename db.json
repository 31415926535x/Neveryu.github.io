{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/README.MDOWN","path":"README.MDOWN","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/favicon/favicon.ico","path":"favicon/favicon.ico","modified":1,"renderable":0},{"_id":"source/images/duoshuo_bkground.jpg","path":"images/duoshuo_bkground.jpg","modified":1,"renderable":0},{"_id":"source/images/forkme_left_white_ffffff.png","path":"images/forkme_left_white_ffffff.png","modified":1,"renderable":0},{"_id":"source/reward/reward_alipay.png","path":"reward/reward_alipay.png","modified":1,"renderable":0},{"_id":"source/reward/reward_wechat.png","path":"reward/reward_wechat.png","modified":1,"renderable":0},{"_id":"source/avatar/avatar.png","path":"avatar/avatar.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/particle.js","path":"js/src/particle.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/embed.js","path":"js/src/embed.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"b07beb8d91e791517c51334f8fcb6e357d92e668","modified":1484666374590},{"_id":"source/README.MDOWN","hash":"e97f2989b99eae8b99068767f8d954ce106bdbe0","modified":1486302258769},{"_id":"source/robots.txt","hash":"c35385645485ac49bcb827c0f8d74ff43696244a","modified":1484666374632},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1484666374784},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1484666374786},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1484666374795},{"_id":"themes/next/.gitignore","hash":"80710b94ff2f6c013859ebffffe90f9295fc94ed","modified":1484666374793},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1484666374797},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1484666374799},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1484666374801},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1484666374803},{"_id":"themes/next/_config.yml","hash":"37a481e6ff89767b6d94cb5ac70b7a89ea584004","modified":1484666381822},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1484666374807},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1484666374809},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1484666374935},{"_id":"source/_posts/china-javascript-environment.md","hash":"e2274a9c2d71f63b3fb07697a208f7920839198b","modified":1484666380352},{"_id":"source/_posts/essay-20160925.md","hash":"c855b4e54d2ffab505ec817d8492aa2dadd9f3e4","modified":1484666374592},{"_id":"source/_posts/git.md","hash":"8b7faedd3cf3feed40c2209b4ead0bf07bbcab89","modified":1484666374595},{"_id":"source/_posts/hexo-next-four.md","hash":"fdb5a10c84982e832515d110c78a115974ebbee3","modified":1484666381818},{"_id":"source/_posts/hexo-next-one.md","hash":"4a46f1f3f4c9b5970ca8e4b611dd85934f02154f","modified":1484666374597},{"_id":"source/_posts/hexo-next-three.md","hash":"e508015792577de993a8c30cb3e540e1f3c65756","modified":1484666380036},{"_id":"source/_posts/hexo-next-two.md","hash":"987023d4bdbdb8aee30657afbca0f20adfa29740","modified":1484666374600},{"_id":"source/_posts/how-it-feels-to-learn-javascript-in-2016.md","hash":"ed76e1114de6f70281942068e663873c2bc804a1","modified":1484666380354},{"_id":"source/_posts/sass.md","hash":"0c854c6e2a13f09c47bbfae153db695b7ca9e4e7","modified":1484666374607},{"_id":"source/_posts/use-jquery-skill.md","hash":"acbdc0d6ffbc989c17089131c439867e8e39ab9f","modified":1484749999829},{"_id":"source/_posts/why-introversion-like-alone.md","hash":"bab7ef7871a7a2b91ac5d58abac2940d95fb98b4","modified":1484666381820},{"_id":"source/about/index.md","hash":"44b72fd3b2fa66c8d316792acf9a148c066152de","modified":1484666380038},{"_id":"source/categories/index.md","hash":"0695caf565590169714c7f4f08f50e891606a0de","modified":1484666374617},{"_id":"source/guestbook/index.md","hash":"1ed2846ab4968c101055f88bc981d8adc8e1d2f0","modified":1484666374623},{"_id":"source/favicon/favicon.ico","hash":"ce57c97b0b11164c620c239873052702c087d2ae","modified":1484666374620},{"_id":"source/images/duoshuo_bkground.jpg","hash":"5191fec4422f33c937d1ffceb70ad3ed25eb6ab2","modified":1484666374625},{"_id":"source/images/forkme_left_white_ffffff.png","hash":"213f682ee0f6be9ee985c24b700b99c59ad004aa","modified":1484666374626},{"_id":"source/reward/reward_alipay.png","hash":"b80fe1b4c77968aa4f7f2fc76ae7cb17f40c1864","modified":1484666378831},{"_id":"source/reward/reward_wechat.png","hash":"6ddfee764f677b7ebc95babe4fc455f497f83d50","modified":1484666374631},{"_id":"source/tags/index.md","hash":"40d86c1abc839eff932490c3e114ea3913372c36","modified":1484666374634},{"_id":"source/weblog/index.md","hash":"d6df417919c5061be59f7f51bd355bd8e6d6b066","modified":1486301618918},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1484666374789},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1484666374791},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1484666374814},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1484666374811},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1484666374816},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1484666374818},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1484666374820},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1484666374823},{"_id":"themes/next/languages/ko.yml","hash":"feed5fdb677f87fbb9ba2b6e4413e7011180708e","modified":1484666374824},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1484666374826},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1484666374828},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1484666374830},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1484666374835},{"_id":"themes/next/languages/zh-Hans.yml","hash":"ab2f0b763f2515e61d4bbffd016b420893c03ab3","modified":1484666374833},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1484666374837},{"_id":"themes/next/layout/_layout.swig","hash":"65c9029c0be8cb0bb554bf75c1fd83c07a0a353c","modified":1486301114281},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1484666374926},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1484666374928},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1484666374929},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1484666374931},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1484666374932},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1484666374933},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1484666374937},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1484666375695},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1484666375697},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1484666375699},{"_id":"source/avatar/avatar.png","hash":"3d4dc3a401871df537859fd8fa3068d90eb60702","modified":1484666374615},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484666375526},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1484666374843},{"_id":"themes/next/layout/_macro/post.swig","hash":"f0862e443e1c7b9ef4a6b619b51ba6038a99a567","modified":1484666374845},{"_id":"themes/next/layout/_macro/reward.swig","hash":"0b99d546f76651798a5fe1591e52fb66054fc788","modified":1484666380040},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5a38b077a87d56142cd9919b306c99f030cc1e85","modified":1485175460479},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1484666374852},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d04a53cb1bb8a5f462b05107e9c566c2dfbf4c7d","modified":1484666374855},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1484666374857},{"_id":"themes/next/layout/_partials/footer.swig","hash":"5727c4cb7d8d8a5d55164ca7ff14252835f8b04a","modified":1484666374859},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1484666374861},{"_id":"themes/next/layout/_partials/header.swig","hash":"ec37bf41f7f8967e2e634c937f35614bb15c0040","modified":1486302458550},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1484666374868},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1484666374870},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1484666374886},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1484666374888},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1484666374891},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1484666374924},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1484666374938},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1484666374940},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1484666374942},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1484666375524},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1484666375552},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1484666375553},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1484666375554},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1484666375555},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1484666375556},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1484666375557},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1484666375557},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1484666375558},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1484666375558},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1484666375559},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1484666375560},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1484666375560},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1484666375561},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484666374897},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484666374898},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484666375331},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484666375331},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484666375335},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1484666375507},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1484666374864},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"540441af1d5b1b53bfdd3270104b1da4925d730b","modified":1484666374872},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1484666374874},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1484666374876},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1484666374878},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1484666374880},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"965e2b9fa8a993101d6eb11677188907193a70c0","modified":1484666374882},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1484666374884},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1484666374895},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1484666374898},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1484666374900},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1484666374911},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1484666374917},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f6b46096208512b4d8680c024fcb68f03ceab008","modified":1484666374918},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1484666374920},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1484666374922},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"1bcacc1ec68bfe979631db8821a9fac2325b14a3","modified":1484927420768},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1484666375331},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1484666375334},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1484666375505},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1484666375508},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1484666375510},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"09fedd6e3635475af66c0811a3e2c099777494c7","modified":1484666379729},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1484666375562},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1484666375563},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1484666375564},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1484666375564},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1484666375566},{"_id":"themes/next/source/js/src/particle.js","hash":"914c8e99af756e7004359aaa71fee4e59f214649","modified":1484666375566},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1484666375567},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1484666375569},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1484666375569},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1472854252776},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1472854252777},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1484666375633},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1484666375634},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1484666375635},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1484666375637},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1484666375641},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1484666375643},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1484666375645},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1484666375647},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1484666375648},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1484666375667},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1484666375671},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1484666375673},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1484666375674},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1484666375677},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1484666375679},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1484666375680},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1484666375684},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1484666375686},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1484666375692},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1484666375693},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1484666375694},{"_id":"themes/next/source/js/src/embed.js","hash":"639b2724c34ba16acdb731b2f628c66ecf0a49c0","modified":1484926952437},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1484666375670},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1484666374902},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1484666374904},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a576c23d426ab236eb3dcd0bfe1b3f0b0c54ad1a","modified":1484666374905},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1484666374906},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1484666374908},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1484666374909},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1484666374914},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"21cff404c66f45780951725a151f3ec61da007f7","modified":1484924162477},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1484666374944},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1484666374946},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1484666374949},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1484666374951},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1484666375008},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1484666375174},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2ed4ef9e69217b58d0e82fe60ad7d279ad8b5e10","modified":1484666375282},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1484666375259},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1484666375284},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1484666375286},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1484666375305},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1484666375307},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1484666375356},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1484666375357},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1484666375359},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1484666375361},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1484666375381},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1484666375383},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1484666375385},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1484666375431},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1484666375433},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1484666375435},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1484666375437},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1484666375464},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1484666375469},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1484666375471},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1484666375473},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1484666375475},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1484666375498},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1484666375499},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1484666375503},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1484666375568},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1484666375571},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1484666375571},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1484666375572},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1484666375596},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1484666375595},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1484666375597},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1484666375628},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1484666375631},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1484666375632},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1484666375639},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1484666375640},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1484666375666},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1484666375650},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1484666375651},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1484666375652},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1484666375682},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1484666375682},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1484666375655},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1484666375656},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1484666375665},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1484666375689},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1484666374954},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1484666374956},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1484666374958},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1484666374960},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1484666374980},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1484666374962},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1484666374982},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1484666374984},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1484666374986},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1484666374987},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1484666374989},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1484666375006},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1484666375010},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1484666375055},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1484666375057},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1484666375060},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1484666375065},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1484666375080},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1484666375082},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1484666375083},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1484666375085},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1484666375105},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1484666375107},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"ee7a5e6c29e1ed3e608b964d0a267ef066993975","modified":1484666375109},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1484666375139},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1484666375141},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1484666375143},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1484666375145},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1484666375164},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1484666375165},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1484666375167},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1484666375169},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1484666375172},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1484666375205},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1484666375176},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1484666375207},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1484666375230},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1484666375209},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1484666375233},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1484666375235},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1484666375237},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"2785ff0c412ae042f783f64155d1053bf4c4bcfa","modified":1484666375255},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1484666375257},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1484666375406},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1484666375408},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1484666375467},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1484666375600},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1484666375599},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1484666375626},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1484666375626},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1484666375627},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1484666375628},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1484666375663},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1484666375659}],"Category":[{"name":"综合","_id":"ciysq4uh50005ugi49rozxg3e"},{"name":"随笔","_id":"ciysq4ujc000cugi4ksbalbb2"},{"name":"前端","_id":"ciysq4ulk000rugi4cf880j9q"}],"Data":[],"Page":[{"title":"404-找不到页面","date":"2016-09-03T09:17:18.000Z","comments":0,"_content":"<center>404 Not Found<center>\n---\n<center>\n**对不起，您所访问的页面不存在或者已删除****\n你可以**[点击此处](https://Neveryu.github.io)**返回首页.\n你可以去我的微博看看：**[http://weibo.com/Neveryu](http://weibo.com/Neveryu)**\n我的Github：**[http://github.com/Neveryu](http://github.com/Neveryu)**\n我的CSDN：**[http://blog.csdn.net/csdn_yudong](http://blog.csdn.net/csdn_yudong)**\n或者给我留言：***[https://neveryu.github.io/guestbook/](https://neveryu.github.io/guestbook/)***\n\n</center>\n<blockquote class=\"blockquote-center\">\n    因为期待得太苦，会导致得到的时候分外甜\n    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=27955654&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> -->\n\n    <embed src=\"https://music.163.com/style/swf/widget.swf?sid=32192436&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed>\n</blockquote>\n\n","source":"404.md","raw":"---\ntitle: 404-找不到页面\ndate: 2016-09-03 17:17:18\ncomments: false\n---\n<center>404 Not Found<center>\n---\n<center>\n**对不起，您所访问的页面不存在或者已删除****\n你可以**[点击此处](https://Neveryu.github.io)**返回首页.\n你可以去我的微博看看：**[http://weibo.com/Neveryu](http://weibo.com/Neveryu)**\n我的Github：**[http://github.com/Neveryu](http://github.com/Neveryu)**\n我的CSDN：**[http://blog.csdn.net/csdn_yudong](http://blog.csdn.net/csdn_yudong)**\n或者给我留言：***[https://neveryu.github.io/guestbook/](https://neveryu.github.io/guestbook/)***\n\n</center>\n<blockquote class=\"blockquote-center\">\n    因为期待得太苦，会导致得到的时候分外甜\n    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=27955654&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> -->\n\n    <embed src=\"https://music.163.com/style/swf/widget.swf?sid=32192436&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed>\n</blockquote>\n\n","updated":"2017-01-17T15:19:34.590Z","path":"404.html","layout":"page","_id":"ciysq4tr80000ugi4aedzqkrt","content":"<h2 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center>404 Not Found<center></center></center></h2><p><center><br><strong>对不起，您所访问的页面不存在或者已删除**</strong><br>你可以<strong><a href=\"https://Neveryu.github.io\">点击此处</a></strong>返回首页.<br>你可以去我的微博看看：<strong><a href=\"http://weibo.com/Neveryu\" target=\"_blank\" rel=\"external\">http://weibo.com/Neveryu</a></strong><br>我的Github：<strong><a href=\"http://github.com/Neveryu\" target=\"_blank\" rel=\"external\">http://github.com/Neveryu</a></strong><br>我的CSDN：<strong><a href=\"http://blog.csdn.net/csdn_yudong\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/csdn_yudong</a></strong><br>或者给我留言：<strong><em><a href=\"https://neveryu.github.io/guestbook/\">https://neveryu.github.io/guestbook/</a></em></strong></center></p>\n<p></p>\n<blockquote class=\"blockquote-center\"><br>    因为期待得太苦，会导致得到的时候分外甜<br>    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=27955654&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> --><br><br>    <embed src=\"https://music.163.com/style/swf/widget.swf?sid=32192436&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\" allownetworking=\"all\" oncontextmenu=\"return false\"><br></blockquote>\n\n","excerpt":"","more":"<h2 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a><center>404 Not Found<center></h2><p><center><br><strong>对不起，您所访问的页面不存在或者已删除**</strong><br>你可以<strong><a href=\"https://Neveryu.github.io\">点击此处</a></strong>返回首页.<br>你可以去我的微博看看：<strong><a href=\"http://weibo.com/Neveryu\">http://weibo.com/Neveryu</a></strong><br>我的Github：<strong><a href=\"http://github.com/Neveryu\">http://github.com/Neveryu</a></strong><br>我的CSDN：<strong><a href=\"http://blog.csdn.net/csdn_yudong\">http://blog.csdn.net/csdn_yudong</a></strong><br>或者给我留言：<strong><em><a href=\"https://neveryu.github.io/guestbook/\">https://neveryu.github.io/guestbook/</a></em></strong></p>\n<p></center></p>\n<blockquote class=\"blockquote-center\"><br>    因为期待得太苦，会导致得到的时候分外甜<br>    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=27955654&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> --><br><br>    <embed src=\"https://music.163.com/style/swf/widget.swf?sid=32192436&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed><br></blockquote>\n\n"},{"title":"about","date":"2016-09-03T15:42:06.000Z","comments":0,"_content":"\n# 联系方式\nEmail: React.dong.yu@gmail.com\nWeibo: http://weibo.com/Neveryu\n\n# 基本信息\n毕业学校：湖北工业大学\n毕业时间：2015年\n学历：本科\n目前所在城市：深圳\n\n# 个人简介\n全栈工程师\n\n之前一直做JAVA项目的开发\n目前为前端工程师\n喜欢 javascript 语言和相关组件以及 vue.js、node.js、mongoDB、PHP、JAVA、Redis 等后端、数据库技术\n\n<!--\n# 技能清单\n后端语言：Java/Node/PHP\n前端框架：zepto/jQuery/jQuery EasyUI/Bootstrap/AngularJS/\n前端工具：sass/compass/impressjs/hexo/requirejs/seajs\n数据库相关：MySQL/SQL Server/Redis/\n版本管理、文档和自动化部署工具：Svn/Git/Grunt/Gulp\n 单元测试：PHPUnit/SimpleTest/Qunit \nWeb框架：ThinkPHP/Spring MVC/CodeIgniter\n\n-->\n\n# 技能清单\n第五届蓝桥杯JAVA软件开发省赛一等奖","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-09-03 23:42:06\ncomments: false\n---\n\n# 联系方式\nEmail: React.dong.yu@gmail.com\nWeibo: http://weibo.com/Neveryu\n\n# 基本信息\n毕业学校：湖北工业大学\n毕业时间：2015年\n学历：本科\n目前所在城市：深圳\n\n# 个人简介\n全栈工程师\n\n之前一直做JAVA项目的开发\n目前为前端工程师\n喜欢 javascript 语言和相关组件以及 vue.js、node.js、mongoDB、PHP、JAVA、Redis 等后端、数据库技术\n\n<!--\n# 技能清单\n后端语言：Java/Node/PHP\n前端框架：zepto/jQuery/jQuery EasyUI/Bootstrap/AngularJS/\n前端工具：sass/compass/impressjs/hexo/requirejs/seajs\n数据库相关：MySQL/SQL Server/Redis/\n版本管理、文档和自动化部署工具：Svn/Git/Grunt/Gulp\n 单元测试：PHPUnit/SimpleTest/Qunit \nWeb框架：ThinkPHP/Spring MVC/CodeIgniter\n\n-->\n\n# 技能清单\n第五届蓝桥杯JAVA软件开发省赛一等奖","updated":"2017-01-17T15:19:40.038Z","path":"about/index.html","layout":"page","_id":"ciysq4ug00002ugi4dfwqb5m6","content":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p>Email: React.dong.yu@gmail.com<br>Weibo: <a href=\"http://weibo.com/Neveryu\" target=\"_blank\" rel=\"external\">http://weibo.com/Neveryu</a></p>\n<h1 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h1><p>毕业学校：湖北工业大学<br>毕业时间：2015年<br>学历：本科<br>目前所在城市：深圳</p>\n<h1 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h1><p>全栈工程师</p>\n<p>之前一直做JAVA项目的开发<br>目前为前端工程师<br>喜欢 javascript 语言和相关组件以及 vue.js、node.js、mongoDB、PHP、JAVA、Redis 等后端、数据库技术</p>\n<!--\n# 技能清单\n后端语言：Java/Node/PHP\n前端框架：zepto/jQuery/jQuery EasyUI/Bootstrap/AngularJS/\n前端工具：sass/compass/impressjs/hexo/requirejs/seajs\n数据库相关：MySQL/SQL Server/Redis/\n版本管理、文档和自动化部署工具：Svn/Git/Grunt/Gulp\n 单元测试：PHPUnit/SimpleTest/Qunit \nWeb框架：ThinkPHP/Spring MVC/CodeIgniter\n\n-->\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>第五届蓝桥杯JAVA软件开发省赛一等奖</p>\n","excerpt":"","more":"<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p>Email: React.dong.yu@gmail.com<br>Weibo: <a href=\"http://weibo.com/Neveryu\">http://weibo.com/Neveryu</a></p>\n<h1 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h1><p>毕业学校：湖北工业大学<br>毕业时间：2015年<br>学历：本科<br>目前所在城市：深圳</p>\n<h1 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h1><p>全栈工程师</p>\n<p>之前一直做JAVA项目的开发<br>目前为前端工程师<br>喜欢 javascript 语言和相关组件以及 vue.js、node.js、mongoDB、PHP、JAVA、Redis 等后端、数据库技术</p>\n<!--\n# 技能清单\n后端语言：Java/Node/PHP\n前端框架：zepto/jQuery/jQuery EasyUI/Bootstrap/AngularJS/\n前端工具：sass/compass/impressjs/hexo/requirejs/seajs\n数据库相关：MySQL/SQL Server/Redis/\n版本管理、文档和自动化部署工具：Svn/Git/Grunt/Gulp\n 单元测试：PHPUnit/SimpleTest/Qunit \nWeb框架：ThinkPHP/Spring MVC/CodeIgniter\n\n-->\n<h1 id=\"技能清单\"><a href=\"#技能清单\" class=\"headerlink\" title=\"技能清单\"></a>技能清单</h1><p>第五届蓝桥杯JAVA软件开发省赛一等奖</p>\n"},{"title":"categories","date":"2016-09-05T15:41:55.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-09-05 23:41:55\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-01-17T15:19:34.617Z","path":"categories/index.html","layout":"page","_id":"ciysq4ugk0004ugi4tuyrywhh","content":"","excerpt":"","more":""},{"title":"guestbook","date":"2016-09-03T09:21:10.000Z","_content":"<blockquote class=\"blockquote-center\">\n    认真的人才有资格开玩笑\n    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=413831749&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> -->\n    <embed src=\"https://music.163.com/style/swf/widget.swf?sid=27955653&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed>\n</blockquote>\n<br/>\n\n<span id=\"yu-2\">最近访客</span>\n<div class=\"ds-recent-visitors\" data-num-items=\"39\" data-avatar-size=\"40\" id=\"ds-recent-visitors\"></div>\n\n\n","source":"guestbook/index.md","raw":"---\ntitle: guestbook\ndate: 2016-09-03 17:21:10\n---\n<blockquote class=\"blockquote-center\">\n    认真的人才有资格开玩笑\n    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=413831749&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> -->\n    <embed src=\"https://music.163.com/style/swf/widget.swf?sid=27955653&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed>\n</blockquote>\n<br/>\n\n<span id=\"yu-2\">最近访客</span>\n<div class=\"ds-recent-visitors\" data-num-items=\"39\" data-avatar-size=\"40\" id=\"ds-recent-visitors\"></div>\n\n\n","updated":"2017-01-17T15:19:34.623Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"ciysq4uhx0008ugi4l3wjm1rl","content":"<p><blockquote class=\"blockquote-center\"><br>    认真的人才有资格开玩笑<br>    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=413831749&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> --><br>    <embed src=\"https://music.163.com/style/swf/widget.swf?sid=27955653&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\" allownetworking=\"all\" oncontextmenu=\"return false\"><br></blockquote><br><br></p>\n<p><span id=\"yu-2\">最近访客</span></p>\n<div class=\"ds-recent-visitors\" data-num-items=\"39\" data-avatar-size=\"40\" id=\"ds-recent-visitors\"></div>\n\n\n","excerpt":"","more":"<p><blockquote class=\"blockquote-center\"><br>    认真的人才有资格开玩笑<br>    <!-- <embed src=\"https://music.163.com/style/swf/widget.swf?sid=413831749&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed> --><br>    <embed src=\"https://music.163.com/style/swf/widget.swf?sid=27955653&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed><br></blockquote><br><br/></p>\n<p><span id=\"yu-2\">最近访客</span></p>\n<div class=\"ds-recent-visitors\" data-num-items=\"39\" data-avatar-size=\"40\" id=\"ds-recent-visitors\"></div>\n\n\n"},{"title":"weblog","date":"2016-09-03T15:31:12.000Z","comments":0,"_content":"### 建站日志\n**2017-02-05：**将背景动画调整为按需加载.\n**2017-01-11：**将多说自定义样式移到本地 & 为多说评论添加显示浏览器及操作系统UA信息.\n**2016-11-11：**布局调整，添加多说id，解决 High一下 中音乐多次点击重复播放的问题.\n**2016-11-01：**解决 Jekyll v3.3中默认忽略 vendor 目录导致 css js 等资源加载不了的问题.\n**2016-09-26：**增加博客背景，鼠标点击样式.\n**2016-09-10：**增加网易云音乐外链、High一下、站内搜索.\n**2016-09-08：**增加不蒜子统计、站点地图、百度推送、美化用户留言头像和avatar.\n**2016-09-06：**选用多说作为分享和留言的平台、并做了一些兼容性的处理、404页面的调整.\n**2016-09-03：**这两天花了一些时间查阅了Hexo的相关文档和资料、选择了NexT.Mist主题、然后今天放到在github上.","source":"weblog/index.md","raw":"---\ntitle: weblog\ndate: 2016-09-03 23:31:12\ncomments: false\n---\n### 建站日志\n**2017-02-05：**将背景动画调整为按需加载.\n**2017-01-11：**将多说自定义样式移到本地 & 为多说评论添加显示浏览器及操作系统UA信息.\n**2016-11-11：**布局调整，添加多说id，解决 High一下 中音乐多次点击重复播放的问题.\n**2016-11-01：**解决 Jekyll v3.3中默认忽略 vendor 目录导致 css js 等资源加载不了的问题.\n**2016-09-26：**增加博客背景，鼠标点击样式.\n**2016-09-10：**增加网易云音乐外链、High一下、站内搜索.\n**2016-09-08：**增加不蒜子统计、站点地图、百度推送、美化用户留言头像和avatar.\n**2016-09-06：**选用多说作为分享和留言的平台、并做了一些兼容性的处理、404页面的调整.\n**2016-09-03：**这两天花了一些时间查阅了Hexo的相关文档和资料、选择了NexT.Mist主题、然后今天放到在github上.","updated":"2017-02-05T13:33:38.918Z","path":"weblog/index.html","layout":"page","_id":"ciysq4uit000augi43z2qh9a3","content":"<h3 id=\"建站日志\"><a href=\"#建站日志\" class=\"headerlink\" title=\"建站日志\"></a>建站日志</h3><p><strong>2017-02-05：</strong>将背景动画调整为按需加载.<br><strong>2017-01-11：</strong>将多说自定义样式移到本地 &amp; 为多说评论添加显示浏览器及操作系统UA信息.<br><strong>2016-11-11：</strong>布局调整，添加多说id，解决 High一下 中音乐多次点击重复播放的问题.<br><strong>2016-11-01：</strong>解决 Jekyll v3.3中默认忽略 vendor 目录导致 css js 等资源加载不了的问题.<br><strong>2016-09-26：</strong>增加博客背景，鼠标点击样式.<br><strong>2016-09-10：</strong>增加网易云音乐外链、High一下、站内搜索.<br><strong>2016-09-08：</strong>增加不蒜子统计、站点地图、百度推送、美化用户留言头像和avatar.<br><strong>2016-09-06：</strong>选用多说作为分享和留言的平台、并做了一些兼容性的处理、404页面的调整.<br><strong>2016-09-03：</strong>这两天花了一些时间查阅了Hexo的相关文档和资料、选择了NexT.Mist主题、然后今天放到在github上.</p>\n","excerpt":"","more":"<h3 id=\"建站日志\"><a href=\"#建站日志\" class=\"headerlink\" title=\"建站日志\"></a>建站日志</h3><p><strong>2017-02-05：</strong>将背景动画调整为按需加载.<br><strong>2017-01-11：</strong>将多说自定义样式移到本地 &amp; 为多说评论添加显示浏览器及操作系统UA信息.<br><strong>2016-11-11：</strong>布局调整，添加多说id，解决 High一下 中音乐多次点击重复播放的问题.<br><strong>2016-11-01：</strong>解决 Jekyll v3.3中默认忽略 vendor 目录导致 css js 等资源加载不了的问题.<br><strong>2016-09-26：</strong>增加博客背景，鼠标点击样式.<br><strong>2016-09-10：</strong>增加网易云音乐外链、High一下、站内搜索.<br><strong>2016-09-08：</strong>增加不蒜子统计、站点地图、百度推送、美化用户留言头像和avatar.<br><strong>2016-09-06：</strong>选用多说作为分享和留言的平台、并做了一些兼容性的处理、404页面的调整.<br><strong>2016-09-03：</strong>这两天花了一些时间查阅了Hexo的相关文档和资料、选择了NexT.Mist主题、然后今天放到在github上.</p>\n"},{"title":"tags","date":"2016-09-05T15:41:32.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-09-05 23:41:32\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-01-17T15:19:34.634Z","path":"tags/index.html","layout":"page","_id":"ciysq4ujg000eugi4lo56i7ee","content":"","excerpt":"","more":""}],"Post":[{"title":"Git学习总结","date":"2016-10-07T05:25:24.000Z","comments":0,"_content":"## 从svn到git\n\n两者都是优秀的版本管理工具（giter请不要鄙视svner）\n* svn上手非常容易，操作简单\n* git功能强大，但是要熟练使用分支不算容易\n\ngit因为是分布式的，所以其核心就是分支（只有master分支情况下和svn差不多？），分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到master分支，master分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。\n\n被git坑了一个星期之后决心把官方文档看一下，结合实践经验进行了整理。\n\n- - -\n\n<!-- more -->\n\n## 新手常见问题\n\n1. 如何查看有哪些分支？\n`git branch -a`\n\n2. 如何强制检出/切换分支或分支指定文件\n`git checkout <branch> [file] [-f]`\n强制更新，以branch版本的代码为主\n\n3. 提交代码出现冲突冲突怎么办？\n`hint: Updates were rejected because the tip of your current branch is behind`\n`hint: its remote counterpart. Integrate the remote changes (e.g.`\n`hint: 'git pull ...') before pushing again.`\n`hint: See the 'Note about fast-forwards' in 'git push --help' for details.`\n先切换分支，然后拉取分支上最新的代码覆盖到本地\n`git pull`\n添加或者提交代码，解决冲突之后\n`git push`\n\n4. 如何新建分支\n`git checkout -b <branch_name>`  \n本地建立 branch 並立即切換到新分支\n`git branch -m <new_name>`\n修改分支名称  \n\n5. 从远程仓库拉取代码到本地仓库，并建立跟踪关系\n`git clone http://xxx.git`\n或者\n`get clone git@xxx.git`\n然后\n`git checkout -b <本地新分支名> <对应的远程分支名>`\n\n6. 远程仓库新建了一个分支，如何更新远程分支信息\n`git fetch <remote base>`\n\n7. 如何在远程仓库新建一个分支\n`git branch <branch name>`\n新建一个本地分支，按照正常流程提交完代码后，推送到远程\n`git push <remote base> <local branch>:<remote branch>`\n\n## 实用指令\n### reset\n`git reset [file]`\n取消暂存\n\n### remote\n查看远程仓库名\n\n`git remote -v`\n查看远程仓库url\n\n`git remote add <basename> <url>`\n新增远程仓库\n\n`git remote show <basename>`\n查看远程仓库详细信息\n\n`git remote rename <old basename> <new basename>`\n重命名远程仓库\n\n### pull\n相当于fetch和merge\n\n### push\n`git push [remote_branch] [local_branch]`\n推送本地仓库代码到远程仓库，相当于svn的commit\n\n`git push <remote base> [tag name]`\n推送本地标签到远程仓库\n\n`git push <remote base> <remote branch>:<local branch>`\n将本地分支推送到指定的远程分支\n\n`git push <remote base> --delete <remote branch>`\n删除远程分支\n\n### tag\n查看标签（用来标记标志性的稳定版本信息）\n\n`git tag -l '[expression]'`\n查看那符合正则表达式的\n\n`git tag -a <tag name> -m <comment>`\n添加带注释的标签\n\n`git tag -a <tag name> <md5>`\n对某个版本打标签\n\n`git tag [tag name]`\n如果没有标签名，则为查看所有标签。带标签名则为新建标签\n\n### merge\n`git merge <branch name>`\n将其他分支合并到本分支\n\n### commit\n`git commit -a -m 'xx'`\n暂存并提交\n\n### branch\n`git branch`\n查看本地仓库分支\n\n`git branch -v`\n查看本地仓库分支最后一次提交情况\n\n`git branch -vv`\n查看分支跟踪情况\n\n`git branch <branch name>`\n新建分支\n\n`git branch -d <branch name>`\n删除分支\n\n`git branch [--merged | --no-merged]`\n查看已合并|未合并的本地仓库分支\n\n`git branch -u <remote base>/<remote branch>`\n修改当前跟踪分支\n\n### commit\n`git commit -a -m 'xx'`\n提交并且暂存暂存的方法\n\n### checkout\n`git checkout -- [file]`\n恢复文件\n\n`git checkout -b [branchname] [tagname]`\n在特定的版本上创建一个新的分支并切换到此分支\n\n`git checkout -b [local branch] [remote base]/[remote branch]`\n将远程分支检出到本地分支\n\n`git checkout --track <remote base>/<remote branch>`\n让当前分支跟踪远程分支\n\n\n`git checkout --track <remote base>/<remote branch>`\n`git checkout -b <local branch> <remote base>/<remote branch>`\n让当前分支跟踪到远程分支。两条命令作用基本一致，不同的是第二条命令可以重命名检出的分支。\n\n### rebase\n`git rebase [basebranch]`\n变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n\n## 小技巧\n\n### 查看配置\n`git config -1`\n\n### 设置git push 默认\n`git config --global push.default current`\n\n### 设置别名\n`git config --global alias.<name> <commend>`\n我的设置：\n`git config --global alias.st status`\n`git config --global alias.cm \"commit -m\"`\n`git config --global alias.ph \"push origin <local_repository>:<remote_repository>\"`\n\n### 保存用户名和密码\n\n#### 对于http(s)协议，可以用下面命令临时缓存\n`git config --global credential.helper cache`\n开启linux缓存\n`git config --global credential.helper wincred`\n开启windows缓存\n#### 对于ssh协议，可以用ssh  key，具体教程网上很多\n\n### 忽略文件\n默认方法是在当前项目目录下创建一个.gitignore文件，如果需要忽略的文件已经添加到版本库中，请先移除\n`git rm --cached [file]`\n不删除文件，只移除追踪。\n\n[权威教程](http://git-scm.com/book/zh/v2)\n","source":"_posts/git.md","raw":"---\ntitle: Git学习总结\ndate: 2016-10-07 13:25:24\ncategories: 综合\ntags: [Git]\ncomments: false\n---\n## 从svn到git\n\n两者都是优秀的版本管理工具（giter请不要鄙视svner）\n* svn上手非常容易，操作简单\n* git功能强大，但是要熟练使用分支不算容易\n\ngit因为是分布式的，所以其核心就是分支（只有master分支情况下和svn差不多？），分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到master分支，master分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。\n\n被git坑了一个星期之后决心把官方文档看一下，结合实践经验进行了整理。\n\n- - -\n\n<!-- more -->\n\n## 新手常见问题\n\n1. 如何查看有哪些分支？\n`git branch -a`\n\n2. 如何强制检出/切换分支或分支指定文件\n`git checkout <branch> [file] [-f]`\n强制更新，以branch版本的代码为主\n\n3. 提交代码出现冲突冲突怎么办？\n`hint: Updates were rejected because the tip of your current branch is behind`\n`hint: its remote counterpart. Integrate the remote changes (e.g.`\n`hint: 'git pull ...') before pushing again.`\n`hint: See the 'Note about fast-forwards' in 'git push --help' for details.`\n先切换分支，然后拉取分支上最新的代码覆盖到本地\n`git pull`\n添加或者提交代码，解决冲突之后\n`git push`\n\n4. 如何新建分支\n`git checkout -b <branch_name>`  \n本地建立 branch 並立即切換到新分支\n`git branch -m <new_name>`\n修改分支名称  \n\n5. 从远程仓库拉取代码到本地仓库，并建立跟踪关系\n`git clone http://xxx.git`\n或者\n`get clone git@xxx.git`\n然后\n`git checkout -b <本地新分支名> <对应的远程分支名>`\n\n6. 远程仓库新建了一个分支，如何更新远程分支信息\n`git fetch <remote base>`\n\n7. 如何在远程仓库新建一个分支\n`git branch <branch name>`\n新建一个本地分支，按照正常流程提交完代码后，推送到远程\n`git push <remote base> <local branch>:<remote branch>`\n\n## 实用指令\n### reset\n`git reset [file]`\n取消暂存\n\n### remote\n查看远程仓库名\n\n`git remote -v`\n查看远程仓库url\n\n`git remote add <basename> <url>`\n新增远程仓库\n\n`git remote show <basename>`\n查看远程仓库详细信息\n\n`git remote rename <old basename> <new basename>`\n重命名远程仓库\n\n### pull\n相当于fetch和merge\n\n### push\n`git push [remote_branch] [local_branch]`\n推送本地仓库代码到远程仓库，相当于svn的commit\n\n`git push <remote base> [tag name]`\n推送本地标签到远程仓库\n\n`git push <remote base> <remote branch>:<local branch>`\n将本地分支推送到指定的远程分支\n\n`git push <remote base> --delete <remote branch>`\n删除远程分支\n\n### tag\n查看标签（用来标记标志性的稳定版本信息）\n\n`git tag -l '[expression]'`\n查看那符合正则表达式的\n\n`git tag -a <tag name> -m <comment>`\n添加带注释的标签\n\n`git tag -a <tag name> <md5>`\n对某个版本打标签\n\n`git tag [tag name]`\n如果没有标签名，则为查看所有标签。带标签名则为新建标签\n\n### merge\n`git merge <branch name>`\n将其他分支合并到本分支\n\n### commit\n`git commit -a -m 'xx'`\n暂存并提交\n\n### branch\n`git branch`\n查看本地仓库分支\n\n`git branch -v`\n查看本地仓库分支最后一次提交情况\n\n`git branch -vv`\n查看分支跟踪情况\n\n`git branch <branch name>`\n新建分支\n\n`git branch -d <branch name>`\n删除分支\n\n`git branch [--merged | --no-merged]`\n查看已合并|未合并的本地仓库分支\n\n`git branch -u <remote base>/<remote branch>`\n修改当前跟踪分支\n\n### commit\n`git commit -a -m 'xx'`\n提交并且暂存暂存的方法\n\n### checkout\n`git checkout -- [file]`\n恢复文件\n\n`git checkout -b [branchname] [tagname]`\n在特定的版本上创建一个新的分支并切换到此分支\n\n`git checkout -b [local branch] [remote base]/[remote branch]`\n将远程分支检出到本地分支\n\n`git checkout --track <remote base>/<remote branch>`\n让当前分支跟踪远程分支\n\n\n`git checkout --track <remote base>/<remote branch>`\n`git checkout -b <local branch> <remote base>/<remote branch>`\n让当前分支跟踪到远程分支。两条命令作用基本一致，不同的是第二条命令可以重命名检出的分支。\n\n### rebase\n`git rebase [basebranch]`\n变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n\n## 小技巧\n\n### 查看配置\n`git config -1`\n\n### 设置git push 默认\n`git config --global push.default current`\n\n### 设置别名\n`git config --global alias.<name> <commend>`\n我的设置：\n`git config --global alias.st status`\n`git config --global alias.cm \"commit -m\"`\n`git config --global alias.ph \"push origin <local_repository>:<remote_repository>\"`\n\n### 保存用户名和密码\n\n#### 对于http(s)协议，可以用下面命令临时缓存\n`git config --global credential.helper cache`\n开启linux缓存\n`git config --global credential.helper wincred`\n开启windows缓存\n#### 对于ssh协议，可以用ssh  key，具体教程网上很多\n\n### 忽略文件\n默认方法是在当前项目目录下创建一个.gitignore文件，如果需要忽略的文件已经添加到版本库中，请先移除\n`git rm --cached [file]`\n不删除文件，只移除追踪。\n\n[权威教程](http://git-scm.com/book/zh/v2)\n","slug":"git","published":1,"updated":"2017-01-17T15:19:34.595Z","layout":"post","photos":[],"link":"","_id":"ciysq4uf60001ugi4hsift2ln","content":"<h2 id=\"从svn到git\"><a href=\"#从svn到git\" class=\"headerlink\" title=\"从svn到git\"></a>从svn到git</h2><p>两者都是优秀的版本管理工具（giter请不要鄙视svner）</p>\n<ul>\n<li>svn上手非常容易，操作简单</li>\n<li>git功能强大，但是要熟练使用分支不算容易</li>\n</ul>\n<p>git因为是分布式的，所以其核心就是分支（只有master分支情况下和svn差不多？），分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到master分支，master分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。</p>\n<p>被git坑了一个星期之后决心把官方文档看一下，结合实践经验进行了整理。</p>\n<hr>\n<a id=\"more\"></a>\n<h2 id=\"新手常见问题\"><a href=\"#新手常见问题\" class=\"headerlink\" title=\"新手常见问题\"></a>新手常见问题</h2><ol>\n<li><p>如何查看有哪些分支？<br><code>git branch -a</code></p>\n</li>\n<li><p>如何强制检出/切换分支或分支指定文件<br><code>git checkout &lt;branch&gt; [file] [-f]</code><br>强制更新，以branch版本的代码为主</p>\n</li>\n<li><p>提交代码出现冲突冲突怎么办？<br><code>hint: Updates were rejected because the tip of your current branch is behind</code><br><code>hint: its remote counterpart. Integrate the remote changes (e.g.</code><br><code>hint: &#39;git pull ...&#39;) before pushing again.</code><br><code>hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</code><br>先切换分支，然后拉取分支上最新的代码覆盖到本地<br><code>git pull</code><br>添加或者提交代码，解决冲突之后<br><code>git push</code></p>\n</li>\n<li><p>如何新建分支<br><code>git checkout -b &lt;branch_name&gt;</code><br>本地建立 branch 並立即切換到新分支<br><code>git branch -m &lt;new_name&gt;</code><br>修改分支名称  </p>\n</li>\n<li><p>从远程仓库拉取代码到本地仓库，并建立跟踪关系<br><code>git clone http://xxx.git</code><br>或者<br><code>get clone git@xxx.git</code><br>然后<br><code>git checkout -b &lt;本地新分支名&gt; &lt;对应的远程分支名&gt;</code></p>\n</li>\n<li><p>远程仓库新建了一个分支，如何更新远程分支信息<br><code>git fetch &lt;remote base&gt;</code></p>\n</li>\n<li><p>如何在远程仓库新建一个分支<br><code>git branch &lt;branch name&gt;</code><br>新建一个本地分支，按照正常流程提交完代码后，推送到远程<br><code>git push &lt;remote base&gt; &lt;local branch&gt;:&lt;remote branch&gt;</code></p>\n</li>\n</ol>\n<h2 id=\"实用指令\"><a href=\"#实用指令\" class=\"headerlink\" title=\"实用指令\"></a>实用指令</h2><h3 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h3><p><code>git reset [file]</code><br>取消暂存</p>\n<h3 id=\"remote\"><a href=\"#remote\" class=\"headerlink\" title=\"remote\"></a>remote</h3><p>查看远程仓库名</p>\n<p><code>git remote -v</code><br>查看远程仓库url</p>\n<p><code>git remote add &lt;basename&gt; &lt;url&gt;</code><br>新增远程仓库</p>\n<p><code>git remote show &lt;basename&gt;</code><br>查看远程仓库详细信息</p>\n<p><code>git remote rename &lt;old basename&gt; &lt;new basename&gt;</code><br>重命名远程仓库</p>\n<h3 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h3><p>相当于fetch和merge</p>\n<h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h3><p><code>git push [remote_branch] [local_branch]</code><br>推送本地仓库代码到远程仓库，相当于svn的commit</p>\n<p><code>git push &lt;remote base&gt; [tag name]</code><br>推送本地标签到远程仓库</p>\n<p><code>git push &lt;remote base&gt; &lt;remote branch&gt;:&lt;local branch&gt;</code><br>将本地分支推送到指定的远程分支</p>\n<p><code>git push &lt;remote base&gt; --delete &lt;remote branch&gt;</code><br>删除远程分支</p>\n<h3 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h3><p>查看标签（用来标记标志性的稳定版本信息）</p>\n<p><code>git tag -l &#39;[expression]&#39;</code><br>查看那符合正则表达式的</p>\n<p><code>git tag -a &lt;tag name&gt; -m &lt;comment&gt;</code><br>添加带注释的标签</p>\n<p><code>git tag -a &lt;tag name&gt; &lt;md5&gt;</code><br>对某个版本打标签</p>\n<p><code>git tag [tag name]</code><br>如果没有标签名，则为查看所有标签。带标签名则为新建标签</p>\n<h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h3><p><code>git merge &lt;branch name&gt;</code><br>将其他分支合并到本分支</p>\n<h3 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h3><p><code>git commit -a -m &#39;xx&#39;</code><br>暂存并提交</p>\n<h3 id=\"branch\"><a href=\"#branch\" class=\"headerlink\" title=\"branch\"></a>branch</h3><p><code>git branch</code><br>查看本地仓库分支</p>\n<p><code>git branch -v</code><br>查看本地仓库分支最后一次提交情况</p>\n<p><code>git branch -vv</code><br>查看分支跟踪情况</p>\n<p><code>git branch &lt;branch name&gt;</code><br>新建分支</p>\n<p><code>git branch -d &lt;branch name&gt;</code><br>删除分支</p>\n<p><code>git branch [--merged | --no-merged]</code><br>查看已合并|未合并的本地仓库分支</p>\n<p><code>git branch -u &lt;remote base&gt;/&lt;remote branch&gt;</code><br>修改当前跟踪分支</p>\n<h3 id=\"commit-1\"><a href=\"#commit-1\" class=\"headerlink\" title=\"commit\"></a>commit</h3><p><code>git commit -a -m &#39;xx&#39;</code><br>提交并且暂存暂存的方法</p>\n<h3 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h3><p><code>git checkout -- [file]</code><br>恢复文件</p>\n<p><code>git checkout -b [branchname] [tagname]</code><br>在特定的版本上创建一个新的分支并切换到此分支</p>\n<p><code>git checkout -b [local branch] [remote base]/[remote branch]</code><br>将远程分支检出到本地分支</p>\n<p><code>git checkout --track &lt;remote base&gt;/&lt;remote branch&gt;</code><br>让当前分支跟踪远程分支</p>\n<p><code>git checkout --track &lt;remote base&gt;/&lt;remote branch&gt;</code><br><code>git checkout -b &lt;local branch&gt; &lt;remote base&gt;/&lt;remote branch&gt;</code><br>让当前分支跟踪到远程分支。两条命令作用基本一致，不同的是第二条命令可以重命名检出的分支。</p>\n<h3 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h3><p><code>git rebase [basebranch]</code><br>变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</p>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><h3 id=\"查看配置\"><a href=\"#查看配置\" class=\"headerlink\" title=\"查看配置\"></a>查看配置</h3><p><code>git config -1</code></p>\n<h3 id=\"设置git-push-默认\"><a href=\"#设置git-push-默认\" class=\"headerlink\" title=\"设置git push 默认\"></a>设置git push 默认</h3><p><code>git config --global push.default current</code></p>\n<h3 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h3><p><code>git config --global alias.&lt;name&gt; &lt;commend&gt;</code><br>我的设置：<br><code>git config --global alias.st status</code><br><code>git config --global alias.cm &quot;commit -m&quot;</code><br><code>git config --global alias.ph &quot;push origin &lt;local_repository&gt;:&lt;remote_repository&gt;&quot;</code></p>\n<h3 id=\"保存用户名和密码\"><a href=\"#保存用户名和密码\" class=\"headerlink\" title=\"保存用户名和密码\"></a>保存用户名和密码</h3><h4 id=\"对于http-s-协议，可以用下面命令临时缓存\"><a href=\"#对于http-s-协议，可以用下面命令临时缓存\" class=\"headerlink\" title=\"对于http(s)协议，可以用下面命令临时缓存\"></a>对于http(s)协议，可以用下面命令临时缓存</h4><p><code>git config --global credential.helper cache</code><br>开启linux缓存<br><code>git config --global credential.helper wincred</code><br>开启windows缓存</p>\n<h4 id=\"对于ssh协议，可以用ssh-key，具体教程网上很多\"><a href=\"#对于ssh协议，可以用ssh-key，具体教程网上很多\" class=\"headerlink\" title=\"对于ssh协议，可以用ssh  key，具体教程网上很多\"></a>对于ssh协议，可以用ssh  key，具体教程网上很多</h4><h3 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h3><p>默认方法是在当前项目目录下创建一个.gitignore文件，如果需要忽略的文件已经添加到版本库中，请先移除<br><code>git rm --cached [file]</code><br>不删除文件，只移除追踪。</p>\n<p><a href=\"http://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"external\">权威教程</a></p>\n","excerpt":"<h2 id=\"从svn到git\"><a href=\"#从svn到git\" class=\"headerlink\" title=\"从svn到git\"></a>从svn到git</h2><p>两者都是优秀的版本管理工具（giter请不要鄙视svner）</p>\n<ul>\n<li>svn上手非常容易，操作简单</li>\n<li>git功能强大，但是要熟练使用分支不算容易</li>\n</ul>\n<p>git因为是分布式的，所以其核心就是分支（只有master分支情况下和svn差不多？），分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到master分支，master分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。</p>\n<p>被git坑了一个星期之后决心把官方文档看一下，结合实践经验进行了整理。</p>\n<hr>","more":"<h2 id=\"新手常见问题\"><a href=\"#新手常见问题\" class=\"headerlink\" title=\"新手常见问题\"></a>新手常见问题</h2><ol>\n<li><p>如何查看有哪些分支？<br><code>git branch -a</code></p>\n</li>\n<li><p>如何强制检出/切换分支或分支指定文件<br><code>git checkout &lt;branch&gt; [file] [-f]</code><br>强制更新，以branch版本的代码为主</p>\n</li>\n<li><p>提交代码出现冲突冲突怎么办？<br><code>hint: Updates were rejected because the tip of your current branch is behind</code><br><code>hint: its remote counterpart. Integrate the remote changes (e.g.</code><br><code>hint: &#39;git pull ...&#39;) before pushing again.</code><br><code>hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</code><br>先切换分支，然后拉取分支上最新的代码覆盖到本地<br><code>git pull</code><br>添加或者提交代码，解决冲突之后<br><code>git push</code></p>\n</li>\n<li><p>如何新建分支<br><code>git checkout -b &lt;branch_name&gt;</code><br>本地建立 branch 並立即切換到新分支<br><code>git branch -m &lt;new_name&gt;</code><br>修改分支名称  </p>\n</li>\n<li><p>从远程仓库拉取代码到本地仓库，并建立跟踪关系<br><code>git clone http://xxx.git</code><br>或者<br><code>get clone git@xxx.git</code><br>然后<br><code>git checkout -b &lt;本地新分支名&gt; &lt;对应的远程分支名&gt;</code></p>\n</li>\n<li><p>远程仓库新建了一个分支，如何更新远程分支信息<br><code>git fetch &lt;remote base&gt;</code></p>\n</li>\n<li><p>如何在远程仓库新建一个分支<br><code>git branch &lt;branch name&gt;</code><br>新建一个本地分支，按照正常流程提交完代码后，推送到远程<br><code>git push &lt;remote base&gt; &lt;local branch&gt;:&lt;remote branch&gt;</code></p>\n</li>\n</ol>\n<h2 id=\"实用指令\"><a href=\"#实用指令\" class=\"headerlink\" title=\"实用指令\"></a>实用指令</h2><h3 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h3><p><code>git reset [file]</code><br>取消暂存</p>\n<h3 id=\"remote\"><a href=\"#remote\" class=\"headerlink\" title=\"remote\"></a>remote</h3><p>查看远程仓库名</p>\n<p><code>git remote -v</code><br>查看远程仓库url</p>\n<p><code>git remote add &lt;basename&gt; &lt;url&gt;</code><br>新增远程仓库</p>\n<p><code>git remote show &lt;basename&gt;</code><br>查看远程仓库详细信息</p>\n<p><code>git remote rename &lt;old basename&gt; &lt;new basename&gt;</code><br>重命名远程仓库</p>\n<h3 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h3><p>相当于fetch和merge</p>\n<h3 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h3><p><code>git push [remote_branch] [local_branch]</code><br>推送本地仓库代码到远程仓库，相当于svn的commit</p>\n<p><code>git push &lt;remote base&gt; [tag name]</code><br>推送本地标签到远程仓库</p>\n<p><code>git push &lt;remote base&gt; &lt;remote branch&gt;:&lt;local branch&gt;</code><br>将本地分支推送到指定的远程分支</p>\n<p><code>git push &lt;remote base&gt; --delete &lt;remote branch&gt;</code><br>删除远程分支</p>\n<h3 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h3><p>查看标签（用来标记标志性的稳定版本信息）</p>\n<p><code>git tag -l &#39;[expression]&#39;</code><br>查看那符合正则表达式的</p>\n<p><code>git tag -a &lt;tag name&gt; -m &lt;comment&gt;</code><br>添加带注释的标签</p>\n<p><code>git tag -a &lt;tag name&gt; &lt;md5&gt;</code><br>对某个版本打标签</p>\n<p><code>git tag [tag name]</code><br>如果没有标签名，则为查看所有标签。带标签名则为新建标签</p>\n<h3 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h3><p><code>git merge &lt;branch name&gt;</code><br>将其他分支合并到本分支</p>\n<h3 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h3><p><code>git commit -a -m &#39;xx&#39;</code><br>暂存并提交</p>\n<h3 id=\"branch\"><a href=\"#branch\" class=\"headerlink\" title=\"branch\"></a>branch</h3><p><code>git branch</code><br>查看本地仓库分支</p>\n<p><code>git branch -v</code><br>查看本地仓库分支最后一次提交情况</p>\n<p><code>git branch -vv</code><br>查看分支跟踪情况</p>\n<p><code>git branch &lt;branch name&gt;</code><br>新建分支</p>\n<p><code>git branch -d &lt;branch name&gt;</code><br>删除分支</p>\n<p><code>git branch [--merged | --no-merged]</code><br>查看已合并|未合并的本地仓库分支</p>\n<p><code>git branch -u &lt;remote base&gt;/&lt;remote branch&gt;</code><br>修改当前跟踪分支</p>\n<h3 id=\"commit-1\"><a href=\"#commit-1\" class=\"headerlink\" title=\"commit\"></a>commit</h3><p><code>git commit -a -m &#39;xx&#39;</code><br>提交并且暂存暂存的方法</p>\n<h3 id=\"checkout\"><a href=\"#checkout\" class=\"headerlink\" title=\"checkout\"></a>checkout</h3><p><code>git checkout -- [file]</code><br>恢复文件</p>\n<p><code>git checkout -b [branchname] [tagname]</code><br>在特定的版本上创建一个新的分支并切换到此分支</p>\n<p><code>git checkout -b [local branch] [remote base]/[remote branch]</code><br>将远程分支检出到本地分支</p>\n<p><code>git checkout --track &lt;remote base&gt;/&lt;remote branch&gt;</code><br>让当前分支跟踪远程分支</p>\n<p><code>git checkout --track &lt;remote base&gt;/&lt;remote branch&gt;</code><br><code>git checkout -b &lt;local branch&gt; &lt;remote base&gt;/&lt;remote branch&gt;</code><br>让当前分支跟踪到远程分支。两条命令作用基本一致，不同的是第二条命令可以重命名检出的分支。</p>\n<h3 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h3><p><code>git rebase [basebranch]</code><br>变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。</p>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><h3 id=\"查看配置\"><a href=\"#查看配置\" class=\"headerlink\" title=\"查看配置\"></a>查看配置</h3><p><code>git config -1</code></p>\n<h3 id=\"设置git-push-默认\"><a href=\"#设置git-push-默认\" class=\"headerlink\" title=\"设置git push 默认\"></a>设置git push 默认</h3><p><code>git config --global push.default current</code></p>\n<h3 id=\"设置别名\"><a href=\"#设置别名\" class=\"headerlink\" title=\"设置别名\"></a>设置别名</h3><p><code>git config --global alias.&lt;name&gt; &lt;commend&gt;</code><br>我的设置：<br><code>git config --global alias.st status</code><br><code>git config --global alias.cm &quot;commit -m&quot;</code><br><code>git config --global alias.ph &quot;push origin &lt;local_repository&gt;:&lt;remote_repository&gt;&quot;</code></p>\n<h3 id=\"保存用户名和密码\"><a href=\"#保存用户名和密码\" class=\"headerlink\" title=\"保存用户名和密码\"></a>保存用户名和密码</h3><h4 id=\"对于http-s-协议，可以用下面命令临时缓存\"><a href=\"#对于http-s-协议，可以用下面命令临时缓存\" class=\"headerlink\" title=\"对于http(s)协议，可以用下面命令临时缓存\"></a>对于http(s)协议，可以用下面命令临时缓存</h4><p><code>git config --global credential.helper cache</code><br>开启linux缓存<br><code>git config --global credential.helper wincred</code><br>开启windows缓存</p>\n<h4 id=\"对于ssh协议，可以用ssh-key，具体教程网上很多\"><a href=\"#对于ssh协议，可以用ssh-key，具体教程网上很多\" class=\"headerlink\" title=\"对于ssh协议，可以用ssh  key，具体教程网上很多\"></a>对于ssh协议，可以用ssh  key，具体教程网上很多</h4><h3 id=\"忽略文件\"><a href=\"#忽略文件\" class=\"headerlink\" title=\"忽略文件\"></a>忽略文件</h3><p>默认方法是在当前项目目录下创建一个.gitignore文件，如果需要忽略的文件已经添加到版本库中，请先移除<br><code>git rm --cached [file]</code><br>不删除文件，只移除追踪。</p>\n<p><a href=\"http://git-scm.com/book/zh/v2\">权威教程</a></p>"},{"title":"如果深圳的夜晚没有风","date":"2016-09-25T15:25:24.000Z","comments":0,"_content":"<p id=\"div-border-top-green\">这座城市人很多，每天在路上都能看到好多拉着行李箱的人，不管他们是来到这座城市还是离开这座城市，至少他们都曾努力过。\n</p>\n\n<br/>\n\n<!-- more -->\n\n其实专业做博客的网站还是挺多的，比如说 CSDN 是吧，我之前也是在 CSDN 上面写一点东西，我的 CSDN 博客 [http://blog.csdn.net/csdn_yudong](http://blog.csdn.net/csdn_yudong) 。但是 CSDN 毕竟是一个技术类的博客网站，如果写一点生活杂谈还是不太好，而且 CSDN 上面挂载的广告，以及页面风格，我不太喜欢，因为我喜欢【精于心，简于形】，这波 [NexT](https://github.com/iissnan/hexo-theme-next) 主题的广告是不是很硬。\n\n在我想做博客之前，一直到我开始着手做这个博客，其实花了好久时间。而在我着手开始做这个博客，到这个博客完成，其实并没有花多久。也说明了一个道理，就是一定要勇于尝试，关键是要动手。我想起了马士兵老师的一句话，一个新鲜的事物，你一定要先去用它，应用驱动学习。——[我的建站日志](https://neveryu.github.io/weblog/)有记录网站的建设过程。\n\n究其原因：第一个，我觉得是自己考虑的太多，没有太大的把握就不会轻易的去尝试，所以我在着手做这个之前花了很多的时间去查，域名空间这些的，而且这些出售这些的服务商也挺多的，我这个人有选择恐惧症。也是怪尴尬的，每次看到一个东西有好多选择的时候，我都去比较，去分析，头痛。。而且我想，域名空间搞好以后，还要自己写页面这些的。关键是还要设计博客风格，页面样式这些的，一想到这些，就感觉是一个不小的工程啊，后来才发现我多虑了。\n\n后来，无意中看到了Hexo的Next主题的一篇博客，风格样式挺不错的，感谢 [Hexo](https://hexo.io/) 和 [Next](http://theme-next.iissnan.com/) 的文档写的如此的棒，以至于每一个人都能根据教程搭建一个自己的博客。这一切是如此的美好。\n\n\n最后送给大家一首歌，晚安。\n<p></p>\n<blockquote class=\"blockquote-center\">\n    <embed src=\"http://music.163.com/style/swf/widget.swf?sid=254359&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed>\n</blockquote>\n\n\n\n","source":"_posts/essay-20160925.md","raw":"---\ntitle: 如果深圳的夜晚没有风\ndate: 2016-09-25 23:25:24\ncategories: 随笔\ntags: [essay]\ncomments: false\n---\n<p id=\"div-border-top-green\">这座城市人很多，每天在路上都能看到好多拉着行李箱的人，不管他们是来到这座城市还是离开这座城市，至少他们都曾努力过。\n</p>\n\n<br/>\n\n<!-- more -->\n\n其实专业做博客的网站还是挺多的，比如说 CSDN 是吧，我之前也是在 CSDN 上面写一点东西，我的 CSDN 博客 [http://blog.csdn.net/csdn_yudong](http://blog.csdn.net/csdn_yudong) 。但是 CSDN 毕竟是一个技术类的博客网站，如果写一点生活杂谈还是不太好，而且 CSDN 上面挂载的广告，以及页面风格，我不太喜欢，因为我喜欢【精于心，简于形】，这波 [NexT](https://github.com/iissnan/hexo-theme-next) 主题的广告是不是很硬。\n\n在我想做博客之前，一直到我开始着手做这个博客，其实花了好久时间。而在我着手开始做这个博客，到这个博客完成，其实并没有花多久。也说明了一个道理，就是一定要勇于尝试，关键是要动手。我想起了马士兵老师的一句话，一个新鲜的事物，你一定要先去用它，应用驱动学习。——[我的建站日志](https://neveryu.github.io/weblog/)有记录网站的建设过程。\n\n究其原因：第一个，我觉得是自己考虑的太多，没有太大的把握就不会轻易的去尝试，所以我在着手做这个之前花了很多的时间去查，域名空间这些的，而且这些出售这些的服务商也挺多的，我这个人有选择恐惧症。也是怪尴尬的，每次看到一个东西有好多选择的时候，我都去比较，去分析，头痛。。而且我想，域名空间搞好以后，还要自己写页面这些的。关键是还要设计博客风格，页面样式这些的，一想到这些，就感觉是一个不小的工程啊，后来才发现我多虑了。\n\n后来，无意中看到了Hexo的Next主题的一篇博客，风格样式挺不错的，感谢 [Hexo](https://hexo.io/) 和 [Next](http://theme-next.iissnan.com/) 的文档写的如此的棒，以至于每一个人都能根据教程搭建一个自己的博客。这一切是如此的美好。\n\n\n最后送给大家一首歌，晚安。\n<p></p>\n<blockquote class=\"blockquote-center\">\n    <embed src=\"http://music.163.com/style/swf/widget.swf?sid=254359&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed>\n</blockquote>\n\n\n\n","slug":"essay-20160925","published":1,"updated":"2017-01-17T15:19:34.592Z","layout":"post","photos":[],"link":"","_id":"ciysq4ug70003ugi45ohps8ik","content":"<p id=\"div-border-top-green\">这座城市人很多，每天在路上都能看到好多拉着行李箱的人，不管他们是来到这座城市还是离开这座城市，至少他们都曾努力过。<br></p>\n\n<p><br></p>\n<a id=\"more\"></a>\n<p>其实专业做博客的网站还是挺多的，比如说 CSDN 是吧，我之前也是在 CSDN 上面写一点东西，我的 CSDN 博客 <a href=\"http://blog.csdn.net/csdn_yudong\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/csdn_yudong</a> 。但是 CSDN 毕竟是一个技术类的博客网站，如果写一点生活杂谈还是不太好，而且 CSDN 上面挂载的广告，以及页面风格，我不太喜欢，因为我喜欢【精于心，简于形】，这波 <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">NexT</a> 主题的广告是不是很硬。</p>\n<p>在我想做博客之前，一直到我开始着手做这个博客，其实花了好久时间。而在我着手开始做这个博客，到这个博客完成，其实并没有花多久。也说明了一个道理，就是一定要勇于尝试，关键是要动手。我想起了马士兵老师的一句话，一个新鲜的事物，你一定要先去用它，应用驱动学习。——<a href=\"https://neveryu.github.io/weblog/\">我的建站日志</a>有记录网站的建设过程。</p>\n<p>究其原因：第一个，我觉得是自己考虑的太多，没有太大的把握就不会轻易的去尝试，所以我在着手做这个之前花了很多的时间去查，域名空间这些的，而且这些出售这些的服务商也挺多的，我这个人有选择恐惧症。也是怪尴尬的，每次看到一个东西有好多选择的时候，我都去比较，去分析，头痛。。而且我想，域名空间搞好以后，还要自己写页面这些的。关键是还要设计博客风格，页面样式这些的，一想到这些，就感觉是一个不小的工程啊，后来才发现我多虑了。</p>\n<p>后来，无意中看到了Hexo的Next主题的一篇博客，风格样式挺不错的，感谢 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a> 和 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">Next</a> 的文档写的如此的棒，以至于每一个人都能根据教程搭建一个自己的博客。这一切是如此的美好。</p>\n<p>最后送给大家一首歌，晚安。</p>\n<p></p><p></p><p></p>\n<blockquote class=\"blockquote-center\"><br>    <embed src=\"http://music.163.com/style/swf/widget.swf?sid=254359&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\" allownetworking=\"all\" oncontextmenu=\"return false\"><br></blockquote>\n\n\n\n","excerpt":"<p id=\"div-border-top-green\">这座城市人很多，每天在路上都能看到好多拉着行李箱的人，不管他们是来到这座城市还是离开这座城市，至少他们都曾努力过。<br></p>\n\n<p><br/></p>","more":"<p>其实专业做博客的网站还是挺多的，比如说 CSDN 是吧，我之前也是在 CSDN 上面写一点东西，我的 CSDN 博客 <a href=\"http://blog.csdn.net/csdn_yudong\">http://blog.csdn.net/csdn_yudong</a> 。但是 CSDN 毕竟是一个技术类的博客网站，如果写一点生活杂谈还是不太好，而且 CSDN 上面挂载的广告，以及页面风格，我不太喜欢，因为我喜欢【精于心，简于形】，这波 <a href=\"https://github.com/iissnan/hexo-theme-next\">NexT</a> 主题的广告是不是很硬。</p>\n<p>在我想做博客之前，一直到我开始着手做这个博客，其实花了好久时间。而在我着手开始做这个博客，到这个博客完成，其实并没有花多久。也说明了一个道理，就是一定要勇于尝试，关键是要动手。我想起了马士兵老师的一句话，一个新鲜的事物，你一定要先去用它，应用驱动学习。——<a href=\"https://neveryu.github.io/weblog/\">我的建站日志</a>有记录网站的建设过程。</p>\n<p>究其原因：第一个，我觉得是自己考虑的太多，没有太大的把握就不会轻易的去尝试，所以我在着手做这个之前花了很多的时间去查，域名空间这些的，而且这些出售这些的服务商也挺多的，我这个人有选择恐惧症。也是怪尴尬的，每次看到一个东西有好多选择的时候，我都去比较，去分析，头痛。。而且我想，域名空间搞好以后，还要自己写页面这些的。关键是还要设计博客风格，页面样式这些的，一想到这些，就感觉是一个不小的工程啊，后来才发现我多虑了。</p>\n<p>后来，无意中看到了Hexo的Next主题的一篇博客，风格样式挺不错的，感谢 <a href=\"https://hexo.io/\">Hexo</a> 和 <a href=\"http://theme-next.iissnan.com/\">Next</a> 的文档写的如此的棒，以至于每一个人都能根据教程搭建一个自己的博客。这一切是如此的美好。</p>\n<p>最后送给大家一首歌，晚安。</p>\n<p><p></p></p>\n<blockquote class=\"blockquote-center\"><br>    <embed src=\"http://music.163.com/style/swf/widget.swf?sid=254359&type=2&auto=0&width=320&height=66\" width=\"340\" height=\"86\"  allowNetworking=\"all\" oncontextmenu=\"return false\"></embed><br></blockquote>"},{"title":"中国国内 JavaScript 圈的现状如何","date":"2016-11-18T05:25:24.000Z","comments":0,"_content":"\n<p id=\"div-border-top-purple\"><span style=\"color:red;\">探讨核心：</span> 我们不编写代码，我们只是国外优秀框架的搬运工。</p>\n\n![](http://p1.bqimg.com/567571/9802f2ae435f5ff2.jpg)\n\n-------------\n\n<!-- more -->\n\n<p id=\"div-border-left-green\" style=\"position:relative; width:80%;margin-left:10%;\">现状么\n二五八万忙着造轮子步道\n小白忙着加群拜山头\n还有几个默默钻研又不为人知的\n浮躁，自我，没劲\n有天 leader 抽烟吹逼时候说：国内这些前端啊，多数靠的是名声，写点东西造个轮子，参加一下活动吹吹逼，建个群拉个山头搞一帮小弟，等公司挖了当上leader就算升天了\n国内 star 最多的没记错是NW吧，噢，人家是C艹分类下的\n玻璃心洗洗睡吧 <i class=\"fa fa-twitter fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n-------------\n\n<p id=\"div-border-right-yellow\" style=\"position:relative; width:80%;margin-left:10%;\">　　只不过很多开发者停留在外来的和尚会念经阶段。如果很多老外都在用你的技术，国内的名博上写上一篇你的文章表扬一下，国内脑残粉扎堆严重。\n　　放大些来看，不只前端，其他行业的观念也是如此。\n　　另外，国内开源心态还不成熟，拿来主义倾向严重。遇到问题，你不帮 ta 解决问题你做的技术就是无用论的不在少数。使得很多开发人员认为做这样的开源简直就是做雷锋，没什么意义，所以很多牛人独善其身的不少。\n　　认为开源的技术就是无 bug ，产品，是完美，否则你就不要开，这种扯蛋的心态的人也很多。<i class=\"fa fa-github fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></i></p>\n\n-------------\n\n<p id=\"div-border-left-blue\" style=\"position:relative; width:80%;margin-left:10%\">　　有个东西叫KPI的好吗，你成天在公司，不折腾点东西怎么算KPI，怎么分奖金?\n为了自身业务和KPI需求，在大点的公司，是肯定有自己的框架的,虽然往往里面充满了来自jquery啊prototypejs等等类库或者框架的几乎一样的代码，甚至在自身需求上还剪掉了一些通用方法，用开发者的话说，这个太臃肿了，我的简洁，然后慢慢的，功能加上来，文件也越来越大了，最后也都趋于跟其他已经使用广泛的类库或者框架一致...\n　　在量的堆积下，国内的开源东西也凸显了不少好用的，比如fis、eccharts、sea、至于kissy之流咱就忽略吧，毕竟可能是自己的业务需求嘛，虽然文档写的好烂,领导升职了，后续也没人搞了....\n　　另外还有一个问题，国内很多框架什么的，核心就一个人，在工作繁忙的时候，bug也就没有精力去修复,框架能存在多久，是个问题...有时候在群里都有人宣传自己的框架的，说不定一两年后，人都转行了，之前的框架呢？会有人接手？悄无声息死掉的框架，大把的。<i class=\"fa fa-laptop fa-3x\" style=\"position:absolute; top:5px; left:-11%;\"></i></p>\n\n-----------\n\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">确实搬运了不少国外牛人的框架，但是我也要说一句吐槽的话【bug真特么的多，屁股还要自己擦】\n\n水平不够只有搬运，擦屁股才是个技术活。<i class=\"fa fa-weixin fa-3x\" style=\"position:absolute; top:5px; right:-11%;color:#5cb85c;\"></i></p>\n\n----------\n\n<p id=\"div-border-left-purple\" style=\"position:relative; width:80%;margin-left:10%;\">　　国内其实是有不少在做框架开发或者库开发的，包括BAT新浪网易等等，只是这些框架多数主要围绕自身业务做的，在加上文档、封闭性等等原因其它公司不太适合去用。比如当年做的还不错的seajs，从前端的设计思路和实现上都很简洁明了，只是当时它们要支持自己的复杂业务搞了一套繁琐的路径配置逻辑结果就让人比较头疼了。\n　　所以我觉得最重要的原因还是环境问题，没有包容、协作、共赢的生态环境人们的思维就会局限在谋求自身的利益，而不是整体价值的最大化。我倒是觉得做搬运工也没什么丢人的，只能说我们条件还不具备，能给出一些有用的反馈也算是有价值的事情了。<i class=\"fa fa-youtube fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#df3e3e;\"></i></p>\n\n---------\n\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">开源不分国界，私以为在这个时代还纠结于国内外，纠结于自主知识产权，纠结于国人当自强的都是莫名其妙的民族主义在作祟。<i class=\"fa fa-tripadvisor fa-3x\" style=\"position:absolute;top:5px;right:-12%;color:#f0ad4e;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">这不是民族主义，这是圈子问题。你的圈子里没有牛人能做出这些东西，这就是差距。国内圈子要是和湾区的交流跟加拿大人一样方便频繁肯定没人说这话。<i class=\"fa fa-stack-overflow fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n---------\n\n<p id=\"div-border-right-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我想问的是那些自己发明轮子的同行们，Backbone.js、AngularJS、jQuery、RequireJS、Bower、Grunt、Yomen 等等无数的开源框架和库以及整个开源社区组成的前端开发生态圈的各种免费解决方案们，到底无法解决工作当中的哪些实际问题，以至于要不停的重复发明轮子，而且还是方的轮子，难道只是为了秀肌肉？或者在各种场合做 talk？<i class=\"fa fa-html5 fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#df3e3e;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-red\" style=\"position:relative;width:80%;margin-left:10%;\">国内某圈子都是国外技术的搬运工不可怕，可怕的是几个高票答案里那股反智主义倾向。<i class=\"fa fa-weibo fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#f90;\"></i></p>\n\n--------\n\n<p id=\"div-border-right-purple\" style=\"position:relative;width:80%;margin-left:10%;\">有优秀的轮子为什么不拿来用？\n实际上这并不只是国内JS圈的情况，甚至不只是JS圈的情况，其实世界上大多数程序员都是优秀的搬运工啊XD。<i class=\"fa fa-qq fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#2780e3;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-green\" style=\"position:relative;width:80%;margin-left:10%;\">谢邀。我工作中并不用js，所以对于js圈的话并不是很熟悉。题主说国内只是优秀库的搬运工，其实对于这句话我觉得应该客观对待，确实很多前端都是在使用国外的优秀库，比如boostrap等，但是会用与能用是两个不同的概念，会用意味着肯定是有pr的，会用的人水平也应该是肯定的。而且国内也有非常多的优秀js库，比如老赵的wind.js，淘宝的kissy等，再看诸如淘宝，腾讯，360等前端团队牛人泛多，他们是绝对有能力写出题主所定义的优秀库的，有能力会用而且会改造现有的优秀库其实力也不是一般的。所以对于是否是国外优秀库的搬运工，这里应该不存在绝对的定论，理性看待这个问题，至少鄙人非常乐观。<i class=\"fa fa-android fa-3x\" style=\"position:absolute; top:5px; left:-11%; color:#5cb85c;\"></i></p>\n\n----------\n\n<p id=\"div-border-right-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">　　其实我刚入行的时候，真的很认真的去听所有国内的 talk，想听到他们为什么做这样的库、做那样的框架，而不是使用开源的解决方案，目前为止，没听到有说服力的理由。\n　　很多答案都提到了国内的几个优秀开源库，当然前端圈子里面优秀的开源库很多，但目之所及，更多的是照猫画虎反类犬，至于哪些经典案例，我还是怕得罪同行的，就不说了。\n　　我真的希望能和同行们一起做点别人没做过的库和框架，解决一些现在没人解决的问题，改善一下这种浮躁的风气。\n\n所以这个评价算是很中肯了，至少我会选择更务实的同事一起工作。<i class=\"fa fa-apple fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#555;\"></i></p>\n\n----------\n\n<p id=\"div-border-left-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我匿名是怕得罪同行，毕竟还要混饭吃。但是替他们说话的人还匿名恐怕是中枪了吧？\n　　Gulp 和 Grunt 用不同的方式解决同一个问题，并且各有千秋，但请别告诉我你们发明的轮子比人家的好用。没有人会反对创新和自主创造，反对的是用同一个姿势吃人家剩下的东西。\n　　就算是同样的东西，你能说出 Bootstrap 和 GWSK 哪个更好吗，恐怕是同样好吧？但请别说 jQuery 和 XX 板，RequireJS 和 XXXJS 一样好用。你当然也可以反驳说如果不做永远都无法超越，那么首先请你做的至少和人家一样好了以后再到处去布道去秀，另外我始终不觉得超越是什么伟大到值得拿出来说的目的。作为一个工程师，我只想做出真正有用、用户喜欢的产品，对于我所用的框架到底是中国人开发的还是外国人开发的，对不起我不 care，如果你说这叫反智我只能呵呵了。<i class=\"fa fa-chrome fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#f0ad4e;\"></i></p>\n\n---------\n\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">　　我对这么多答案中表现出来的对于浪费公司资源去做完全无意义的事情然后还到处去显摆并作为 promotion 资本这件事情表现出来的漠然感到震惊。\n　　这个世界上从来都不缺想让世界变得更好的人，特别是工程师群体，但可惜的是出于某些邪恶目的而重复发明轮子的人也不少。我不否定国内有优秀的轮子，并且敬佩能做出好的开源项目的人，但我敬佩你不会是因为你有个「中国工程师」的定语。\n　　要强调的的是国内前端圈子里面非常流行的「为了做而做，做的是完全一样的东西还没人家好，然后还到处去显摆」这种行为真的是令人恶心。<i class=\"fa fa-yelp fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#2780e3;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-purple\" style=\"position:relative;width:80%;margin-left:10%;\">排名第一的答案的外链中有一句话：“我以前就一直说：我们离最先进的技术的差距只有半年。”\n　　其实这已经很说明问题了，离最先进的技术有差距（不管是半年还是半个月），这说明国内做的东西不是原创的，而是在重复造轮子（有些有微创新，当然我相信也有原创的，但应该非常少）\n　　比如 ueditor，国外都有那么强大的编辑器了，如果照着它都不能造一个轮子出来，那只能怀疑造轮子的人水平有问题。我记得 ueditor 团队还制作了个视频宣讲 ueditor，其中说到xxx还用了很nb的算法（二分查找），不知道的人还真以为是自己想出来的，回来一看 fckeditor，代码都几乎一模一样（当然 ueditor 本身是很不错的，比较符合国情）。\n　　再说 SeaJS，CMD 是神马啊，它真的很C（ommon）吗？SeaJS 模块难道不是异步模块（AMD）吗？命名上就把人搞晕了。怎么解释还需要修改 jQuery 源代码的问题？jQuery 会来兼容 SeaJS 吗？你们知道有多少人兴致勃勃地用了 SeaJS 后最后又切换到 requierJS 吗？\n　　再说下，国内的技术人员不但不团结，还互相讥讽，我相信这一点玉伯深有体会。大家可以去看下 SeaJS 的源代码贡献者，除了玉伯你们都还认识谁？SeaJS 团队发布了 SPM 工具，遭受了多少的嘲笑啊！虽然 SPM 最为人诟病。\n　　整天张口闭口说开源的那些人，怎么都觉得 SeaJS 已经很完美了？\n　　不是不用国内的东西，而是用过后觉得很失望，要文档没文档，说改就改不够稳定。并且据我所知，很多项目的核心开发就一个人，我能相信这东西靠谱吗？我可要为我整个公司负责啊，解决业务需求是我的首要目标，出了 bug 我可担当不起啊。\n　　重复造轮子没问题，但你造个方的轮子或者和不符合国际标准的轮子还到处得瑟让你的同事或者业界朋友来用，你就是来捣乱的！\n　　语气重了点，希望大家见谅！<i class=\"fa fa-opencart fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#df3e3e;\"></i></p>\n\n----------\n\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">中小公司缺乏强力统一的方向和规范，很多都只是搬运工，没有深入。大公司如bat之类的会有自己的体系，也是众多工程师的学习楷模。<i class=\"fa fa-css3 fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></p>\n\n\n\n\n\n[原文](https://www.zhihu.com/question/24317445)","source":"_posts/china-javascript-environment.md","raw":"---\ntitle: 中国国内 JavaScript 圈的现状如何\ndate: 2016-11-18 13:25:24\ncategories: 综合\ntags: [javascript]\ncomments: false\n---\n\n<p id=\"div-border-top-purple\"><span style=\"color:red;\">探讨核心：</span> 我们不编写代码，我们只是国外优秀框架的搬运工。</p>\n\n![](http://p1.bqimg.com/567571/9802f2ae435f5ff2.jpg)\n\n-------------\n\n<!-- more -->\n\n<p id=\"div-border-left-green\" style=\"position:relative; width:80%;margin-left:10%;\">现状么\n二五八万忙着造轮子步道\n小白忙着加群拜山头\n还有几个默默钻研又不为人知的\n浮躁，自我，没劲\n有天 leader 抽烟吹逼时候说：国内这些前端啊，多数靠的是名声，写点东西造个轮子，参加一下活动吹吹逼，建个群拉个山头搞一帮小弟，等公司挖了当上leader就算升天了\n国内 star 最多的没记错是NW吧，噢，人家是C艹分类下的\n玻璃心洗洗睡吧 <i class=\"fa fa-twitter fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n-------------\n\n<p id=\"div-border-right-yellow\" style=\"position:relative; width:80%;margin-left:10%;\">　　只不过很多开发者停留在外来的和尚会念经阶段。如果很多老外都在用你的技术，国内的名博上写上一篇你的文章表扬一下，国内脑残粉扎堆严重。\n　　放大些来看，不只前端，其他行业的观念也是如此。\n　　另外，国内开源心态还不成熟，拿来主义倾向严重。遇到问题，你不帮 ta 解决问题你做的技术就是无用论的不在少数。使得很多开发人员认为做这样的开源简直就是做雷锋，没什么意义，所以很多牛人独善其身的不少。\n　　认为开源的技术就是无 bug ，产品，是完美，否则你就不要开，这种扯蛋的心态的人也很多。<i class=\"fa fa-github fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></i></p>\n\n-------------\n\n<p id=\"div-border-left-blue\" style=\"position:relative; width:80%;margin-left:10%\">　　有个东西叫KPI的好吗，你成天在公司，不折腾点东西怎么算KPI，怎么分奖金?\n为了自身业务和KPI需求，在大点的公司，是肯定有自己的框架的,虽然往往里面充满了来自jquery啊prototypejs等等类库或者框架的几乎一样的代码，甚至在自身需求上还剪掉了一些通用方法，用开发者的话说，这个太臃肿了，我的简洁，然后慢慢的，功能加上来，文件也越来越大了，最后也都趋于跟其他已经使用广泛的类库或者框架一致...\n　　在量的堆积下，国内的开源东西也凸显了不少好用的，比如fis、eccharts、sea、至于kissy之流咱就忽略吧，毕竟可能是自己的业务需求嘛，虽然文档写的好烂,领导升职了，后续也没人搞了....\n　　另外还有一个问题，国内很多框架什么的，核心就一个人，在工作繁忙的时候，bug也就没有精力去修复,框架能存在多久，是个问题...有时候在群里都有人宣传自己的框架的，说不定一两年后，人都转行了，之前的框架呢？会有人接手？悄无声息死掉的框架，大把的。<i class=\"fa fa-laptop fa-3x\" style=\"position:absolute; top:5px; left:-11%;\"></i></p>\n\n-----------\n\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">确实搬运了不少国外牛人的框架，但是我也要说一句吐槽的话【bug真特么的多，屁股还要自己擦】\n\n水平不够只有搬运，擦屁股才是个技术活。<i class=\"fa fa-weixin fa-3x\" style=\"position:absolute; top:5px; right:-11%;color:#5cb85c;\"></i></p>\n\n----------\n\n<p id=\"div-border-left-purple\" style=\"position:relative; width:80%;margin-left:10%;\">　　国内其实是有不少在做框架开发或者库开发的，包括BAT新浪网易等等，只是这些框架多数主要围绕自身业务做的，在加上文档、封闭性等等原因其它公司不太适合去用。比如当年做的还不错的seajs，从前端的设计思路和实现上都很简洁明了，只是当时它们要支持自己的复杂业务搞了一套繁琐的路径配置逻辑结果就让人比较头疼了。\n　　所以我觉得最重要的原因还是环境问题，没有包容、协作、共赢的生态环境人们的思维就会局限在谋求自身的利益，而不是整体价值的最大化。我倒是觉得做搬运工也没什么丢人的，只能说我们条件还不具备，能给出一些有用的反馈也算是有价值的事情了。<i class=\"fa fa-youtube fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#df3e3e;\"></i></p>\n\n---------\n\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">开源不分国界，私以为在这个时代还纠结于国内外，纠结于自主知识产权，纠结于国人当自强的都是莫名其妙的民族主义在作祟。<i class=\"fa fa-tripadvisor fa-3x\" style=\"position:absolute;top:5px;right:-12%;color:#f0ad4e;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">这不是民族主义，这是圈子问题。你的圈子里没有牛人能做出这些东西，这就是差距。国内圈子要是和湾区的交流跟加拿大人一样方便频繁肯定没人说这话。<i class=\"fa fa-stack-overflow fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n---------\n\n<p id=\"div-border-right-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我想问的是那些自己发明轮子的同行们，Backbone.js、AngularJS、jQuery、RequireJS、Bower、Grunt、Yomen 等等无数的开源框架和库以及整个开源社区组成的前端开发生态圈的各种免费解决方案们，到底无法解决工作当中的哪些实际问题，以至于要不停的重复发明轮子，而且还是方的轮子，难道只是为了秀肌肉？或者在各种场合做 talk？<i class=\"fa fa-html5 fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#df3e3e;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-red\" style=\"position:relative;width:80%;margin-left:10%;\">国内某圈子都是国外技术的搬运工不可怕，可怕的是几个高票答案里那股反智主义倾向。<i class=\"fa fa-weibo fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#f90;\"></i></p>\n\n--------\n\n<p id=\"div-border-right-purple\" style=\"position:relative;width:80%;margin-left:10%;\">有优秀的轮子为什么不拿来用？\n实际上这并不只是国内JS圈的情况，甚至不只是JS圈的情况，其实世界上大多数程序员都是优秀的搬运工啊XD。<i class=\"fa fa-qq fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#2780e3;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-green\" style=\"position:relative;width:80%;margin-left:10%;\">谢邀。我工作中并不用js，所以对于js圈的话并不是很熟悉。题主说国内只是优秀库的搬运工，其实对于这句话我觉得应该客观对待，确实很多前端都是在使用国外的优秀库，比如boostrap等，但是会用与能用是两个不同的概念，会用意味着肯定是有pr的，会用的人水平也应该是肯定的。而且国内也有非常多的优秀js库，比如老赵的wind.js，淘宝的kissy等，再看诸如淘宝，腾讯，360等前端团队牛人泛多，他们是绝对有能力写出题主所定义的优秀库的，有能力会用而且会改造现有的优秀库其实力也不是一般的。所以对于是否是国外优秀库的搬运工，这里应该不存在绝对的定论，理性看待这个问题，至少鄙人非常乐观。<i class=\"fa fa-android fa-3x\" style=\"position:absolute; top:5px; left:-11%; color:#5cb85c;\"></i></p>\n\n----------\n\n<p id=\"div-border-right-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">　　其实我刚入行的时候，真的很认真的去听所有国内的 talk，想听到他们为什么做这样的库、做那样的框架，而不是使用开源的解决方案，目前为止，没听到有说服力的理由。\n　　很多答案都提到了国内的几个优秀开源库，当然前端圈子里面优秀的开源库很多，但目之所及，更多的是照猫画虎反类犬，至于哪些经典案例，我还是怕得罪同行的，就不说了。\n　　我真的希望能和同行们一起做点别人没做过的库和框架，解决一些现在没人解决的问题，改善一下这种浮躁的风气。\n\n所以这个评价算是很中肯了，至少我会选择更务实的同事一起工作。<i class=\"fa fa-apple fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#555;\"></i></p>\n\n----------\n\n<p id=\"div-border-left-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我匿名是怕得罪同行，毕竟还要混饭吃。但是替他们说话的人还匿名恐怕是中枪了吧？\n　　Gulp 和 Grunt 用不同的方式解决同一个问题，并且各有千秋，但请别告诉我你们发明的轮子比人家的好用。没有人会反对创新和自主创造，反对的是用同一个姿势吃人家剩下的东西。\n　　就算是同样的东西，你能说出 Bootstrap 和 GWSK 哪个更好吗，恐怕是同样好吧？但请别说 jQuery 和 XX 板，RequireJS 和 XXXJS 一样好用。你当然也可以反驳说如果不做永远都无法超越，那么首先请你做的至少和人家一样好了以后再到处去布道去秀，另外我始终不觉得超越是什么伟大到值得拿出来说的目的。作为一个工程师，我只想做出真正有用、用户喜欢的产品，对于我所用的框架到底是中国人开发的还是外国人开发的，对不起我不 care，如果你说这叫反智我只能呵呵了。<i class=\"fa fa-chrome fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#f0ad4e;\"></i></p>\n\n---------\n\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">　　我对这么多答案中表现出来的对于浪费公司资源去做完全无意义的事情然后还到处去显摆并作为 promotion 资本这件事情表现出来的漠然感到震惊。\n　　这个世界上从来都不缺想让世界变得更好的人，特别是工程师群体，但可惜的是出于某些邪恶目的而重复发明轮子的人也不少。我不否定国内有优秀的轮子，并且敬佩能做出好的开源项目的人，但我敬佩你不会是因为你有个「中国工程师」的定语。\n　　要强调的的是国内前端圈子里面非常流行的「为了做而做，做的是完全一样的东西还没人家好，然后还到处去显摆」这种行为真的是令人恶心。<i class=\"fa fa-yelp fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#2780e3;\"></i></p>\n\n---------\n\n<p id=\"div-border-left-purple\" style=\"position:relative;width:80%;margin-left:10%;\">排名第一的答案的外链中有一句话：“我以前就一直说：我们离最先进的技术的差距只有半年。”\n　　其实这已经很说明问题了，离最先进的技术有差距（不管是半年还是半个月），这说明国内做的东西不是原创的，而是在重复造轮子（有些有微创新，当然我相信也有原创的，但应该非常少）\n　　比如 ueditor，国外都有那么强大的编辑器了，如果照着它都不能造一个轮子出来，那只能怀疑造轮子的人水平有问题。我记得 ueditor 团队还制作了个视频宣讲 ueditor，其中说到xxx还用了很nb的算法（二分查找），不知道的人还真以为是自己想出来的，回来一看 fckeditor，代码都几乎一模一样（当然 ueditor 本身是很不错的，比较符合国情）。\n　　再说 SeaJS，CMD 是神马啊，它真的很C（ommon）吗？SeaJS 模块难道不是异步模块（AMD）吗？命名上就把人搞晕了。怎么解释还需要修改 jQuery 源代码的问题？jQuery 会来兼容 SeaJS 吗？你们知道有多少人兴致勃勃地用了 SeaJS 后最后又切换到 requierJS 吗？\n　　再说下，国内的技术人员不但不团结，还互相讥讽，我相信这一点玉伯深有体会。大家可以去看下 SeaJS 的源代码贡献者，除了玉伯你们都还认识谁？SeaJS 团队发布了 SPM 工具，遭受了多少的嘲笑啊！虽然 SPM 最为人诟病。\n　　整天张口闭口说开源的那些人，怎么都觉得 SeaJS 已经很完美了？\n　　不是不用国内的东西，而是用过后觉得很失望，要文档没文档，说改就改不够稳定。并且据我所知，很多项目的核心开发就一个人，我能相信这东西靠谱吗？我可要为我整个公司负责啊，解决业务需求是我的首要目标，出了 bug 我可担当不起啊。\n　　重复造轮子没问题，但你造个方的轮子或者和不符合国际标准的轮子还到处得瑟让你的同事或者业界朋友来用，你就是来捣乱的！\n　　语气重了点，希望大家见谅！<i class=\"fa fa-opencart fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#df3e3e;\"></i></p>\n\n----------\n\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">中小公司缺乏强力统一的方向和规范，很多都只是搬运工，没有深入。大公司如bat之类的会有自己的体系，也是众多工程师的学习楷模。<i class=\"fa fa-css3 fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></p>\n\n\n\n\n\n[原文](https://www.zhihu.com/question/24317445)","slug":"china-javascript-environment","published":1,"updated":"2017-01-17T15:19:40.352Z","layout":"post","photos":[],"link":"","_id":"ciysq4uhk0007ugi4l3hf0tv6","content":"<p id=\"div-border-top-purple\"><span style=\"color:red;\">探讨核心：</span> 我们不编写代码，我们只是国外优秀框架的搬运工。</p>\n\n<p><img src=\"http://p1.bqimg.com/567571/9802f2ae435f5ff2.jpg\" alt=\"\"></p>\n<hr>\n<a id=\"more\"></a>\n<p id=\"div-border-left-green\" style=\"position:relative; width:80%;margin-left:10%;\">现状么<br>二五八万忙着造轮子步道<br>小白忙着加群拜山头<br>还有几个默默钻研又不为人知的<br>浮躁，自我，没劲<br>有天 leader 抽烟吹逼时候说：国内这些前端啊，多数靠的是名声，写点东西造个轮子，参加一下活动吹吹逼，建个群拉个山头搞一帮小弟，等公司挖了当上leader就算升天了<br>国内 star 最多的没记错是NW吧，噢，人家是C艹分类下的<br>玻璃心洗洗睡吧 <i class=\"fa fa-twitter fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-yellow\" style=\"position:relative; width:80%;margin-left:10%;\">　　只不过很多开发者停留在外来的和尚会念经阶段。如果很多老外都在用你的技术，国内的名博上写上一篇你的文章表扬一下，国内脑残粉扎堆严重。<br>　　放大些来看，不只前端，其他行业的观念也是如此。<br>　　另外，国内开源心态还不成熟，拿来主义倾向严重。遇到问题，你不帮 ta 解决问题你做的技术就是无用论的不在少数。使得很多开发人员认为做这样的开源简直就是做雷锋，没什么意义，所以很多牛人独善其身的不少。<br>　　认为开源的技术就是无 bug ，产品，是完美，否则你就不要开，这种扯蛋的心态的人也很多。<i class=\"fa fa-github fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-blue\" style=\"position:relative; width:80%;margin-left:10%\">　　有个东西叫KPI的好吗，你成天在公司，不折腾点东西怎么算KPI，怎么分奖金?<br>为了自身业务和KPI需求，在大点的公司，是肯定有自己的框架的,虽然往往里面充满了来自jquery啊prototypejs等等类库或者框架的几乎一样的代码，甚至在自身需求上还剪掉了一些通用方法，用开发者的话说，这个太臃肿了，我的简洁，然后慢慢的，功能加上来，文件也越来越大了，最后也都趋于跟其他已经使用广泛的类库或者框架一致…<br>　　在量的堆积下，国内的开源东西也凸显了不少好用的，比如fis、eccharts、sea、至于kissy之流咱就忽略吧，毕竟可能是自己的业务需求嘛，虽然文档写的好烂,领导升职了，后续也没人搞了….<br>　　另外还有一个问题，国内很多框架什么的，核心就一个人，在工作繁忙的时候，bug也就没有精力去修复,框架能存在多久，是个问题…有时候在群里都有人宣传自己的框架的，说不定一两年后，人都转行了，之前的框架呢？会有人接手？悄无声息死掉的框架，大把的。<i class=\"fa fa-laptop fa-3x\" style=\"position:absolute; top:5px; left:-11%;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">确实搬运了不少国外牛人的框架，但是我也要说一句吐槽的话【bug真特么的多，屁股还要自己擦】<br><br>水平不够只有搬运，擦屁股才是个技术活。<i class=\"fa fa-weixin fa-3x\" style=\"position:absolute; top:5px; right:-11%;color:#5cb85c;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-purple\" style=\"position:relative; width:80%;margin-left:10%;\">　　国内其实是有不少在做框架开发或者库开发的，包括BAT新浪网易等等，只是这些框架多数主要围绕自身业务做的，在加上文档、封闭性等等原因其它公司不太适合去用。比如当年做的还不错的seajs，从前端的设计思路和实现上都很简洁明了，只是当时它们要支持自己的复杂业务搞了一套繁琐的路径配置逻辑结果就让人比较头疼了。<br>　　所以我觉得最重要的原因还是环境问题，没有包容、协作、共赢的生态环境人们的思维就会局限在谋求自身的利益，而不是整体价值的最大化。我倒是觉得做搬运工也没什么丢人的，只能说我们条件还不具备，能给出一些有用的反馈也算是有价值的事情了。<i class=\"fa fa-youtube fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#df3e3e;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">开源不分国界，私以为在这个时代还纠结于国内外，纠结于自主知识产权，纠结于国人当自强的都是莫名其妙的民族主义在作祟。<i class=\"fa fa-tripadvisor fa-3x\" style=\"position:absolute;top:5px;right:-12%;color:#f0ad4e;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">这不是民族主义，这是圈子问题。你的圈子里没有牛人能做出这些东西，这就是差距。国内圈子要是和湾区的交流跟加拿大人一样方便频繁肯定没人说这话。<i class=\"fa fa-stack-overflow fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我想问的是那些自己发明轮子的同行们，Backbone.js、AngularJS、jQuery、RequireJS、Bower、Grunt、Yomen 等等无数的开源框架和库以及整个开源社区组成的前端开发生态圈的各种免费解决方案们，到底无法解决工作当中的哪些实际问题，以至于要不停的重复发明轮子，而且还是方的轮子，难道只是为了秀肌肉？或者在各种场合做 talk？<i class=\"fa fa-html5 fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#df3e3e;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-red\" style=\"position:relative;width:80%;margin-left:10%;\">国内某圈子都是国外技术的搬运工不可怕，可怕的是几个高票答案里那股反智主义倾向。<i class=\"fa fa-weibo fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#f90;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-purple\" style=\"position:relative;width:80%;margin-left:10%;\">有优秀的轮子为什么不拿来用？<br>实际上这并不只是国内JS圈的情况，甚至不只是JS圈的情况，其实世界上大多数程序员都是优秀的搬运工啊XD。<i class=\"fa fa-qq fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-green\" style=\"position:relative;width:80%;margin-left:10%;\">谢邀。我工作中并不用js，所以对于js圈的话并不是很熟悉。题主说国内只是优秀库的搬运工，其实对于这句话我觉得应该客观对待，确实很多前端都是在使用国外的优秀库，比如boostrap等，但是会用与能用是两个不同的概念，会用意味着肯定是有pr的，会用的人水平也应该是肯定的。而且国内也有非常多的优秀js库，比如老赵的wind.js，淘宝的kissy等，再看诸如淘宝，腾讯，360等前端团队牛人泛多，他们是绝对有能力写出题主所定义的优秀库的，有能力会用而且会改造现有的优秀库其实力也不是一般的。所以对于是否是国外优秀库的搬运工，这里应该不存在绝对的定论，理性看待这个问题，至少鄙人非常乐观。<i class=\"fa fa-android fa-3x\" style=\"position:absolute; top:5px; left:-11%; color:#5cb85c;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">　　其实我刚入行的时候，真的很认真的去听所有国内的 talk，想听到他们为什么做这样的库、做那样的框架，而不是使用开源的解决方案，目前为止，没听到有说服力的理由。<br>　　很多答案都提到了国内的几个优秀开源库，当然前端圈子里面优秀的开源库很多，但目之所及，更多的是照猫画虎反类犬，至于哪些经典案例，我还是怕得罪同行的，就不说了。<br>　　我真的希望能和同行们一起做点别人没做过的库和框架，解决一些现在没人解决的问题，改善一下这种浮躁的风气。<br><br>所以这个评价算是很中肯了，至少我会选择更务实的同事一起工作。<i class=\"fa fa-apple fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#555;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我匿名是怕得罪同行，毕竟还要混饭吃。但是替他们说话的人还匿名恐怕是中枪了吧？<br>　　Gulp 和 Grunt 用不同的方式解决同一个问题，并且各有千秋，但请别告诉我你们发明的轮子比人家的好用。没有人会反对创新和自主创造，反对的是用同一个姿势吃人家剩下的东西。<br>　　就算是同样的东西，你能说出 Bootstrap 和 GWSK 哪个更好吗，恐怕是同样好吧？但请别说 jQuery 和 XX 板，RequireJS 和 XXXJS 一样好用。你当然也可以反驳说如果不做永远都无法超越，那么首先请你做的至少和人家一样好了以后再到处去布道去秀，另外我始终不觉得超越是什么伟大到值得拿出来说的目的。作为一个工程师，我只想做出真正有用、用户喜欢的产品，对于我所用的框架到底是中国人开发的还是外国人开发的，对不起我不 care，如果你说这叫反智我只能呵呵了。<i class=\"fa fa-chrome fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#f0ad4e;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">　　我对这么多答案中表现出来的对于浪费公司资源去做完全无意义的事情然后还到处去显摆并作为 promotion 资本这件事情表现出来的漠然感到震惊。<br>　　这个世界上从来都不缺想让世界变得更好的人，特别是工程师群体，但可惜的是出于某些邪恶目的而重复发明轮子的人也不少。我不否定国内有优秀的轮子，并且敬佩能做出好的开源项目的人，但我敬佩你不会是因为你有个「中国工程师」的定语。<br>　　要强调的的是国内前端圈子里面非常流行的「为了做而做，做的是完全一样的东西还没人家好，然后还到处去显摆」这种行为真的是令人恶心。<i class=\"fa fa-yelp fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-purple\" style=\"position:relative;width:80%;margin-left:10%;\">排名第一的答案的外链中有一句话：“我以前就一直说：我们离最先进的技术的差距只有半年。”<br>　　其实这已经很说明问题了，离最先进的技术有差距（不管是半年还是半个月），这说明国内做的东西不是原创的，而是在重复造轮子（有些有微创新，当然我相信也有原创的，但应该非常少）<br>　　比如 ueditor，国外都有那么强大的编辑器了，如果照着它都不能造一个轮子出来，那只能怀疑造轮子的人水平有问题。我记得 ueditor 团队还制作了个视频宣讲 ueditor，其中说到xxx还用了很nb的算法（二分查找），不知道的人还真以为是自己想出来的，回来一看 fckeditor，代码都几乎一模一样（当然 ueditor 本身是很不错的，比较符合国情）。<br>　　再说 SeaJS，CMD 是神马啊，它真的很C（ommon）吗？SeaJS 模块难道不是异步模块（AMD）吗？命名上就把人搞晕了。怎么解释还需要修改 jQuery 源代码的问题？jQuery 会来兼容 SeaJS 吗？你们知道有多少人兴致勃勃地用了 SeaJS 后最后又切换到 requierJS 吗？<br>　　再说下，国内的技术人员不但不团结，还互相讥讽，我相信这一点玉伯深有体会。大家可以去看下 SeaJS 的源代码贡献者，除了玉伯你们都还认识谁？SeaJS 团队发布了 SPM 工具，遭受了多少的嘲笑啊！虽然 SPM 最为人诟病。<br>　　整天张口闭口说开源的那些人，怎么都觉得 SeaJS 已经很完美了？<br>　　不是不用国内的东西，而是用过后觉得很失望，要文档没文档，说改就改不够稳定。并且据我所知，很多项目的核心开发就一个人，我能相信这东西靠谱吗？我可要为我整个公司负责啊，解决业务需求是我的首要目标，出了 bug 我可担当不起啊。<br>　　重复造轮子没问题，但你造个方的轮子或者和不符合国际标准的轮子还到处得瑟让你的同事或者业界朋友来用，你就是来捣乱的！<br>　　语气重了点，希望大家见谅！<i class=\"fa fa-opencart fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#df3e3e;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">中小公司缺乏强力统一的方向和规范，很多都只是搬运工，没有深入。大公司如bat之类的会有自己的体系，也是众多工程师的学习楷模。<i class=\"fa fa-css3 fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></i></p>\n\n\n\n\n\n<p><a href=\"https://www.zhihu.com/question/24317445\" target=\"_blank\" rel=\"external\">原文</a></p>\n","excerpt":"<p id=\"div-border-top-purple\"><span style=\"color:red;\">探讨核心：</span> 我们不编写代码，我们只是国外优秀框架的搬运工。</p>\n\n<p><img src=\"http://p1.bqimg.com/567571/9802f2ae435f5ff2.jpg\" alt=\"\"></p>\n<hr>","more":"<p id=\"div-border-left-green\" style=\"position:relative; width:80%;margin-left:10%;\">现状么<br>二五八万忙着造轮子步道<br>小白忙着加群拜山头<br>还有几个默默钻研又不为人知的<br>浮躁，自我，没劲<br>有天 leader 抽烟吹逼时候说：国内这些前端啊，多数靠的是名声，写点东西造个轮子，参加一下活动吹吹逼，建个群拉个山头搞一帮小弟，等公司挖了当上leader就算升天了<br>国内 star 最多的没记错是NW吧，噢，人家是C艹分类下的<br>玻璃心洗洗睡吧 <i class=\"fa fa-twitter fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-yellow\" style=\"position:relative; width:80%;margin-left:10%;\">　　只不过很多开发者停留在外来的和尚会念经阶段。如果很多老外都在用你的技术，国内的名博上写上一篇你的文章表扬一下，国内脑残粉扎堆严重。<br>　　放大些来看，不只前端，其他行业的观念也是如此。<br>　　另外，国内开源心态还不成熟，拿来主义倾向严重。遇到问题，你不帮 ta 解决问题你做的技术就是无用论的不在少数。使得很多开发人员认为做这样的开源简直就是做雷锋，没什么意义，所以很多牛人独善其身的不少。<br>　　认为开源的技术就是无 bug ，产品，是完美，否则你就不要开，这种扯蛋的心态的人也很多。<i class=\"fa fa-github fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-blue\" style=\"position:relative; width:80%;margin-left:10%\">　　有个东西叫KPI的好吗，你成天在公司，不折腾点东西怎么算KPI，怎么分奖金?<br>为了自身业务和KPI需求，在大点的公司，是肯定有自己的框架的,虽然往往里面充满了来自jquery啊prototypejs等等类库或者框架的几乎一样的代码，甚至在自身需求上还剪掉了一些通用方法，用开发者的话说，这个太臃肿了，我的简洁，然后慢慢的，功能加上来，文件也越来越大了，最后也都趋于跟其他已经使用广泛的类库或者框架一致…<br>　　在量的堆积下，国内的开源东西也凸显了不少好用的，比如fis、eccharts、sea、至于kissy之流咱就忽略吧，毕竟可能是自己的业务需求嘛，虽然文档写的好烂,领导升职了，后续也没人搞了….<br>　　另外还有一个问题，国内很多框架什么的，核心就一个人，在工作繁忙的时候，bug也就没有精力去修复,框架能存在多久，是个问题…有时候在群里都有人宣传自己的框架的，说不定一两年后，人都转行了，之前的框架呢？会有人接手？悄无声息死掉的框架，大把的。<i class=\"fa fa-laptop fa-3x\" style=\"position:absolute; top:5px; left:-11%;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">确实搬运了不少国外牛人的框架，但是我也要说一句吐槽的话【bug真特么的多，屁股还要自己擦】<br><br>水平不够只有搬运，擦屁股才是个技术活。<i class=\"fa fa-weixin fa-3x\" style=\"position:absolute; top:5px; right:-11%;color:#5cb85c;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-purple\" style=\"position:relative; width:80%;margin-left:10%;\">　　国内其实是有不少在做框架开发或者库开发的，包括BAT新浪网易等等，只是这些框架多数主要围绕自身业务做的，在加上文档、封闭性等等原因其它公司不太适合去用。比如当年做的还不错的seajs，从前端的设计思路和实现上都很简洁明了，只是当时它们要支持自己的复杂业务搞了一套繁琐的路径配置逻辑结果就让人比较头疼了。<br>　　所以我觉得最重要的原因还是环境问题，没有包容、协作、共赢的生态环境人们的思维就会局限在谋求自身的利益，而不是整体价值的最大化。我倒是觉得做搬运工也没什么丢人的，只能说我们条件还不具备，能给出一些有用的反馈也算是有价值的事情了。<i class=\"fa fa-youtube fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#df3e3e;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">开源不分国界，私以为在这个时代还纠结于国内外，纠结于自主知识产权，纠结于国人当自强的都是莫名其妙的民族主义在作祟。<i class=\"fa fa-tripadvisor fa-3x\" style=\"position:absolute;top:5px;right:-12%;color:#f0ad4e;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">这不是民族主义，这是圈子问题。你的圈子里没有牛人能做出这些东西，这就是差距。国内圈子要是和湾区的交流跟加拿大人一样方便频繁肯定没人说这话。<i class=\"fa fa-stack-overflow fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我想问的是那些自己发明轮子的同行们，Backbone.js、AngularJS、jQuery、RequireJS、Bower、Grunt、Yomen 等等无数的开源框架和库以及整个开源社区组成的前端开发生态圈的各种免费解决方案们，到底无法解决工作当中的哪些实际问题，以至于要不停的重复发明轮子，而且还是方的轮子，难道只是为了秀肌肉？或者在各种场合做 talk？<i class=\"fa fa-html5 fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#df3e3e;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-red\" style=\"position:relative;width:80%;margin-left:10%;\">国内某圈子都是国外技术的搬运工不可怕，可怕的是几个高票答案里那股反智主义倾向。<i class=\"fa fa-weibo fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#f90;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-purple\" style=\"position:relative;width:80%;margin-left:10%;\">有优秀的轮子为什么不拿来用？<br>实际上这并不只是国内JS圈的情况，甚至不只是JS圈的情况，其实世界上大多数程序员都是优秀的搬运工啊XD。<i class=\"fa fa-qq fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-green\" style=\"position:relative;width:80%;margin-left:10%;\">谢邀。我工作中并不用js，所以对于js圈的话并不是很熟悉。题主说国内只是优秀库的搬运工，其实对于这句话我觉得应该客观对待，确实很多前端都是在使用国外的优秀库，比如boostrap等，但是会用与能用是两个不同的概念，会用意味着肯定是有pr的，会用的人水平也应该是肯定的。而且国内也有非常多的优秀js库，比如老赵的wind.js，淘宝的kissy等，再看诸如淘宝，腾讯，360等前端团队牛人泛多，他们是绝对有能力写出题主所定义的优秀库的，有能力会用而且会改造现有的优秀库其实力也不是一般的。所以对于是否是国外优秀库的搬运工，这里应该不存在绝对的定论，理性看待这个问题，至少鄙人非常乐观。<i class=\"fa fa-android fa-3x\" style=\"position:absolute; top:5px; left:-11%; color:#5cb85c;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-yellow\" style=\"position:relative;width:80%;margin-left:10%;\">　　其实我刚入行的时候，真的很认真的去听所有国内的 talk，想听到他们为什么做这样的库、做那样的框架，而不是使用开源的解决方案，目前为止，没听到有说服力的理由。<br>　　很多答案都提到了国内的几个优秀开源库，当然前端圈子里面优秀的开源库很多，但目之所及，更多的是照猫画虎反类犬，至于哪些经典案例，我还是怕得罪同行的，就不说了。<br>　　我真的希望能和同行们一起做点别人没做过的库和框架，解决一些现在没人解决的问题，改善一下这种浮躁的风气。<br><br>所以这个评价算是很中肯了，至少我会选择更务实的同事一起工作。<i class=\"fa fa-apple fa-3x\" style=\"position:absolute; top:5px; right:-10%; color:#555;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-blue\" style=\"position:relative;width:80%;margin-left:10%;\">　　我匿名是怕得罪同行，毕竟还要混饭吃。但是替他们说话的人还匿名恐怕是中枪了吧？<br>　　Gulp 和 Grunt 用不同的方式解决同一个问题，并且各有千秋，但请别告诉我你们发明的轮子比人家的好用。没有人会反对创新和自主创造，反对的是用同一个姿势吃人家剩下的东西。<br>　　就算是同样的东西，你能说出 Bootstrap 和 GWSK 哪个更好吗，恐怕是同样好吧？但请别说 jQuery 和 XX 板，RequireJS 和 XXXJS 一样好用。你当然也可以反驳说如果不做永远都无法超越，那么首先请你做的至少和人家一样好了以后再到处去布道去秀，另外我始终不觉得超越是什么伟大到值得拿出来说的目的。作为一个工程师，我只想做出真正有用、用户喜欢的产品，对于我所用的框架到底是中国人开发的还是外国人开发的，对不起我不 care，如果你说这叫反智我只能呵呵了。<i class=\"fa fa-chrome fa-3x\" style=\"position:absolute; top:5px; left:-10%;color:#f0ad4e;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-red\" style=\"position:relative;width:80%;margin-left:10%;\">　　我对这么多答案中表现出来的对于浪费公司资源去做完全无意义的事情然后还到处去显摆并作为 promotion 资本这件事情表现出来的漠然感到震惊。<br>　　这个世界上从来都不缺想让世界变得更好的人，特别是工程师群体，但可惜的是出于某些邪恶目的而重复发明轮子的人也不少。我不否定国内有优秀的轮子，并且敬佩能做出好的开源项目的人，但我敬佩你不会是因为你有个「中国工程师」的定语。<br>　　要强调的的是国内前端圈子里面非常流行的「为了做而做，做的是完全一样的东西还没人家好，然后还到处去显摆」这种行为真的是令人恶心。<i class=\"fa fa-yelp fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#2780e3;\"></i></p>\n\n<hr>\n<p id=\"div-border-left-purple\" style=\"position:relative;width:80%;margin-left:10%;\">排名第一的答案的外链中有一句话：“我以前就一直说：我们离最先进的技术的差距只有半年。”<br>　　其实这已经很说明问题了，离最先进的技术有差距（不管是半年还是半个月），这说明国内做的东西不是原创的，而是在重复造轮子（有些有微创新，当然我相信也有原创的，但应该非常少）<br>　　比如 ueditor，国外都有那么强大的编辑器了，如果照着它都不能造一个轮子出来，那只能怀疑造轮子的人水平有问题。我记得 ueditor 团队还制作了个视频宣讲 ueditor，其中说到xxx还用了很nb的算法（二分查找），不知道的人还真以为是自己想出来的，回来一看 fckeditor，代码都几乎一模一样（当然 ueditor 本身是很不错的，比较符合国情）。<br>　　再说 SeaJS，CMD 是神马啊，它真的很C（ommon）吗？SeaJS 模块难道不是异步模块（AMD）吗？命名上就把人搞晕了。怎么解释还需要修改 jQuery 源代码的问题？jQuery 会来兼容 SeaJS 吗？你们知道有多少人兴致勃勃地用了 SeaJS 后最后又切换到 requierJS 吗？<br>　　再说下，国内的技术人员不但不团结，还互相讥讽，我相信这一点玉伯深有体会。大家可以去看下 SeaJS 的源代码贡献者，除了玉伯你们都还认识谁？SeaJS 团队发布了 SPM 工具，遭受了多少的嘲笑啊！虽然 SPM 最为人诟病。<br>　　整天张口闭口说开源的那些人，怎么都觉得 SeaJS 已经很完美了？<br>　　不是不用国内的东西，而是用过后觉得很失望，要文档没文档，说改就改不够稳定。并且据我所知，很多项目的核心开发就一个人，我能相信这东西靠谱吗？我可要为我整个公司负责啊，解决业务需求是我的首要目标，出了 bug 我可担当不起啊。<br>　　重复造轮子没问题，但你造个方的轮子或者和不符合国际标准的轮子还到处得瑟让你的同事或者业界朋友来用，你就是来捣乱的！<br>　　语气重了点，希望大家见谅！<i class=\"fa fa-opencart fa-3x\" style=\"position:absolute; top:5px; left:-11%;color:#df3e3e;\"></i></p>\n\n<hr>\n<p id=\"div-border-right-green\" style=\"position:relative;width:80%;margin-left:10%;\">中小公司缺乏强力统一的方向和规范，很多都只是搬运工，没有深入。大公司如bat之类的会有自己的体系，也是众多工程师的学习楷模。<i class=\"fa fa-css3 fa-3x\" style=\"position:absolute; top:5px; right:-10%;color:#9954bb;\"></p>\n\n\n\n\n\n<p><a href=\"https://www.zhihu.com/question/24317445\">原文</a></p>"},{"title":"Hexo-NexT搭建个人博客（四）","date":"2016-12-15T15:25:24.000Z","comments":0,"_content":"<p id=\"div-border-left-blue\">提示：本篇文章将介绍在使用 `heox` 做博客框架中的一些 `bug` 处理情况。</p>\n\n按照之前的教程介绍应该是会比较顺利的搭建好你的博客，但是难免会遇到一些意外，这个时候就要学会解决问题了。\n解决问题的原则是：查看 `bug` 信息，从上到下依次解决 `bug`。\n\n下面来看几个例子：\n\n<!-- more -->\n首先这个是在 `hexo clean` 时报的错：\n![](http://i1.piimg.com/567571/08a05e89a756ee75.png)\n提示插件 `hexo-deployer-got` 加载失败，想了一下，应该是上次我在移动博客目录的时候，这个模块中有一些文件名比较长的文件，系统会提示移动不过来，导致这个模块异常，很简单，文件夹中删除这个模块，重新安装即可。（或者使用 `npm` 来卸载这个模块，然后重新安装）如下：\n\n![](http://i1.piimg.com/567571/a26efa972092fb9e.png)\n\nOK ， 现在好了，`hexo clean` 没有报错了。\n\n![](http://i1.piimg.com/567571/24a28fcb40d1c95f.png)\n\n下面，我是在执行 `hexo g` 的操作，同样也出现了错误：\n\n![](http://i1.piimg.com/567571/40a2d64a4aba2a04.png)\n\n按照图中我标注的步骤，来看一下错误信息：\n如 1 所示：我们首先会发现缺少模块 `isarray` ，但是我们查看 `package.json` 文件，我们的项目根本就没有引入 `isarray` 这个模块，我猜测这个 `isarray` 模块应该是某个模块的子模块 。\n\n如 2 所示：我们顺着 `at` 一路往下找。\n\n如 3 所示：发现这个 `isarray` `at` `hexo-generator-sitemap` ，所以我们删除这个 `hexo-generator-sitemap` 模块，然后重新安装这个模块。如下：\n\n![](http://i1.piimg.com/567571/6a740eb49f5ad0c2.png)\n\nOK ， 现在好了，`hexo g` 没有报错了。\n\n![](http://i1.piimg.com/567571/91abd56ac0617023.png)\n\n那么，就以这两个例子来作为本次的示范吧，其实，`Hexo` 中的一些问题还是比较好解决的，因为它都是依赖其他模块的，定位到出问题的模块，卸载重装即可。\n\n<p id=\"div-border-top-red\">总结：遇到问题 `bug`，一定要仔细查阅错误提示信息，遵守从上往下解决的方案。</p>\n","source":"_posts/hexo-next-four.md","raw":"---\ntitle: Hexo-NexT搭建个人博客（四）\ndate: 2016-12-15 23:25:24\ncategories: 综合\ntags: [Hexo,Next]\ncomments: false\n---\n<p id=\"div-border-left-blue\">提示：本篇文章将介绍在使用 `heox` 做博客框架中的一些 `bug` 处理情况。</p>\n\n按照之前的教程介绍应该是会比较顺利的搭建好你的博客，但是难免会遇到一些意外，这个时候就要学会解决问题了。\n解决问题的原则是：查看 `bug` 信息，从上到下依次解决 `bug`。\n\n下面来看几个例子：\n\n<!-- more -->\n首先这个是在 `hexo clean` 时报的错：\n![](http://i1.piimg.com/567571/08a05e89a756ee75.png)\n提示插件 `hexo-deployer-got` 加载失败，想了一下，应该是上次我在移动博客目录的时候，这个模块中有一些文件名比较长的文件，系统会提示移动不过来，导致这个模块异常，很简单，文件夹中删除这个模块，重新安装即可。（或者使用 `npm` 来卸载这个模块，然后重新安装）如下：\n\n![](http://i1.piimg.com/567571/a26efa972092fb9e.png)\n\nOK ， 现在好了，`hexo clean` 没有报错了。\n\n![](http://i1.piimg.com/567571/24a28fcb40d1c95f.png)\n\n下面，我是在执行 `hexo g` 的操作，同样也出现了错误：\n\n![](http://i1.piimg.com/567571/40a2d64a4aba2a04.png)\n\n按照图中我标注的步骤，来看一下错误信息：\n如 1 所示：我们首先会发现缺少模块 `isarray` ，但是我们查看 `package.json` 文件，我们的项目根本就没有引入 `isarray` 这个模块，我猜测这个 `isarray` 模块应该是某个模块的子模块 。\n\n如 2 所示：我们顺着 `at` 一路往下找。\n\n如 3 所示：发现这个 `isarray` `at` `hexo-generator-sitemap` ，所以我们删除这个 `hexo-generator-sitemap` 模块，然后重新安装这个模块。如下：\n\n![](http://i1.piimg.com/567571/6a740eb49f5ad0c2.png)\n\nOK ， 现在好了，`hexo g` 没有报错了。\n\n![](http://i1.piimg.com/567571/91abd56ac0617023.png)\n\n那么，就以这两个例子来作为本次的示范吧，其实，`Hexo` 中的一些问题还是比较好解决的，因为它都是依赖其他模块的，定位到出问题的模块，卸载重装即可。\n\n<p id=\"div-border-top-red\">总结：遇到问题 `bug`，一定要仔细查阅错误提示信息，遵守从上往下解决的方案。</p>\n","slug":"hexo-next-four","published":1,"updated":"2017-01-17T15:19:41.818Z","layout":"post","photos":[],"link":"","_id":"ciysq4uih0009ugi41h9u20c5","content":"<p id=\"div-border-left-blue\">提示：本篇文章将介绍在使用 <code>heox</code> 做博客框架中的一些 <code>bug</code> 处理情况。</p>\n\n<p>按照之前的教程介绍应该是会比较顺利的搭建好你的博客，但是难免会遇到一些意外，这个时候就要学会解决问题了。<br>解决问题的原则是：查看 <code>bug</code> 信息，从上到下依次解决 <code>bug</code>。</p>\n<p>下面来看几个例子：</p>\n<a id=\"more\"></a>\n<p>首先这个是在 <code>hexo clean</code> 时报的错：<br><img src=\"http://i1.piimg.com/567571/08a05e89a756ee75.png\" alt=\"\"><br>提示插件 <code>hexo-deployer-got</code> 加载失败，想了一下，应该是上次我在移动博客目录的时候，这个模块中有一些文件名比较长的文件，系统会提示移动不过来，导致这个模块异常，很简单，文件夹中删除这个模块，重新安装即可。（或者使用 <code>npm</code> 来卸载这个模块，然后重新安装）如下：</p>\n<p><img src=\"http://i1.piimg.com/567571/a26efa972092fb9e.png\" alt=\"\"></p>\n<p>OK ， 现在好了，<code>hexo clean</code> 没有报错了。</p>\n<p><img src=\"http://i1.piimg.com/567571/24a28fcb40d1c95f.png\" alt=\"\"></p>\n<p>下面，我是在执行 <code>hexo g</code> 的操作，同样也出现了错误：</p>\n<p><img src=\"http://i1.piimg.com/567571/40a2d64a4aba2a04.png\" alt=\"\"></p>\n<p>按照图中我标注的步骤，来看一下错误信息：<br>如 1 所示：我们首先会发现缺少模块 <code>isarray</code> ，但是我们查看 <code>package.json</code> 文件，我们的项目根本就没有引入 <code>isarray</code> 这个模块，我猜测这个 <code>isarray</code> 模块应该是某个模块的子模块 。</p>\n<p>如 2 所示：我们顺着 <code>at</code> 一路往下找。</p>\n<p>如 3 所示：发现这个 <code>isarray</code> <code>at</code> <code>hexo-generator-sitemap</code> ，所以我们删除这个 <code>hexo-generator-sitemap</code> 模块，然后重新安装这个模块。如下：</p>\n<p><img src=\"http://i1.piimg.com/567571/6a740eb49f5ad0c2.png\" alt=\"\"></p>\n<p>OK ， 现在好了，<code>hexo g</code> 没有报错了。</p>\n<p><img src=\"http://i1.piimg.com/567571/91abd56ac0617023.png\" alt=\"\"></p>\n<p>那么，就以这两个例子来作为本次的示范吧，其实，<code>Hexo</code> 中的一些问题还是比较好解决的，因为它都是依赖其他模块的，定位到出问题的模块，卸载重装即可。</p>\n<p id=\"div-border-top-red\">总结：遇到问题 <code>bug</code>，一定要仔细查阅错误提示信息，遵守从上往下解决的方案。</p>\n","excerpt":"<p id=\"div-border-left-blue\">提示：本篇文章将介绍在使用 <code>heox</code> 做博客框架中的一些 <code>bug</code> 处理情况。</p>\n\n<p>按照之前的教程介绍应该是会比较顺利的搭建好你的博客，但是难免会遇到一些意外，这个时候就要学会解决问题了。<br>解决问题的原则是：查看 <code>bug</code> 信息，从上到下依次解决 <code>bug</code>。</p>\n<p>下面来看几个例子：</p>","more":"<p>首先这个是在 <code>hexo clean</code> 时报的错：<br><img src=\"http://i1.piimg.com/567571/08a05e89a756ee75.png\" alt=\"\"><br>提示插件 <code>hexo-deployer-got</code> 加载失败，想了一下，应该是上次我在移动博客目录的时候，这个模块中有一些文件名比较长的文件，系统会提示移动不过来，导致这个模块异常，很简单，文件夹中删除这个模块，重新安装即可。（或者使用 <code>npm</code> 来卸载这个模块，然后重新安装）如下：</p>\n<p><img src=\"http://i1.piimg.com/567571/a26efa972092fb9e.png\" alt=\"\"></p>\n<p>OK ， 现在好了，<code>hexo clean</code> 没有报错了。</p>\n<p><img src=\"http://i1.piimg.com/567571/24a28fcb40d1c95f.png\" alt=\"\"></p>\n<p>下面，我是在执行 <code>hexo g</code> 的操作，同样也出现了错误：</p>\n<p><img src=\"http://i1.piimg.com/567571/40a2d64a4aba2a04.png\" alt=\"\"></p>\n<p>按照图中我标注的步骤，来看一下错误信息：<br>如 1 所示：我们首先会发现缺少模块 <code>isarray</code> ，但是我们查看 <code>package.json</code> 文件，我们的项目根本就没有引入 <code>isarray</code> 这个模块，我猜测这个 <code>isarray</code> 模块应该是某个模块的子模块 。</p>\n<p>如 2 所示：我们顺着 <code>at</code> 一路往下找。</p>\n<p>如 3 所示：发现这个 <code>isarray</code> <code>at</code> <code>hexo-generator-sitemap</code> ，所以我们删除这个 <code>hexo-generator-sitemap</code> 模块，然后重新安装这个模块。如下：</p>\n<p><img src=\"http://i1.piimg.com/567571/6a740eb49f5ad0c2.png\" alt=\"\"></p>\n<p>OK ， 现在好了，<code>hexo g</code> 没有报错了。</p>\n<p><img src=\"http://i1.piimg.com/567571/91abd56ac0617023.png\" alt=\"\"></p>\n<p>那么，就以这两个例子来作为本次的示范吧，其实，<code>Hexo</code> 中的一些问题还是比较好解决的，因为它都是依赖其他模块的，定位到出问题的模块，卸载重装即可。</p>\n<p id=\"div-border-top-red\">总结：遇到问题 <code>bug</code>，一定要仔细查阅错误提示信息，遵守从上往下解决的方案。</p>"},{"title":"Hexo-NexT搭建个人博客（三）","date":"2016-11-11T05:25:24.000Z","comments":0,"_content":"　　经过前面两期文章，我相信你已经可以在本地建立一个非常令人满意的静态博客了，本篇文章将介绍如何将自己的静态博客部署到 `gitpage` 上，并托管到 `github` 上；以及关于 Hexo 和 NexT 中更深层次的一些问题及解方案。\n\n## 一、菜单栏中标签与侧边栏中标签关联的问题\n　　以我的博客为例，关于菜单栏中的选项 与侧边栏中的选项，由于顶部菜单栏中位置有限，所以我就想在顶部菜单栏中不显示 `标签` 这一项，于是我在 <span id=\"inline-purple\">主题配置文件</span> 中 将 menu 配置项中的 `标签` 这一个选项给注释掉了，所以它不会在菜单栏中显示，但是不代表没有这个页面，这个页面是存在的，我们只是使其不显示在顶部的菜单栏中而已，我们可以直接输入绝对地址来查看这个页面，例如：[https://neveryu.github.io/tags/](https://neveryu.github.io/tags/)。但是与此同时，我们发现侧边栏中的<b>标签</b>选项只能显示标签数量，不能点击。\n\n<!-- more -->\n\n　　这是因为侧边栏中的点击链接是根据菜单栏中对应的项来添加的，什么意思呢？就是说如果顶部菜单栏中有<b>标签</b>这一项，那么就会给侧边栏中<b>标签</b>这一项也添加点击链接；如果顶部菜单栏中没有<b>标签</b>这一项，那么就不给侧边栏中<b>标签</b>这一项添加点击链接，导致侧边栏中的<b>标签</b>项只有显示数据，不提供点击链接。\n　　如果我们不想在菜单栏中显示<b>标签</b>项，但是希望侧边栏中的<b>标签</b>项 可以点击，该怎么做呢？\n　　在 <span id=\"inline-purple\">主题配置文件</span> `\\themes\\next\\layout\\_macro\\sidebar.swing_` 中，将\n```\n{% if site.tags.length > 0 %}\n  <div class=\"site-state-item site-state-tags\">\n    {% if theme.menu.tags %}<a href=\"{{ url_for(theme.menu.tags) }}\">{% endif %}\n      <span class=\"site-state-item-count\">{{ site.tags.length }}</span>\n      <span class=\"site-state-item-name\">{{ __('state.tags') }}</span>\n    {% if theme.menu.tags %}</a>{% endif %}\n  </div>\n{% endif %}\n```\n改成：\n```\n{% if site.tags.length > 0 %}\n  <div class=\"site-state-item site-state-tags\">\n    <a href=\"{{ url_for(theme.menu.tags) }}\">\n      <span class=\"site-state-item-count\">{{ site.tags.length }}</span>\n      <span class=\"site-state-item-name\">{{ __('state.tags') }}</span>\n    </a>\n  </div>\n{% endif %}\n```\n<p id=\"div-border-left-red\">同理，关于菜单栏中 归档 和 分类 的类似操作也是如此。</p>\n\n\n## 二、关于High一下中的音乐多次点击重叠播放的解决方案\n\n　　在之前的 High一下 的播放音乐，如果多次点击的话，音乐会重复叠加播放，严重影响听歌体验，而且只能播放一首歌。\n　　而现在的 High一下 已经解决了这个问题，而且可以列表循环多首歌曲。我将之前的那段播放音乐的代码换了。由于代码太长了，就不在这里贴出来了。大家可以去查看我的源码：[https://github.com/Neveryu/Blog](https://github.com/Neveryu/Blog)。\n关于播放音乐的代码是在：[https://github.com/Neveryu/Blog/blob/master/themes/next/layout/_partials/header.swig](https://github.com/Neveryu/Blog/blob/master/themes/next/layout/_partials/header.swig) 中的第 60 行开始。\n　　需要说明的是：现在的 High一下 实现了歌曲列表循环，所以，我们可以放入多首歌的链接。在代码中以数组元素的形式加入歌曲链接。\n```\nvar songs = [\n    \"http://v.65dj.com/wailian/84791c997d8c55023dad0d5690e48c28.mp3\",\n    \"http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3\"\n];\n```\n\n\n## 三、关于github屏蔽vendors ，导致页面空白的解决方案\n\n关于 Github Pages 过滤掉了 `source/vendors` 目录的访问，导致加载vendor里面的文件全部 404 ，页面大面积空白。\n1.在根目录添加.nojekyll文件。\n2.也可以手动将 `source/vendors` 目录修改成 `source/lib` 同时，修改主题配置文件 `_config.yml` ，将 `_internal: vendors` 改成你所修改的名字，例如 `_internal: lib` 。\n\n\n\n## 四、关于如何获取自己的多说userid\n首先进入自己的帐号管理页面，点击左上自己的名字\n![](http://i1.piimg.com/567571/afbb6058c9f628ad.png)\n此时地址栏后面的一串数字就是你的多说 `userid`。\n![](http://i1.piimg.com/567571/5e3de4efdcabd668.png)\n\n## 五、关于如何修改内容区域宽度\n`Next` 对内容的宽度的设定如下：\n* 700px，当屏幕宽度 < 1600px\n* 900px，当屏幕宽度 >= 1600px\n* 移动设备下，宽度自适应\n\n如果你需要修改内容的宽度，同样需要编辑样式文件。编辑主题的 `source\\css\\_variables\\custom.styl` 文件，新增变量：\n```\n// 修改成你期望的宽度\n$content-desktop = 700px\n\n// 当视窗超过 1600px 后的宽度\n$content-desktop-large = 900px\n```\n此方法不适用于 `Pisces Scheme` ， `Pisces Scheme` 编辑 `themes\\next\\source\\css\\_schemes\\Picses\\_layout.styl` 文件，更改以下 `css` 选项定义值：\n```\n.header {width: 1150px;}\n.container .main-inner {width: 1150px;}\n.content-wrap {width: calc(100% - 260px);}\n```\n\n## 六、图片模式\n新建博文，设置 `type: \"picture\"` ，使用 `{\\% gp x-x \\%}...{\\% endgp \\%}` 标签引用要展示的图片地址，如下所示：\n```\n---\ntitle: Naruto-Pictures\ncategories: [picture]\ntags: [picture,naruto]\ndate: 2016-11-02 14:36:04\ntype: \"picture\"\n---\n{% gp 5-3 %}\n![](http://oapjp6spr.bkt.clouddn.com/18210.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/196232.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/224147.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/199301.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/213318.jpg)\n{% endgp %}\n```\n\n** 图片展示效果 **\n`{\\% gp 5-3 \\%}`：设置图片展示效果，参考 `themes\\next\\scripts\\tags\\group-pictures.js` 注释示意图。\n![](http://p1.bpimg.com/567571/eaef5acfcb3011c2.png)\n`5-3` 的意思就是5张图片将会按照这种布局来展示，`Next` 提供了多张图片的多种布局，你可以随意选择。\n\n<h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5>\n<p id=\"div-border-top-green\"><i>[我的博客仓库](https://github.com/Neveryu/Neveryu.github.io)\n[博客源码](https://github.com/Neveryu/Blog)\n</i></p>","source":"_posts/hexo-next-three.md","raw":"---\ntitle: Hexo-NexT搭建个人博客（三）\ndate: 2016-11-11 13:25:24\ncategories: 综合\ntags: [Hexo,Next]\ncomments: false\n---\n　　经过前面两期文章，我相信你已经可以在本地建立一个非常令人满意的静态博客了，本篇文章将介绍如何将自己的静态博客部署到 `gitpage` 上，并托管到 `github` 上；以及关于 Hexo 和 NexT 中更深层次的一些问题及解方案。\n\n## 一、菜单栏中标签与侧边栏中标签关联的问题\n　　以我的博客为例，关于菜单栏中的选项 与侧边栏中的选项，由于顶部菜单栏中位置有限，所以我就想在顶部菜单栏中不显示 `标签` 这一项，于是我在 <span id=\"inline-purple\">主题配置文件</span> 中 将 menu 配置项中的 `标签` 这一个选项给注释掉了，所以它不会在菜单栏中显示，但是不代表没有这个页面，这个页面是存在的，我们只是使其不显示在顶部的菜单栏中而已，我们可以直接输入绝对地址来查看这个页面，例如：[https://neveryu.github.io/tags/](https://neveryu.github.io/tags/)。但是与此同时，我们发现侧边栏中的<b>标签</b>选项只能显示标签数量，不能点击。\n\n<!-- more -->\n\n　　这是因为侧边栏中的点击链接是根据菜单栏中对应的项来添加的，什么意思呢？就是说如果顶部菜单栏中有<b>标签</b>这一项，那么就会给侧边栏中<b>标签</b>这一项也添加点击链接；如果顶部菜单栏中没有<b>标签</b>这一项，那么就不给侧边栏中<b>标签</b>这一项添加点击链接，导致侧边栏中的<b>标签</b>项只有显示数据，不提供点击链接。\n　　如果我们不想在菜单栏中显示<b>标签</b>项，但是希望侧边栏中的<b>标签</b>项 可以点击，该怎么做呢？\n　　在 <span id=\"inline-purple\">主题配置文件</span> `\\themes\\next\\layout\\_macro\\sidebar.swing_` 中，将\n```\n{% if site.tags.length > 0 %}\n  <div class=\"site-state-item site-state-tags\">\n    {% if theme.menu.tags %}<a href=\"{{ url_for(theme.menu.tags) }}\">{% endif %}\n      <span class=\"site-state-item-count\">{{ site.tags.length }}</span>\n      <span class=\"site-state-item-name\">{{ __('state.tags') }}</span>\n    {% if theme.menu.tags %}</a>{% endif %}\n  </div>\n{% endif %}\n```\n改成：\n```\n{% if site.tags.length > 0 %}\n  <div class=\"site-state-item site-state-tags\">\n    <a href=\"{{ url_for(theme.menu.tags) }}\">\n      <span class=\"site-state-item-count\">{{ site.tags.length }}</span>\n      <span class=\"site-state-item-name\">{{ __('state.tags') }}</span>\n    </a>\n  </div>\n{% endif %}\n```\n<p id=\"div-border-left-red\">同理，关于菜单栏中 归档 和 分类 的类似操作也是如此。</p>\n\n\n## 二、关于High一下中的音乐多次点击重叠播放的解决方案\n\n　　在之前的 High一下 的播放音乐，如果多次点击的话，音乐会重复叠加播放，严重影响听歌体验，而且只能播放一首歌。\n　　而现在的 High一下 已经解决了这个问题，而且可以列表循环多首歌曲。我将之前的那段播放音乐的代码换了。由于代码太长了，就不在这里贴出来了。大家可以去查看我的源码：[https://github.com/Neveryu/Blog](https://github.com/Neveryu/Blog)。\n关于播放音乐的代码是在：[https://github.com/Neveryu/Blog/blob/master/themes/next/layout/_partials/header.swig](https://github.com/Neveryu/Blog/blob/master/themes/next/layout/_partials/header.swig) 中的第 60 行开始。\n　　需要说明的是：现在的 High一下 实现了歌曲列表循环，所以，我们可以放入多首歌的链接。在代码中以数组元素的形式加入歌曲链接。\n```\nvar songs = [\n    \"http://v.65dj.com/wailian/84791c997d8c55023dad0d5690e48c28.mp3\",\n    \"http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3\"\n];\n```\n\n\n## 三、关于github屏蔽vendors ，导致页面空白的解决方案\n\n关于 Github Pages 过滤掉了 `source/vendors` 目录的访问，导致加载vendor里面的文件全部 404 ，页面大面积空白。\n1.在根目录添加.nojekyll文件。\n2.也可以手动将 `source/vendors` 目录修改成 `source/lib` 同时，修改主题配置文件 `_config.yml` ，将 `_internal: vendors` 改成你所修改的名字，例如 `_internal: lib` 。\n\n\n\n## 四、关于如何获取自己的多说userid\n首先进入自己的帐号管理页面，点击左上自己的名字\n![](http://i1.piimg.com/567571/afbb6058c9f628ad.png)\n此时地址栏后面的一串数字就是你的多说 `userid`。\n![](http://i1.piimg.com/567571/5e3de4efdcabd668.png)\n\n## 五、关于如何修改内容区域宽度\n`Next` 对内容的宽度的设定如下：\n* 700px，当屏幕宽度 < 1600px\n* 900px，当屏幕宽度 >= 1600px\n* 移动设备下，宽度自适应\n\n如果你需要修改内容的宽度，同样需要编辑样式文件。编辑主题的 `source\\css\\_variables\\custom.styl` 文件，新增变量：\n```\n// 修改成你期望的宽度\n$content-desktop = 700px\n\n// 当视窗超过 1600px 后的宽度\n$content-desktop-large = 900px\n```\n此方法不适用于 `Pisces Scheme` ， `Pisces Scheme` 编辑 `themes\\next\\source\\css\\_schemes\\Picses\\_layout.styl` 文件，更改以下 `css` 选项定义值：\n```\n.header {width: 1150px;}\n.container .main-inner {width: 1150px;}\n.content-wrap {width: calc(100% - 260px);}\n```\n\n## 六、图片模式\n新建博文，设置 `type: \"picture\"` ，使用 `{\\% gp x-x \\%}...{\\% endgp \\%}` 标签引用要展示的图片地址，如下所示：\n```\n---\ntitle: Naruto-Pictures\ncategories: [picture]\ntags: [picture,naruto]\ndate: 2016-11-02 14:36:04\ntype: \"picture\"\n---\n{% gp 5-3 %}\n![](http://oapjp6spr.bkt.clouddn.com/18210.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/196232.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/224147.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/199301.jpg)\n![](http://oapjp6spr.bkt.clouddn.com/213318.jpg)\n{% endgp %}\n```\n\n** 图片展示效果 **\n`{\\% gp 5-3 \\%}`：设置图片展示效果，参考 `themes\\next\\scripts\\tags\\group-pictures.js` 注释示意图。\n![](http://p1.bpimg.com/567571/eaef5acfcb3011c2.png)\n`5-3` 的意思就是5张图片将会按照这种布局来展示，`Next` 提供了多张图片的多种布局，你可以随意选择。\n\n<h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5>\n<p id=\"div-border-top-green\"><i>[我的博客仓库](https://github.com/Neveryu/Neveryu.github.io)\n[博客源码](https://github.com/Neveryu/Blog)\n</i></p>","slug":"hexo-next-three","published":1,"updated":"2017-01-17T15:19:40.036Z","layout":"post","photos":[],"link":"","_id":"ciysq4uj9000bugi42nd9qofo","content":"<p>　　经过前面两期文章，我相信你已经可以在本地建立一个非常令人满意的静态博客了，本篇文章将介绍如何将自己的静态博客部署到 <code>gitpage</code> 上，并托管到 <code>github</code> 上；以及关于 Hexo 和 NexT 中更深层次的一些问题及解方案。</p>\n<h2 id=\"一、菜单栏中标签与侧边栏中标签关联的问题\"><a href=\"#一、菜单栏中标签与侧边栏中标签关联的问题\" class=\"headerlink\" title=\"一、菜单栏中标签与侧边栏中标签关联的问题\"></a>一、菜单栏中标签与侧边栏中标签关联的问题</h2><p>　　以我的博客为例，关于菜单栏中的选项 与侧边栏中的选项，由于顶部菜单栏中位置有限，所以我就想在顶部菜单栏中不显示 <code>标签</code> 这一项，于是我在 <span id=\"inline-purple\">主题配置文件</span> 中 将 menu 配置项中的 <code>标签</code> 这一个选项给注释掉了，所以它不会在菜单栏中显示，但是不代表没有这个页面，这个页面是存在的，我们只是使其不显示在顶部的菜单栏中而已，我们可以直接输入绝对地址来查看这个页面，例如：<a href=\"https://neveryu.github.io/tags/\">https://neveryu.github.io/tags/</a>。但是与此同时，我们发现侧边栏中的<b>标签</b>选项只能显示标签数量，不能点击。</p>\n<a id=\"more\"></a>\n<p>　　这是因为侧边栏中的点击链接是根据菜单栏中对应的项来添加的，什么意思呢？就是说如果顶部菜单栏中有<b>标签</b>这一项，那么就会给侧边栏中<b>标签</b>这一项也添加点击链接；如果顶部菜单栏中没有<b>标签</b>这一项，那么就不给侧边栏中<b>标签</b>这一项添加点击链接，导致侧边栏中的<b>标签</b>项只有显示数据，不提供点击链接。<br>　　如果我们不想在菜单栏中显示<b>标签</b>项，但是希望侧边栏中的<b>标签</b>项 可以点击，该怎么做呢？<br>　　在 <span id=\"inline-purple\">主题配置文件</span> <code>\\themes\\next\\layout\\_macro\\sidebar.swing_</code> 中，将<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if site.tags.length &gt; 0 %&#125;</div><div class=\"line\">  &lt;div class=&quot;site-state-item site-state-tags&quot;&gt;</div><div class=\"line\">    &#123;% if theme.menu.tags %&#125;&lt;a href=&quot;&#123;&#123; url_for(theme.menu.tags) &#125;&#125;&quot;&gt;&#123;% endif %&#125;</div><div class=\"line\">      &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.tags.length &#125;&#125;&lt;/span&gt;</div><div class=\"line\">      &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&apos;state.tags&apos;) &#125;&#125;&lt;/span&gt;</div><div class=\"line\">    &#123;% if theme.menu.tags %&#125;&lt;/a&gt;&#123;% endif %&#125;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<p>改成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if site.tags.length &gt; 0 %&#125;</div><div class=\"line\">  &lt;div class=&quot;site-state-item site-state-tags&quot;&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123; url_for(theme.menu.tags) &#125;&#125;&quot;&gt;</div><div class=\"line\">      &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.tags.length &#125;&#125;&lt;/span&gt;</div><div class=\"line\">      &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&apos;state.tags&apos;) &#125;&#125;&lt;/span&gt;</div><div class=\"line\">    &lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<p id=\"div-border-left-red\">同理，关于菜单栏中 归档 和 分类 的类似操作也是如此。</p>\n\n\n<h2 id=\"二、关于High一下中的音乐多次点击重叠播放的解决方案\"><a href=\"#二、关于High一下中的音乐多次点击重叠播放的解决方案\" class=\"headerlink\" title=\"二、关于High一下中的音乐多次点击重叠播放的解决方案\"></a>二、关于High一下中的音乐多次点击重叠播放的解决方案</h2><p>　　在之前的 High一下 的播放音乐，如果多次点击的话，音乐会重复叠加播放，严重影响听歌体验，而且只能播放一首歌。<br>　　而现在的 High一下 已经解决了这个问题，而且可以列表循环多首歌曲。我将之前的那段播放音乐的代码换了。由于代码太长了，就不在这里贴出来了。大家可以去查看我的源码：<a href=\"https://github.com/Neveryu/Blog\" target=\"_blank\" rel=\"external\">https://github.com/Neveryu/Blog</a>。<br>关于播放音乐的代码是在：<a href=\"https://github.com/Neveryu/Blog/blob/master/themes/next/layout/_partials/header.swig\" target=\"_blank\" rel=\"external\">https://github.com/Neveryu/Blog/blob/master/themes/next/layout/_partials/header.swig</a> 中的第 60 行开始。<br>　　需要说明的是：现在的 High一下 实现了歌曲列表循环，所以，我们可以放入多首歌的链接。在代码中以数组元素的形式加入歌曲链接。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var songs = [</div><div class=\"line\">    &quot;http://v.65dj.com/wailian/84791c997d8c55023dad0d5690e48c28.mp3&quot;,</div><div class=\"line\">    &quot;http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3&quot;</div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<h2 id=\"三、关于github屏蔽vendors-，导致页面空白的解决方案\"><a href=\"#三、关于github屏蔽vendors-，导致页面空白的解决方案\" class=\"headerlink\" title=\"三、关于github屏蔽vendors ，导致页面空白的解决方案\"></a>三、关于github屏蔽vendors ，导致页面空白的解决方案</h2><p>关于 Github Pages 过滤掉了 <code>source/vendors</code> 目录的访问，导致加载vendor里面的文件全部 404 ，页面大面积空白。<br>1.在根目录添加.nojekyll文件。<br>2.也可以手动将 <code>source/vendors</code> 目录修改成 <code>source/lib</code> 同时，修改主题配置文件 <code>_config.yml</code> ，将 <code>_internal: vendors</code> 改成你所修改的名字，例如 <code>_internal: lib</code> 。</p>\n<h2 id=\"四、关于如何获取自己的多说userid\"><a href=\"#四、关于如何获取自己的多说userid\" class=\"headerlink\" title=\"四、关于如何获取自己的多说userid\"></a>四、关于如何获取自己的多说userid</h2><p>首先进入自己的帐号管理页面，点击左上自己的名字<br><img src=\"http://i1.piimg.com/567571/afbb6058c9f628ad.png\" alt=\"\"><br>此时地址栏后面的一串数字就是你的多说 <code>userid</code>。<br><img src=\"http://i1.piimg.com/567571/5e3de4efdcabd668.png\" alt=\"\"></p>\n<h2 id=\"五、关于如何修改内容区域宽度\"><a href=\"#五、关于如何修改内容区域宽度\" class=\"headerlink\" title=\"五、关于如何修改内容区域宽度\"></a>五、关于如何修改内容区域宽度</h2><p><code>Next</code> 对内容的宽度的设定如下：</p>\n<ul>\n<li>700px，当屏幕宽度 &lt; 1600px</li>\n<li>900px，当屏幕宽度 &gt;= 1600px</li>\n<li>移动设备下，宽度自适应</li>\n</ul>\n<p>如果你需要修改内容的宽度，同样需要编辑样式文件。编辑主题的 <code>source\\css\\_variables\\custom.styl</code> 文件，新增变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 修改成你期望的宽度</div><div class=\"line\">$content-desktop = 700px</div><div class=\"line\"></div><div class=\"line\">// 当视窗超过 1600px 后的宽度</div><div class=\"line\">$content-desktop-large = 900px</div></pre></td></tr></table></figure></p>\n<p>此方法不适用于 <code>Pisces Scheme</code> ， <code>Pisces Scheme</code> 编辑 <code>themes\\next\\source\\css\\_schemes\\Picses\\_layout.styl</code> 文件，更改以下 <code>css</code> 选项定义值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.header &#123;width: 1150px;&#125;</div><div class=\"line\">.container .main-inner &#123;width: 1150px;&#125;</div><div class=\"line\">.content-wrap &#123;width: calc(100% - 260px);&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"六、图片模式\"><a href=\"#六、图片模式\" class=\"headerlink\" title=\"六、图片模式\"></a>六、图片模式</h2><p>新建博文，设置 <code>type: &quot;picture&quot;</code> ，使用 <code>{\\% gp x-x \\%}...{\\% endgp \\%}</code> 标签引用要展示的图片地址，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: Naruto-Pictures</div><div class=\"line\">categories: [picture]</div><div class=\"line\">tags: [picture,naruto]</div><div class=\"line\">date: 2016-11-02 14:36:04</div><div class=\"line\">type: &quot;picture&quot;</div><div class=\"line\">---</div><div class=\"line\">&#123;% gp 5-3 %&#125;</div><div class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/18210.jpg)</div><div class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/196232.jpg)</div><div class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/224147.jpg)</div><div class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/199301.jpg)</div><div class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/213318.jpg)</div><div class=\"line\">&#123;% endgp %&#125;</div></pre></td></tr></table></figure></p>\n<p><strong> 图片展示效果 </strong><br><code>{\\% gp 5-3 \\%}</code>：设置图片展示效果，参考 <code>themes\\next\\scripts\\tags\\group-pictures.js</code> 注释示意图。<br><img src=\"http://p1.bpimg.com/567571/eaef5acfcb3011c2.png\" alt=\"\"><br><code>5-3</code> 的意思就是5张图片将会按照这种布局来展示，<code>Next</code> 提供了多张图片的多种布局，你可以随意选择。</p>\n<p></p><h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5><p></p>\n<p id=\"div-border-top-green\"><i><a href=\"https://github.com/Neveryu/Neveryu.github.io\" target=\"_blank\" rel=\"external\">我的博客仓库</a><br><a href=\"https://github.com/Neveryu/Blog\" target=\"_blank\" rel=\"external\">博客源码</a><br></i></p>","excerpt":"<p>　　经过前面两期文章，我相信你已经可以在本地建立一个非常令人满意的静态博客了，本篇文章将介绍如何将自己的静态博客部署到 <code>gitpage</code> 上，并托管到 <code>github</code> 上；以及关于 Hexo 和 NexT 中更深层次的一些问题及解方案。</p>\n<h2 id=\"一、菜单栏中标签与侧边栏中标签关联的问题\"><a href=\"#一、菜单栏中标签与侧边栏中标签关联的问题\" class=\"headerlink\" title=\"一、菜单栏中标签与侧边栏中标签关联的问题\"></a>一、菜单栏中标签与侧边栏中标签关联的问题</h2><p>　　以我的博客为例，关于菜单栏中的选项 与侧边栏中的选项，由于顶部菜单栏中位置有限，所以我就想在顶部菜单栏中不显示 <code>标签</code> 这一项，于是我在 <span id=\"inline-purple\">主题配置文件</span> 中 将 menu 配置项中的 <code>标签</code> 这一个选项给注释掉了，所以它不会在菜单栏中显示，但是不代表没有这个页面，这个页面是存在的，我们只是使其不显示在顶部的菜单栏中而已，我们可以直接输入绝对地址来查看这个页面，例如：<a href=\"https://neveryu.github.io/tags/\">https://neveryu.github.io/tags/</a>。但是与此同时，我们发现侧边栏中的<b>标签</b>选项只能显示标签数量，不能点击。</p>","more":"<p>　　这是因为侧边栏中的点击链接是根据菜单栏中对应的项来添加的，什么意思呢？就是说如果顶部菜单栏中有<b>标签</b>这一项，那么就会给侧边栏中<b>标签</b>这一项也添加点击链接；如果顶部菜单栏中没有<b>标签</b>这一项，那么就不给侧边栏中<b>标签</b>这一项添加点击链接，导致侧边栏中的<b>标签</b>项只有显示数据，不提供点击链接。<br>　　如果我们不想在菜单栏中显示<b>标签</b>项，但是希望侧边栏中的<b>标签</b>项 可以点击，该怎么做呢？<br>　　在 <span id=\"inline-purple\">主题配置文件</span> <code>\\themes\\next\\layout\\_macro\\sidebar.swing_</code> 中，将<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if site.tags.length &gt; 0 %&#125;</div><div class=\"line\">  &lt;div class=&quot;site-state-item site-state-tags&quot;&gt;</div><div class=\"line\">    &#123;% if theme.menu.tags %&#125;&lt;a href=&quot;&#123;&#123; url_for(theme.menu.tags) &#125;&#125;&quot;&gt;&#123;% endif %&#125;</div><div class=\"line\">      &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.tags.length &#125;&#125;&lt;/span&gt;</div><div class=\"line\">      &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&apos;state.tags&apos;) &#125;&#125;&lt;/span&gt;</div><div class=\"line\">    &#123;% if theme.menu.tags %&#125;&lt;/a&gt;&#123;% endif %&#125;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<p>改成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if site.tags.length &gt; 0 %&#125;</div><div class=\"line\">  &lt;div class=&quot;site-state-item site-state-tags&quot;&gt;</div><div class=\"line\">    &lt;a href=&quot;&#123;&#123; url_for(theme.menu.tags) &#125;&#125;&quot;&gt;</div><div class=\"line\">      &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.tags.length &#125;&#125;&lt;/span&gt;</div><div class=\"line\">      &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&apos;state.tags&apos;) &#125;&#125;&lt;/span&gt;</div><div class=\"line\">    &lt;/a&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<p id=\"div-border-left-red\">同理，关于菜单栏中 归档 和 分类 的类似操作也是如此。</p>\n\n\n<h2 id=\"二、关于High一下中的音乐多次点击重叠播放的解决方案\"><a href=\"#二、关于High一下中的音乐多次点击重叠播放的解决方案\" class=\"headerlink\" title=\"二、关于High一下中的音乐多次点击重叠播放的解决方案\"></a>二、关于High一下中的音乐多次点击重叠播放的解决方案</h2><p>　　在之前的 High一下 的播放音乐，如果多次点击的话，音乐会重复叠加播放，严重影响听歌体验，而且只能播放一首歌。<br>　　而现在的 High一下 已经解决了这个问题，而且可以列表循环多首歌曲。我将之前的那段播放音乐的代码换了。由于代码太长了，就不在这里贴出来了。大家可以去查看我的源码：<a href=\"https://github.com/Neveryu/Blog\">https://github.com/Neveryu/Blog</a>。<br>关于播放音乐的代码是在：<a href=\"https://github.com/Neveryu/Blog/blob/master/themes/next/layout/_partials/header.swig\">https://github.com/Neveryu/Blog/blob/master/themes/next/layout/_partials/header.swig</a> 中的第 60 行开始。<br>　　需要说明的是：现在的 High一下 实现了歌曲列表循环，所以，我们可以放入多首歌的链接。在代码中以数组元素的形式加入歌曲链接。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var songs = [</div><div class=\"line\">    &quot;http://v.65dj.com/wailian/84791c997d8c55023dad0d5690e48c28.mp3&quot;,</div><div class=\"line\">    &quot;http://7xoiki.com1.z0.glb.clouddn.com/Music-sunburst.mp3&quot;</div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<h2 id=\"三、关于github屏蔽vendors-，导致页面空白的解决方案\"><a href=\"#三、关于github屏蔽vendors-，导致页面空白的解决方案\" class=\"headerlink\" title=\"三、关于github屏蔽vendors ，导致页面空白的解决方案\"></a>三、关于github屏蔽vendors ，导致页面空白的解决方案</h2><p>关于 Github Pages 过滤掉了 <code>source/vendors</code> 目录的访问，导致加载vendor里面的文件全部 404 ，页面大面积空白。<br>1.在根目录添加.nojekyll文件。<br>2.也可以手动将 <code>source/vendors</code> 目录修改成 <code>source/lib</code> 同时，修改主题配置文件 <code>_config.yml</code> ，将 <code>_internal: vendors</code> 改成你所修改的名字，例如 <code>_internal: lib</code> 。</p>\n<h2 id=\"四、关于如何获取自己的多说userid\"><a href=\"#四、关于如何获取自己的多说userid\" class=\"headerlink\" title=\"四、关于如何获取自己的多说userid\"></a>四、关于如何获取自己的多说userid</h2><p>首先进入自己的帐号管理页面，点击左上自己的名字<br><img src=\"http://i1.piimg.com/567571/afbb6058c9f628ad.png\" alt=\"\"><br>此时地址栏后面的一串数字就是你的多说 <code>userid</code>。<br><img src=\"http://i1.piimg.com/567571/5e3de4efdcabd668.png\" alt=\"\"></p>\n<h2 id=\"五、关于如何修改内容区域宽度\"><a href=\"#五、关于如何修改内容区域宽度\" class=\"headerlink\" title=\"五、关于如何修改内容区域宽度\"></a>五、关于如何修改内容区域宽度</h2><p><code>Next</code> 对内容的宽度的设定如下：</p>\n<ul>\n<li>700px，当屏幕宽度 &lt; 1600px</li>\n<li>900px，当屏幕宽度 &gt;= 1600px</li>\n<li>移动设备下，宽度自适应</li>\n</ul>\n<p>如果你需要修改内容的宽度，同样需要编辑样式文件。编辑主题的 <code>source\\css\\_variables\\custom.styl</code> 文件，新增变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 修改成你期望的宽度</div><div class=\"line\">$content-desktop = 700px</div><div class=\"line\"></div><div class=\"line\">// 当视窗超过 1600px 后的宽度</div><div class=\"line\">$content-desktop-large = 900px</div></pre></td></tr></table></figure></p>\n<p>此方法不适用于 <code>Pisces Scheme</code> ， <code>Pisces Scheme</code> 编辑 <code>themes\\next\\source\\css\\_schemes\\Picses\\_layout.styl</code> 文件，更改以下 <code>css</code> 选项定义值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.header &#123;width: 1150px;&#125;</div><div class=\"line\">.container .main-inner &#123;width: 1150px;&#125;</div><div class=\"line\">.content-wrap &#123;width: calc(100% - 260px);&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"六、图片模式\"><a href=\"#六、图片模式\" class=\"headerlink\" title=\"六、图片模式\"></a>六、图片模式</h2><p>新建博文，设置 <code>type: &quot;picture&quot;</code> ，使用 <code>{\\% gp x-x \\%}...{\\% endgp \\%}</code> 标签引用要展示的图片地址，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">---</div><div class=\"line\">title: Naruto-Pictures</div><div class=\"line\">categories: [picture]</div><div class=\"line\">tags: [picture,naruto]</div><div class=\"line\">date: 2016-11-02 14:36:04</div><div class=\"line\">type: &quot;picture&quot;</div><div class=\"line\">---</div><div class=\"line\">&#123;% gp 5-3 %&#125;</div><div class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/18210.jpg)</div><div class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/196232.jpg)</div><div class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/224147.jpg)</div><div class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/199301.jpg)</div><div class=\"line\">![](http://oapjp6spr.bkt.clouddn.com/213318.jpg)</div><div class=\"line\">&#123;% endgp %&#125;</div></pre></td></tr></table></figure></p>\n<p><strong> 图片展示效果 </strong><br><code>{\\% gp 5-3 \\%}</code>：设置图片展示效果，参考 <code>themes\\next\\scripts\\tags\\group-pictures.js</code> 注释示意图。<br><img src=\"http://p1.bpimg.com/567571/eaef5acfcb3011c2.png\" alt=\"\"><br><code>5-3</code> 的意思就是5张图片将会按照这种布局来展示，<code>Next</code> 提供了多张图片的多种布局，你可以随意选择。</p>\n<p><h5 style=\"color:#f63;\"><i>最后要说的是：</i></h5></p>\n<p id=\"div-border-top-green\"><i><a href=\"https://github.com/Neveryu/Neveryu.github.io\">我的博客仓库</a><br><a href=\"https://github.com/Neveryu/Blog\">博客源码</a><br></i></p>"},{"title":"Hexo-NexT搭建个人博客（二）","date":"2016-09-30T14:18:22.000Z","comments":0,"_content":"\n本篇文章将介绍基于NexT主题下的一些扩展功能的实现。\n首先，我们需要明白：\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n#### 1.设置侧栏的位置\n修改 <span id=\"inline-purple\">主题配置文件</span> 中 `sidebar.position` 的值，支持的选项有：`left` `right`\n目前仅 Pisces Scheme 支持 position 配置，也就是说NexT主题的侧栏位置是不能设置的，设置了也没用，反正都在右边。\n\n<!-- more -->\n\n#### 2. 关于添加居中模块\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n代码如下：\n``` html\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n```\n\n#### 3. 添加High一下\n打开博客根目录 `\\themes\\next\\layout\\_partials\\header.swig` ，在\n`<ul> ... /ul>` 标签之间加入以下代码：\n```\n<li> <a title=\"把这个链接拖到你的Chrome收藏夹工具栏中\" href='javascript:(function() {\n    function c() {\n        var e = document.createElement(\"link\");\n        e.setAttribute(\"type\", \"text/css\");\n        e.setAttribute(\"rel\", \"stylesheet\");\n        e.setAttribute(\"href\", f);\n        e.setAttribute(\"class\", l);\n        document.body.appendChild(e)\n    }\n\n    function h() {\n        var e = document.getElementsByClassName(l);\n        for (var t = 0; t < e.length; t++) {\n            document.body.removeChild(e[t])\n        }\n    }\n\n    function p() {\n        var e = document.createElement(\"div\");\n        e.setAttribute(\"class\", a);\n        document.body.appendChild(e);\n        setTimeout(function() {\n            document.body.removeChild(e)\n        }, 100)\n    }\n\n    function d(e) {\n        return {\n            height : e.offsetHeight,\n            width : e.offsetWidth\n        }\n    }\n\n    function v(i) {\n        var s = d(i);\n        return s.height > e && s.height < n && s.width > t && s.width < r\n    }\n\n    function m(e) {\n        var t = e;\n        var n = 0;\n        while (!!t) {\n            n += t.offsetTop;\n            t = t.offsetParent\n        }\n        return n\n    }\n\n    function g() {\n        var e = document.documentElement;\n        if (!!window.innerWidth) {\n            return window.innerHeight\n        } else if (e && !isNaN(e.clientHeight)) {\n            return e.clientHeight\n        }\n        return 0\n    }\n\n    function y() {\n        if (window.pageYOffset) {\n            return window.pageYOffset\n        }\n        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)\n    }\n\n    function E(e) {\n        var t = m(e);\n        return t >= w && t <= b + w\n    }\n\n    function S() {\n        var e = document.createElement(\"audio\");\n        e.setAttribute(\"class\", l);\n        e.src = i;\n        e.loop = false;\n        e.addEventListener(\"canplay\", function() {\n            setTimeout(function() {\n                x(k)\n            }, 500);\n            setTimeout(function() {\n                N();\n                p();\n                for (var e = 0; e < O.length; e++) {\n                    T(O[e])\n                }\n            }, 15500)\n        }, true);\n        e.addEventListener(\"ended\", function() {\n            N();\n            h()\n        }, true);\n        e.innerHTML = \" <p>If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.</p> <p>\";\n        document.body.appendChild(e);\n        e.play()\n    }\n\n    function x(e) {\n        e.className += \" \" + s + \" \" + o\n    }\n\n    function T(e) {\n        e.className += \" \" + s + \" \" + u[Math.floor(Math.random() * u.length)]\n    }\n\n    function N() {\n        var e = document.getElementsByClassName(s);\n        var t = new RegExp(\"\\\\b\" + s + \"\\\\b\");\n        for (var n = 0; n < e.length; ) {\n            e[n].className = e[n].className.replace(t, \"\")\n        }\n    }\n\n    var e = 30;\n    var t = 30;\n    var n = 350;\n    var r = 350;\n    var i = \"//7xuupy.com1.z0.glb.clouddn.com/tongxingSibel%20-%20Im%20Sorry.mp3\";\n    var s = \"mw-harlem_shake_me\";\n    var o = \"im_first\";\n    var u = [\"im_drunk\", \"im_baked\", \"im_trippin\", \"im_blown\"];\n    var a = \"mw-strobe_light\";\n    var f = \"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css\";\n    var l = \"mw_added_css\";\n    var b = g();\n    var w = y();\n    var C = document.getElementsByTagName(\"*\");\n    var k = null;\n    for (var L = 0; L < C.length; L++) {\n        var A = C[L];\n        if (v(A)) {\n            if (E(A)) {\n                k = A;\n                break\n            }\n        }\n    }\n    if (A === null) {\n        console.warn(\"Could not find a node of the right size. Please try a different page.\");\n        return\n    }\n    c();\n    S();\n    var O = [];\n    for (var L = 0; L < C.length; L++) {\n        var A = C[L];\n        if (v(A)) {\n            O.push(A)\n        }\n    }\n    })()    '>High一下</a> </li>\n    ```\n\n\n\n#### 4. 添加最近访客\n在需要添加最近访客的网页对应的 markdown 文件中添加如下代码：\n```\n最近访客\n<div class=\"ds-recent-visitors\" data-num-items=\"39\" data-avatar-size=\"40\" id=\"ds-recent-visitors\"></div>\n```\n\n\n#### 5. 鼠标点击小红心的设置\n  1. 将 [love.js](https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/love.js) 文件添加到 `\\themes\\next\\source\\js\\src` 文件目录下。\n  2. 找到 `\\themes\\next\\layout\\_layout.swing` 文件，** 在文件的后面，`</body>`标签之前 ** 添加以下代码：\n  ``` html\n  <!-- 页面点击小红心 -->\n  <script type=\"text/javascript\" src=\"/js/src/love.js\"></script>\n  ```\n\n#### 6. 背景的设置\n  1. 将[particle.js](https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/particle.js)文件添加到`\\themes\\next\\source\\js\\src`文件目录下。\n  2. 找到`\\themes\\next\\layout\\_layout.swing`文件，** 在文件的后面，`</body>`标签之前 ** 添加以下代码：\n  ``` html\n  <!-- 背景动画 -->\n  <script type=\"text/javascript\" src=\"/js/src/particle.js\"></script>\n  ```\n\n#### 7.修改文章内链接文本样式\n将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。\n找到文件 `themes\\next\\source\\css\\_custom\\custom.styl` ，添加如下 `css` 样式：\n``` css\n.post-body p a {\n  color: #0593d3;\n  border-bottom: none;\n  &:hover {\n    color: #0477ab;\n    text-decoration: underline;\n  }\n}\n```\n\n#### 8. 多说评论不稳定，加载速度慢怎么办？\n把多说评论依赖的`embed.js`放置底部，这里需要修改的文件是`duoshuo.swig`。\n将\n```\n(document.getElementsByTagName('head')[0]\n```\n修改成下面的代码\n```\n(document.getElementById('footer')\n```\n\n\n#### 9. 给 Github 添加 README\n默认情况下，Github中每一个项目，我们希望有一份`README.md`的文件来作为项目的说明，但是我们在项目根目录下的`blog\\source`目录下创建一份`README.md`文件，写好说明介绍，部署的时候，这个`README.md`会被hexo解析掉，而不会被解析到Github中去的。\n正确的解决方法其实很简单：\n** 把`README.md`文件的后缀名改成\"MDOWN\"然后扔到`blog/source`文件夹下即可，这样hexo不会解析，Github也会将其作为MD文件解析。 **\n\n#### 10. 给 Blog 添加 LICENSE\n在 <span id=\"inline-purple\">主题配置文件</span> 中的 160 行左右：\n```\n# Creative Commons 4.0 International License.\n# http://creativecommons.org/\n# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero\ncreative_commons: by-nc-sa\n#creative_commons:\n```\n将其中第 4 行的注释放开，然后选择你想使用的 LICENSE 即可，可选项参照第 3 行。\n\n\n\n\n\n","source":"_posts/hexo-next-two.md","raw":"---\ntitle: Hexo-NexT搭建个人博客（二）\ndate: 2016-09-30 22:18:22\ncategories: 综合\ntags: [Hexo,Next]\ncomments: false\n---\n\n本篇文章将介绍基于NexT主题下的一些扩展功能的实现。\n首先，我们需要明白：\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n#### 1.设置侧栏的位置\n修改 <span id=\"inline-purple\">主题配置文件</span> 中 `sidebar.position` 的值，支持的选项有：`left` `right`\n目前仅 Pisces Scheme 支持 position 配置，也就是说NexT主题的侧栏位置是不能设置的，设置了也没用，反正都在右边。\n\n<!-- more -->\n\n#### 2. 关于添加居中模块\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n代码如下：\n``` html\n<blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote>\n```\n\n#### 3. 添加High一下\n打开博客根目录 `\\themes\\next\\layout\\_partials\\header.swig` ，在\n`<ul> ... /ul>` 标签之间加入以下代码：\n```\n<li> <a title=\"把这个链接拖到你的Chrome收藏夹工具栏中\" href='javascript:(function() {\n    function c() {\n        var e = document.createElement(\"link\");\n        e.setAttribute(\"type\", \"text/css\");\n        e.setAttribute(\"rel\", \"stylesheet\");\n        e.setAttribute(\"href\", f);\n        e.setAttribute(\"class\", l);\n        document.body.appendChild(e)\n    }\n\n    function h() {\n        var e = document.getElementsByClassName(l);\n        for (var t = 0; t < e.length; t++) {\n            document.body.removeChild(e[t])\n        }\n    }\n\n    function p() {\n        var e = document.createElement(\"div\");\n        e.setAttribute(\"class\", a);\n        document.body.appendChild(e);\n        setTimeout(function() {\n            document.body.removeChild(e)\n        }, 100)\n    }\n\n    function d(e) {\n        return {\n            height : e.offsetHeight,\n            width : e.offsetWidth\n        }\n    }\n\n    function v(i) {\n        var s = d(i);\n        return s.height > e && s.height < n && s.width > t && s.width < r\n    }\n\n    function m(e) {\n        var t = e;\n        var n = 0;\n        while (!!t) {\n            n += t.offsetTop;\n            t = t.offsetParent\n        }\n        return n\n    }\n\n    function g() {\n        var e = document.documentElement;\n        if (!!window.innerWidth) {\n            return window.innerHeight\n        } else if (e && !isNaN(e.clientHeight)) {\n            return e.clientHeight\n        }\n        return 0\n    }\n\n    function y() {\n        if (window.pageYOffset) {\n            return window.pageYOffset\n        }\n        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)\n    }\n\n    function E(e) {\n        var t = m(e);\n        return t >= w && t <= b + w\n    }\n\n    function S() {\n        var e = document.createElement(\"audio\");\n        e.setAttribute(\"class\", l);\n        e.src = i;\n        e.loop = false;\n        e.addEventListener(\"canplay\", function() {\n            setTimeout(function() {\n                x(k)\n            }, 500);\n            setTimeout(function() {\n                N();\n                p();\n                for (var e = 0; e < O.length; e++) {\n                    T(O[e])\n                }\n            }, 15500)\n        }, true);\n        e.addEventListener(\"ended\", function() {\n            N();\n            h()\n        }, true);\n        e.innerHTML = \" <p>If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.</p> <p>\";\n        document.body.appendChild(e);\n        e.play()\n    }\n\n    function x(e) {\n        e.className += \" \" + s + \" \" + o\n    }\n\n    function T(e) {\n        e.className += \" \" + s + \" \" + u[Math.floor(Math.random() * u.length)]\n    }\n\n    function N() {\n        var e = document.getElementsByClassName(s);\n        var t = new RegExp(\"\\\\b\" + s + \"\\\\b\");\n        for (var n = 0; n < e.length; ) {\n            e[n].className = e[n].className.replace(t, \"\")\n        }\n    }\n\n    var e = 30;\n    var t = 30;\n    var n = 350;\n    var r = 350;\n    var i = \"//7xuupy.com1.z0.glb.clouddn.com/tongxingSibel%20-%20Im%20Sorry.mp3\";\n    var s = \"mw-harlem_shake_me\";\n    var o = \"im_first\";\n    var u = [\"im_drunk\", \"im_baked\", \"im_trippin\", \"im_blown\"];\n    var a = \"mw-strobe_light\";\n    var f = \"//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css\";\n    var l = \"mw_added_css\";\n    var b = g();\n    var w = y();\n    var C = document.getElementsByTagName(\"*\");\n    var k = null;\n    for (var L = 0; L < C.length; L++) {\n        var A = C[L];\n        if (v(A)) {\n            if (E(A)) {\n                k = A;\n                break\n            }\n        }\n    }\n    if (A === null) {\n        console.warn(\"Could not find a node of the right size. Please try a different page.\");\n        return\n    }\n    c();\n    S();\n    var O = [];\n    for (var L = 0; L < C.length; L++) {\n        var A = C[L];\n        if (v(A)) {\n            O.push(A)\n        }\n    }\n    })()    '>High一下</a> </li>\n    ```\n\n\n\n#### 4. 添加最近访客\n在需要添加最近访客的网页对应的 markdown 文件中添加如下代码：\n```\n最近访客\n<div class=\"ds-recent-visitors\" data-num-items=\"39\" data-avatar-size=\"40\" id=\"ds-recent-visitors\"></div>\n```\n\n\n#### 5. 鼠标点击小红心的设置\n  1. 将 [love.js](https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/love.js) 文件添加到 `\\themes\\next\\source\\js\\src` 文件目录下。\n  2. 找到 `\\themes\\next\\layout\\_layout.swing` 文件，** 在文件的后面，`</body>`标签之前 ** 添加以下代码：\n  ``` html\n  <!-- 页面点击小红心 -->\n  <script type=\"text/javascript\" src=\"/js/src/love.js\"></script>\n  ```\n\n#### 6. 背景的设置\n  1. 将[particle.js](https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/particle.js)文件添加到`\\themes\\next\\source\\js\\src`文件目录下。\n  2. 找到`\\themes\\next\\layout\\_layout.swing`文件，** 在文件的后面，`</body>`标签之前 ** 添加以下代码：\n  ``` html\n  <!-- 背景动画 -->\n  <script type=\"text/javascript\" src=\"/js/src/particle.js\"></script>\n  ```\n\n#### 7.修改文章内链接文本样式\n将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。\n找到文件 `themes\\next\\source\\css\\_custom\\custom.styl` ，添加如下 `css` 样式：\n``` css\n.post-body p a {\n  color: #0593d3;\n  border-bottom: none;\n  &:hover {\n    color: #0477ab;\n    text-decoration: underline;\n  }\n}\n```\n\n#### 8. 多说评论不稳定，加载速度慢怎么办？\n把多说评论依赖的`embed.js`放置底部，这里需要修改的文件是`duoshuo.swig`。\n将\n```\n(document.getElementsByTagName('head')[0]\n```\n修改成下面的代码\n```\n(document.getElementById('footer')\n```\n\n\n#### 9. 给 Github 添加 README\n默认情况下，Github中每一个项目，我们希望有一份`README.md`的文件来作为项目的说明，但是我们在项目根目录下的`blog\\source`目录下创建一份`README.md`文件，写好说明介绍，部署的时候，这个`README.md`会被hexo解析掉，而不会被解析到Github中去的。\n正确的解决方法其实很简单：\n** 把`README.md`文件的后缀名改成\"MDOWN\"然后扔到`blog/source`文件夹下即可，这样hexo不会解析，Github也会将其作为MD文件解析。 **\n\n#### 10. 给 Blog 添加 LICENSE\n在 <span id=\"inline-purple\">主题配置文件</span> 中的 160 行左右：\n```\n# Creative Commons 4.0 International License.\n# http://creativecommons.org/\n# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero\ncreative_commons: by-nc-sa\n#creative_commons:\n```\n将其中第 4 行的注释放开，然后选择你想使用的 LICENSE 即可，可选项参照第 3 行。\n\n\n\n\n\n","slug":"hexo-next-two","published":1,"updated":"2017-01-17T15:19:34.600Z","layout":"post","photos":[],"link":"","_id":"ciysq4ujq000gugi412wqa3ab","content":"<p>本篇文章将介绍基于NexT主题下的一些扩展功能的实现。<br>首先，我们需要明白：</p>\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n<h4 id=\"1-设置侧栏的位置\"><a href=\"#1-设置侧栏的位置\" class=\"headerlink\" title=\"1.设置侧栏的位置\"></a>1.设置侧栏的位置</h4><p>修改 <span id=\"inline-purple\">主题配置文件</span> 中 <code>sidebar.position</code> 的值，支持的选项有：<code>left</code> <code>right</code><br>目前仅 Pisces Scheme 支持 position 配置，也就是说NexT主题的侧栏位置是不能设置的，设置了也没用，反正都在右边。</p>\n<a id=\"more\"></a>\n<h4 id=\"2-关于添加居中模块\"><a href=\"#2-关于添加居中模块\" class=\"headerlink\" title=\"2. 关于添加居中模块\"></a>2. 关于添加居中模块</h4><p><blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote><br>代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blockquote-center\"</span>&gt;</span>优秀的人，不是不合群，而是他们合群的人里面没有你<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"3-添加High一下\"><a href=\"#3-添加High一下\" class=\"headerlink\" title=\"3. 添加High一下\"></a>3. 添加High一下</h4><p>打开博客根目录 <code>\\themes\\next\\layout\\_partials\\header.swig</code> ，在<br><code>&lt;ul&gt; ... /ul&gt;</code> 标签之间加入以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt; &lt;a title=&quot;把这个链接拖到你的Chrome收藏夹工具栏中&quot; href=&apos;javascript:(function() &#123;</div><div class=\"line\">    function c() &#123;</div><div class=\"line\">        var e = document.createElement(&quot;link&quot;);</div><div class=\"line\">        e.setAttribute(&quot;type&quot;, &quot;text/css&quot;);</div><div class=\"line\">        e.setAttribute(&quot;rel&quot;, &quot;stylesheet&quot;);</div><div class=\"line\">        e.setAttribute(&quot;href&quot;, f);</div><div class=\"line\">        e.setAttribute(&quot;class&quot;, l);</div><div class=\"line\">        document.body.appendChild(e)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function h() &#123;</div><div class=\"line\">        var e = document.getElementsByClassName(l);</div><div class=\"line\">        for (var t = 0; t &lt; e.length; t++) &#123;</div><div class=\"line\">            document.body.removeChild(e[t])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function p() &#123;</div><div class=\"line\">        var e = document.createElement(&quot;div&quot;);</div><div class=\"line\">        e.setAttribute(&quot;class&quot;, a);</div><div class=\"line\">        document.body.appendChild(e);</div><div class=\"line\">        setTimeout(function() &#123;</div><div class=\"line\">            document.body.removeChild(e)</div><div class=\"line\">        &#125;, 100)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function d(e) &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            height : e.offsetHeight,</div><div class=\"line\">            width : e.offsetWidth</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function v(i) &#123;</div><div class=\"line\">        var s = d(i);</div><div class=\"line\">        return s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function m(e) &#123;</div><div class=\"line\">        var t = e;</div><div class=\"line\">        var n = 0;</div><div class=\"line\">        while (!!t) &#123;</div><div class=\"line\">            n += t.offsetTop;</div><div class=\"line\">            t = t.offsetParent</div><div class=\"line\">        &#125;</div><div class=\"line\">        return n</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function g() &#123;</div><div class=\"line\">        var e = document.documentElement;</div><div class=\"line\">        if (!!window.innerWidth) &#123;</div><div class=\"line\">            return window.innerHeight</div><div class=\"line\">        &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123;</div><div class=\"line\">            return e.clientHeight</div><div class=\"line\">        &#125;</div><div class=\"line\">        return 0</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function y() &#123;</div><div class=\"line\">        if (window.pageYOffset) &#123;</div><div class=\"line\">            return window.pageYOffset</div><div class=\"line\">        &#125;</div><div class=\"line\">        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function E(e) &#123;</div><div class=\"line\">        var t = m(e);</div><div class=\"line\">        return t &gt;= w &amp;&amp; t &lt;= b + w</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function S() &#123;</div><div class=\"line\">        var e = document.createElement(&quot;audio&quot;);</div><div class=\"line\">        e.setAttribute(&quot;class&quot;, l);</div><div class=\"line\">        e.src = i;</div><div class=\"line\">        e.loop = false;</div><div class=\"line\">        e.addEventListener(&quot;canplay&quot;, function() &#123;</div><div class=\"line\">            setTimeout(function() &#123;</div><div class=\"line\">                x(k)</div><div class=\"line\">            &#125;, 500);</div><div class=\"line\">            setTimeout(function() &#123;</div><div class=\"line\">                N();</div><div class=\"line\">                p();</div><div class=\"line\">                for (var e = 0; e &lt; O.length; e++) &#123;</div><div class=\"line\">                    T(O[e])</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;, 15500)</div><div class=\"line\">        &#125;, true);</div><div class=\"line\">        e.addEventListener(&quot;ended&quot;, function() &#123;</div><div class=\"line\">            N();</div><div class=\"line\">            h()</div><div class=\"line\">        &#125;, true);</div><div class=\"line\">        e.innerHTML = &quot; &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;&quot;;</div><div class=\"line\">        document.body.appendChild(e);</div><div class=\"line\">        e.play()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function x(e) &#123;</div><div class=\"line\">        e.className += &quot; &quot; + s + &quot; &quot; + o</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function T(e) &#123;</div><div class=\"line\">        e.className += &quot; &quot; + s + &quot; &quot; + u[Math.floor(Math.random() * u.length)]</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function N() &#123;</div><div class=\"line\">        var e = document.getElementsByClassName(s);</div><div class=\"line\">        var t = new RegExp(&quot;\\\\b&quot; + s + &quot;\\\\b&quot;);</div><div class=\"line\">        for (var n = 0; n &lt; e.length; ) &#123;</div><div class=\"line\">            e[n].className = e[n].className.replace(t, &quot;&quot;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var e = 30;</div><div class=\"line\">    var t = 30;</div><div class=\"line\">    var n = 350;</div><div class=\"line\">    var r = 350;</div><div class=\"line\">    var i = &quot;//7xuupy.com1.z0.glb.clouddn.com/tongxingSibel%20-%20Im%20Sorry.mp3&quot;;</div><div class=\"line\">    var s = &quot;mw-harlem_shake_me&quot;;</div><div class=\"line\">    var o = &quot;im_first&quot;;</div><div class=\"line\">    var u = [&quot;im_drunk&quot;, &quot;im_baked&quot;, &quot;im_trippin&quot;, &quot;im_blown&quot;];</div><div class=\"line\">    var a = &quot;mw-strobe_light&quot;;</div><div class=\"line\">    var f = &quot;//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css&quot;;</div><div class=\"line\">    var l = &quot;mw_added_css&quot;;</div><div class=\"line\">    var b = g();</div><div class=\"line\">    var w = y();</div><div class=\"line\">    var C = document.getElementsByTagName(&quot;*&quot;);</div><div class=\"line\">    var k = null;</div><div class=\"line\">    for (var L = 0; L &lt; C.length; L++) &#123;</div><div class=\"line\">        var A = C[L];</div><div class=\"line\">        if (v(A)) &#123;</div><div class=\"line\">            if (E(A)) &#123;</div><div class=\"line\">                k = A;</div><div class=\"line\">                break</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (A === null) &#123;</div><div class=\"line\">        console.warn(&quot;Could not find a node of the right size. Please try a different page.&quot;);</div><div class=\"line\">        return</div><div class=\"line\">    &#125;</div><div class=\"line\">    c();</div><div class=\"line\">    S();</div><div class=\"line\">    var O = [];</div><div class=\"line\">    for (var L = 0; L &lt; C.length; L++) &#123;</div><div class=\"line\">        var A = C[L];</div><div class=\"line\">        if (v(A)) &#123;</div><div class=\"line\">            O.push(A)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;)()    &apos;&gt;High一下&lt;/a&gt; &lt;/li&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-添加最近访客\"><a href=\"#4-添加最近访客\" class=\"headerlink\" title=\"4. 添加最近访客\"></a>4. 添加最近访客</h4><p>在需要添加最近访客的网页对应的 markdown 文件中添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">最近访客</div><div class=\"line\">&lt;div class=&quot;ds-recent-visitors&quot; data-num-items=&quot;39&quot; data-avatar-size=&quot;40&quot; id=&quot;ds-recent-visitors&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"5-鼠标点击小红心的设置\"><a href=\"#5-鼠标点击小红心的设置\" class=\"headerlink\" title=\"5. 鼠标点击小红心的设置\"></a>5. 鼠标点击小红心的设置</h4><ol>\n<li>将 <a href=\"https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/love.js\" target=\"_blank\" rel=\"external\">love.js</a> 文件添加到 <code>\\themes\\next\\source\\js\\src</code> 文件目录下。</li>\n<li>找到 <code>\\themes\\next\\layout\\_layout.swing</code> 文件，<strong> 在文件的后面，<code>&lt;/body&gt;</code>标签之前 </strong> 添加以下代码：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 页面点击小红心 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/love.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"6-背景的设置\"><a href=\"#6-背景的设置\" class=\"headerlink\" title=\"6. 背景的设置\"></a>6. 背景的设置</h4><ol>\n<li>将<a href=\"https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/particle.js\" target=\"_blank\" rel=\"external\">particle.js</a>文件添加到<code>\\themes\\next\\source\\js\\src</code>文件目录下。</li>\n<li>找到<code>\\themes\\next\\layout\\_layout.swing</code>文件，<strong> 在文件的后面，<code>&lt;/body&gt;</code>标签之前 </strong> 添加以下代码：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 背景动画 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/particle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"7-修改文章内链接文本样式\"><a href=\"#7-修改文章内链接文本样式\" class=\"headerlink\" title=\"7.修改文章内链接文本样式\"></a>7.修改文章内链接文本样式</h4><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。<br>找到文件 <code>themes\\next\\source\\css\\_custom\\custom.styl</code> ，添加如下 <code>css</code> 样式：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.post-body p a &#123;</div><div class=\"line\">  color: #0593d3;</div><div class=\"line\">  border-bottom: none;</div><div class=\"line\">  &amp;:hover &#123;</div><div class=\"line\">    color: #0477ab;</div><div class=\"line\">    text-decoration: underline;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"8-多说评论不稳定，加载速度慢怎么办？\"><a href=\"#8-多说评论不稳定，加载速度慢怎么办？\" class=\"headerlink\" title=\"8. 多说评论不稳定，加载速度慢怎么办？\"></a>8. 多说评论不稳定，加载速度慢怎么办？</h4><p>把多说评论依赖的<code>embed.js</code>放置底部，这里需要修改的文件是<code>duoshuo.swig</code>。<br>将<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(document.getElementsByTagName(&apos;head&apos;)[0]</div></pre></td></tr></table></figure></p>\n<p>修改成下面的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(document.getElementById(&apos;footer&apos;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"9-给-Github-添加-README\"><a href=\"#9-给-Github-添加-README\" class=\"headerlink\" title=\"9. 给 Github 添加 README\"></a>9. 给 Github 添加 README</h4><p>默认情况下，Github中每一个项目，我们希望有一份<code>README.md</code>的文件来作为项目的说明，但是我们在项目根目录下的<code>blog\\source</code>目录下创建一份<code>README.md</code>文件，写好说明介绍，部署的时候，这个<code>README.md</code>会被hexo解析掉，而不会被解析到Github中去的。<br>正确的解决方法其实很简单：<br><strong> 把<code>README.md</code>文件的后缀名改成”MDOWN”然后扔到<code>blog/source</code>文件夹下即可，这样hexo不会解析，Github也会将其作为MD文件解析。 </strong></p>\n<h4 id=\"10-给-Blog-添加-LICENSE\"><a href=\"#10-给-Blog-添加-LICENSE\" class=\"headerlink\" title=\"10. 给 Blog 添加 LICENSE\"></a>10. 给 Blog 添加 LICENSE</h4><p>在 <span id=\"inline-purple\">主题配置文件</span> 中的 160 行左右：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Creative Commons 4.0 International License.</div><div class=\"line\"># http://creativecommons.org/</div><div class=\"line\"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</div><div class=\"line\">creative_commons: by-nc-sa</div><div class=\"line\">#creative_commons:</div></pre></td></tr></table></figure></p>\n<p>将其中第 4 行的注释放开，然后选择你想使用的 LICENSE 即可，可选项参照第 3 行。</p>\n","excerpt":"<p>本篇文章将介绍基于NexT主题下的一些扩展功能的实现。<br>首先，我们需要明白：</p>\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n<h4 id=\"1-设置侧栏的位置\"><a href=\"#1-设置侧栏的位置\" class=\"headerlink\" title=\"1.设置侧栏的位置\"></a>1.设置侧栏的位置</h4><p>修改 <span id=\"inline-purple\">主题配置文件</span> 中 <code>sidebar.position</code> 的值，支持的选项有：<code>left</code> <code>right</code><br>目前仅 Pisces Scheme 支持 position 配置，也就是说NexT主题的侧栏位置是不能设置的，设置了也没用，反正都在右边。</p>","more":"<h4 id=\"2-关于添加居中模块\"><a href=\"#2-关于添加居中模块\" class=\"headerlink\" title=\"2. 关于添加居中模块\"></a>2. 关于添加居中模块</h4><p><blockquote class=\"blockquote-center\">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote><br>代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">blockquote</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blockquote-center\"</span>&gt;</span>优秀的人，不是不合群，而是他们合群的人里面没有你<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"3-添加High一下\"><a href=\"#3-添加High一下\" class=\"headerlink\" title=\"3. 添加High一下\"></a>3. 添加High一下</h4><p>打开博客根目录 <code>\\themes\\next\\layout\\_partials\\header.swig</code> ，在<br><code>&lt;ul&gt; ... /ul&gt;</code> 标签之间加入以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li&gt; &lt;a title=&quot;把这个链接拖到你的Chrome收藏夹工具栏中&quot; href=&apos;javascript:(function() &#123;</div><div class=\"line\">    function c() &#123;</div><div class=\"line\">        var e = document.createElement(&quot;link&quot;);</div><div class=\"line\">        e.setAttribute(&quot;type&quot;, &quot;text/css&quot;);</div><div class=\"line\">        e.setAttribute(&quot;rel&quot;, &quot;stylesheet&quot;);</div><div class=\"line\">        e.setAttribute(&quot;href&quot;, f);</div><div class=\"line\">        e.setAttribute(&quot;class&quot;, l);</div><div class=\"line\">        document.body.appendChild(e)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function h() &#123;</div><div class=\"line\">        var e = document.getElementsByClassName(l);</div><div class=\"line\">        for (var t = 0; t &lt; e.length; t++) &#123;</div><div class=\"line\">            document.body.removeChild(e[t])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function p() &#123;</div><div class=\"line\">        var e = document.createElement(&quot;div&quot;);</div><div class=\"line\">        e.setAttribute(&quot;class&quot;, a);</div><div class=\"line\">        document.body.appendChild(e);</div><div class=\"line\">        setTimeout(function() &#123;</div><div class=\"line\">            document.body.removeChild(e)</div><div class=\"line\">        &#125;, 100)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function d(e) &#123;</div><div class=\"line\">        return &#123;</div><div class=\"line\">            height : e.offsetHeight,</div><div class=\"line\">            width : e.offsetWidth</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function v(i) &#123;</div><div class=\"line\">        var s = d(i);</div><div class=\"line\">        return s.height &gt; e &amp;&amp; s.height &lt; n &amp;&amp; s.width &gt; t &amp;&amp; s.width &lt; r</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function m(e) &#123;</div><div class=\"line\">        var t = e;</div><div class=\"line\">        var n = 0;</div><div class=\"line\">        while (!!t) &#123;</div><div class=\"line\">            n += t.offsetTop;</div><div class=\"line\">            t = t.offsetParent</div><div class=\"line\">        &#125;</div><div class=\"line\">        return n</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function g() &#123;</div><div class=\"line\">        var e = document.documentElement;</div><div class=\"line\">        if (!!window.innerWidth) &#123;</div><div class=\"line\">            return window.innerHeight</div><div class=\"line\">        &#125; else if (e &amp;&amp; !isNaN(e.clientHeight)) &#123;</div><div class=\"line\">            return e.clientHeight</div><div class=\"line\">        &#125;</div><div class=\"line\">        return 0</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function y() &#123;</div><div class=\"line\">        if (window.pageYOffset) &#123;</div><div class=\"line\">            return window.pageYOffset</div><div class=\"line\">        &#125;</div><div class=\"line\">        return Math.max(document.documentElement.scrollTop, document.body.scrollTop)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function E(e) &#123;</div><div class=\"line\">        var t = m(e);</div><div class=\"line\">        return t &gt;= w &amp;&amp; t &lt;= b + w</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function S() &#123;</div><div class=\"line\">        var e = document.createElement(&quot;audio&quot;);</div><div class=\"line\">        e.setAttribute(&quot;class&quot;, l);</div><div class=\"line\">        e.src = i;</div><div class=\"line\">        e.loop = false;</div><div class=\"line\">        e.addEventListener(&quot;canplay&quot;, function() &#123;</div><div class=\"line\">            setTimeout(function() &#123;</div><div class=\"line\">                x(k)</div><div class=\"line\">            &#125;, 500);</div><div class=\"line\">            setTimeout(function() &#123;</div><div class=\"line\">                N();</div><div class=\"line\">                p();</div><div class=\"line\">                for (var e = 0; e &lt; O.length; e++) &#123;</div><div class=\"line\">                    T(O[e])</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;, 15500)</div><div class=\"line\">        &#125;, true);</div><div class=\"line\">        e.addEventListener(&quot;ended&quot;, function() &#123;</div><div class=\"line\">            N();</div><div class=\"line\">            h()</div><div class=\"line\">        &#125;, true);</div><div class=\"line\">        e.innerHTML = &quot; &lt;p&gt;If you are reading this, it is because your browser does not support the audio element. We recommend that you get a new browser.&lt;/p&gt; &lt;p&gt;&quot;;</div><div class=\"line\">        document.body.appendChild(e);</div><div class=\"line\">        e.play()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function x(e) &#123;</div><div class=\"line\">        e.className += &quot; &quot; + s + &quot; &quot; + o</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function T(e) &#123;</div><div class=\"line\">        e.className += &quot; &quot; + s + &quot; &quot; + u[Math.floor(Math.random() * u.length)]</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    function N() &#123;</div><div class=\"line\">        var e = document.getElementsByClassName(s);</div><div class=\"line\">        var t = new RegExp(&quot;\\\\b&quot; + s + &quot;\\\\b&quot;);</div><div class=\"line\">        for (var n = 0; n &lt; e.length; ) &#123;</div><div class=\"line\">            e[n].className = e[n].className.replace(t, &quot;&quot;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var e = 30;</div><div class=\"line\">    var t = 30;</div><div class=\"line\">    var n = 350;</div><div class=\"line\">    var r = 350;</div><div class=\"line\">    var i = &quot;//7xuupy.com1.z0.glb.clouddn.com/tongxingSibel%20-%20Im%20Sorry.mp3&quot;;</div><div class=\"line\">    var s = &quot;mw-harlem_shake_me&quot;;</div><div class=\"line\">    var o = &quot;im_first&quot;;</div><div class=\"line\">    var u = [&quot;im_drunk&quot;, &quot;im_baked&quot;, &quot;im_trippin&quot;, &quot;im_blown&quot;];</div><div class=\"line\">    var a = &quot;mw-strobe_light&quot;;</div><div class=\"line\">    var f = &quot;//s3.amazonaws.com/moovweb-marketing/playground/harlem-shake-style.css&quot;;</div><div class=\"line\">    var l = &quot;mw_added_css&quot;;</div><div class=\"line\">    var b = g();</div><div class=\"line\">    var w = y();</div><div class=\"line\">    var C = document.getElementsByTagName(&quot;*&quot;);</div><div class=\"line\">    var k = null;</div><div class=\"line\">    for (var L = 0; L &lt; C.length; L++) &#123;</div><div class=\"line\">        var A = C[L];</div><div class=\"line\">        if (v(A)) &#123;</div><div class=\"line\">            if (E(A)) &#123;</div><div class=\"line\">                k = A;</div><div class=\"line\">                break</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (A === null) &#123;</div><div class=\"line\">        console.warn(&quot;Could not find a node of the right size. Please try a different page.&quot;);</div><div class=\"line\">        return</div><div class=\"line\">    &#125;</div><div class=\"line\">    c();</div><div class=\"line\">    S();</div><div class=\"line\">    var O = [];</div><div class=\"line\">    for (var L = 0; L &lt; C.length; L++) &#123;</div><div class=\"line\">        var A = C[L];</div><div class=\"line\">        if (v(A)) &#123;</div><div class=\"line\">            O.push(A)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;)()    &apos;&gt;High一下&lt;/a&gt; &lt;/li&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-添加最近访客\"><a href=\"#4-添加最近访客\" class=\"headerlink\" title=\"4. 添加最近访客\"></a>4. 添加最近访客</h4><p>在需要添加最近访客的网页对应的 markdown 文件中添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">最近访客</div><div class=\"line\">&lt;div class=&quot;ds-recent-visitors&quot; data-num-items=&quot;39&quot; data-avatar-size=&quot;40&quot; id=&quot;ds-recent-visitors&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"5-鼠标点击小红心的设置\"><a href=\"#5-鼠标点击小红心的设置\" class=\"headerlink\" title=\"5. 鼠标点击小红心的设置\"></a>5. 鼠标点击小红心的设置</h4><ol>\n<li>将 <a href=\"https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/love.js\">love.js</a> 文件添加到 <code>\\themes\\next\\source\\js\\src</code> 文件目录下。</li>\n<li>找到 <code>\\themes\\next\\layout\\_layout.swing</code> 文件，<strong> 在文件的后面，<code>&lt;/body&gt;</code>标签之前 </strong> 添加以下代码：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 页面点击小红心 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/love.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"6-背景的设置\"><a href=\"#6-背景的设置\" class=\"headerlink\" title=\"6. 背景的设置\"></a>6. 背景的设置</h4><ol>\n<li>将<a href=\"https://github.com/Neveryu/Neveryu.github.io/blob/master/js/src/particle.js\">particle.js</a>文件添加到<code>\\themes\\next\\source\\js\\src</code>文件目录下。</li>\n<li>找到<code>\\themes\\next\\layout\\_layout.swing</code>文件，<strong> 在文件的后面，<code>&lt;/body&gt;</code>标签之前 </strong> 添加以下代码：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 背景动画 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/src/particle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"7-修改文章内链接文本样式\"><a href=\"#7-修改文章内链接文本样式\" class=\"headerlink\" title=\"7.修改文章内链接文本样式\"></a>7.修改文章内链接文本样式</h4><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。<br>找到文件 <code>themes\\next\\source\\css\\_custom\\custom.styl</code> ，添加如下 <code>css</code> 样式：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.post-body p a &#123;</div><div class=\"line\">  color: #0593d3;</div><div class=\"line\">  border-bottom: none;</div><div class=\"line\">  &amp;:hover &#123;</div><div class=\"line\">    color: #0477ab;</div><div class=\"line\">    text-decoration: underline;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"8-多说评论不稳定，加载速度慢怎么办？\"><a href=\"#8-多说评论不稳定，加载速度慢怎么办？\" class=\"headerlink\" title=\"8. 多说评论不稳定，加载速度慢怎么办？\"></a>8. 多说评论不稳定，加载速度慢怎么办？</h4><p>把多说评论依赖的<code>embed.js</code>放置底部，这里需要修改的文件是<code>duoshuo.swig</code>。<br>将<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(document.getElementsByTagName(&apos;head&apos;)[0]</div></pre></td></tr></table></figure></p>\n<p>修改成下面的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(document.getElementById(&apos;footer&apos;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"9-给-Github-添加-README\"><a href=\"#9-给-Github-添加-README\" class=\"headerlink\" title=\"9. 给 Github 添加 README\"></a>9. 给 Github 添加 README</h4><p>默认情况下，Github中每一个项目，我们希望有一份<code>README.md</code>的文件来作为项目的说明，但是我们在项目根目录下的<code>blog\\source</code>目录下创建一份<code>README.md</code>文件，写好说明介绍，部署的时候，这个<code>README.md</code>会被hexo解析掉，而不会被解析到Github中去的。<br>正确的解决方法其实很简单：<br><strong> 把<code>README.md</code>文件的后缀名改成”MDOWN”然后扔到<code>blog/source</code>文件夹下即可，这样hexo不会解析，Github也会将其作为MD文件解析。 </strong></p>\n<h4 id=\"10-给-Blog-添加-LICENSE\"><a href=\"#10-给-Blog-添加-LICENSE\" class=\"headerlink\" title=\"10. 给 Blog 添加 LICENSE\"></a>10. 给 Blog 添加 LICENSE</h4><p>在 <span id=\"inline-purple\">主题配置文件</span> 中的 160 行左右：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Creative Commons 4.0 International License.</div><div class=\"line\"># http://creativecommons.org/</div><div class=\"line\"># Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</div><div class=\"line\">creative_commons: by-nc-sa</div><div class=\"line\">#creative_commons:</div></pre></td></tr></table></figure></p>\n<p>将其中第 4 行的注释放开，然后选择你想使用的 LICENSE 即可，可选项参照第 3 行。</p>"},{"title":"Hexo-NexT搭建个人博客（一）","date":"2016-09-03T05:25:24.000Z","comments":0,"_content":"[Hexo](https://hexo.io/zh-cn/) 是一个快速、简洁且高效的静态站点生成框架，它基于 [Node.js](https://nodejs.org/en/) 。 它有以下特点：\n\n- <i class=\"fa fa-bolt\"></i><h6 style=\"display: inline;\">　超快速度</h6>\n<i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i>\n- <i class=\"fa fa-pencil\"></i><h6 style=\"display: inline;\">　支持Markdown</h6>\n<i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i>\n- <i class=\"fa fa-cloud-upload\"></i><h6 style=\"display: inline;\">　一件部署</h6>\n<i>只需一条指令即可部署到Github Pages，或其他网站</i>\n- <i class=\"fa fa-cog\"></i><h6 style=\"display: inline;\">　丰富的插件</h6>\n<i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i>\n\n通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 [标签插件](https://hexo.io/zh-cn/docs/tag-plugins.html) 来快速的插入特定形式的内容。\n\n基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的[主题](https://hexo.io/themes/)。\n[NexT](http://theme-next.iissnan.com/) 因其 <span id=\"yu-1\">精于心，简于形</span> 的风格，一直被广大用户所喜爱。\n\n<!-- more -->\n\n## 安装\n安装 Hexo 只需几分钟时间，若你在安装过程中遇到问题或无法找到解决方式，请[提交问题](https://neveryu.github.io/guestbook/)，我会尽力解决你的问题。\n### 安装前提\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序:\n\n> [Node.js](https://nodejs.org/en/)\n> [Git](http://git-scm.com/)\n\n如果您的电脑中已经安装上述必备程序，那么恭喜你！接下来只需要使用 npm 即可完成 Hexo 的安装。\n``` bash \n$ npm install -g hexo-cli\n```\n如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n### 安装 Git\n* Windows：下载安装 git 。<a id=\"download\" href=\"https://git-scm.com/download/win\"><i class=\"fa fa-download\"></i><span> Download Now</span>\n</a>\n* Mac：使用 [Homebrew](http://mxcl.github.com/homebrew/)，[MacPorts](http://www.macports.org/) 或下载 [安装程序](http://sourceforge.net/projects/git-osx-installer/) 安装\n* Linux（Ubuntu，Debian）：`sudo apt-get install git-core`\n* Linux（Fedora，Red Hat，CentOS）：`sudo yum install git-core`\n\n### 安装 Node.js\n安装 Node.js 的最佳方式是使用 [nvm](https://github.com/creationix/nvm)。（nvm：Node Version Manager）\nwindows 下使用 nvm 请看这里： [nvm-windows](https://github.com/coreybutler/nvm-windows) ，首先需要下载安装 nvm 。<a id=\"download\" href=\"https://github.com/coreybutler/nvm-windows/releases\"><i class=\"fa fa-download\"></i><span> Download Now</span>\n</a> \nwindows下安装完nvm以后，我们可以打开命令行中执行命令\n``` bash\n$ nvm\n$ nvm install latest\n```\n执行完以后，重启命令行，执行命令 `node -v` ，如果出现版本号，那么 `Node.js` 就安装成功了。\n\n<p id=\"div-border-left-red\">如果没有安装成功，那可能就是墙的原因。建议下载 `Node.js` 直接安装。<a id=\"download\" href=\"https://nodejs.org/en/download/\"><i class=\"fa fa-download\"></i><span> Download Now</span>\n</a> </p>\n\n\n\n### 安装 Hexo\n有了 Node.js ，我们可以使用 npm 安装 Hexo。\n``` bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，我们首先需要为我们的项目创建一个<span id=\"inline-green\">指定文件夹</span>（例如我在 D 盘目录下创建了一个文件夹 blog 。`D:\\blog` ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。\n``` bash\n$ hexo init\n```\n等待安装，安装完成后，<span id=\"inline-green\">指定文件夹</span> 的目录如下：\n``` \n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└──\n```\n\n我们继续执行命令\n``` bash\n$ hexo g\n$ hexo s --debug\n```\nHexo 将 `source` 文件夹中除 `_posts` 文件夹之外，开头命名为 `_`（下划线）的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 `public` 文件夹，而其他文件夹会被拷贝过去。\n这个时候，我们在浏览器中访问 `http://localhost:4000/` ，就可以看到基于 Hexo 的默认主题的原型：\n![hexo-next-one-1](http://p1.bqimg.com/567571/27324b740c9e91e2.png)\n\n\n安装 NexT 主题\n==\n\n#### 下载 NexT 主题\n\n依旧是在当前目录下，使用 Git checkout 代码：\n``` bash\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n等待下载完成。\n\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n#### 启用 NexT 主题\n打开 <span id=\"inline-blue\">站点配置文件</span> ，找到 `theme` 字段，并将其值更改为 `next` 。\n到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 `hexo clean` 来清除 Hexo 的缓存。\n\n#### 验证主题\n首先启动 Hexo 本地站点，并开启调试模式（即加上 `--debug`），整个命令是 `hexo s --debug`。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：\n`INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.`\n此时即可使用浏览器访问 `http://localhost:4000/` ，检查站点是否正确运行。\n<p id=\"div-border-left-green\">当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p>\n![hexo-next-one-1](http://p1.bqimg.com/567571/8333728b5eaab526.png)\n现在，我们已经成功安装并启用了 NexT 主题。\n\n<p id=\"div-border-top-blue\">关于更多基本操作和基础知识，请查阅 [Hexo](https://hexo.io/zh-cn/) 与 [NexT](http://theme-next.iissnan.com/) 官方文档.</p>\n\n\n### 总结：本地调试步骤\n三部曲：\n``` bash\n$ hexo clean\n$ hexo g\n$ hexo s --debug\n```\n这种带debug的运行，如果出现错误，可以在命令行中看到错误提示信息。\n\n### 总结：部署步骤\n三部曲：\n``` bash\n$ hexo clean\n$ hexo g\n$ hexo d\n```\n当然在部署之前，需要先配置好配置文件中的deploy。\n\n\n### 常用命令\n``` bash\n$ hexo new \"postName\"  #新建文章\n$ hexo new page \"pageName\" # 新建页面\n$ hexo generate # 生成静态页面至public目录\n$ hexo server # 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)\n$ hexo deploy # 项目部署\n$ hexo help # 查看帮助\n$ hexo version # 查看Hexo的版本\n```\n\n### 简写命令\n``` bash\n$ hexo new == hexo n\n$ hexo generate == hexo g\n$ hexo server == hexo s\n$ hexo deploy == hexo d\n```\n\n\n### 常见问题1\n在hexo的配置和设置文件中，在冒号后面没留空格会导致出问题：\n错误的设置：\n```\nauthor:Neveryu\nemail:react.dong.yu@gmail.com\nlanguage:zh-CN\n```\n正确的设置：\n```\nauthor: Neveryu\nemail: react.dong.yu@gmail.com\nlanguage: zh-CN\n```\n\n### 常见问题2\n关于Git提交中用户名和Email的设置\n```\ngit config --global user.name \"Your name\"\ngit config --global user.email \"Your email\"\n```\n\n### 常见问题3\n\nHexo 中的图标使用的是 [Font Awesome](http://fontawesome.io/) ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。\n<i class=\"fa fa-github\"></i> `<i class=\"fa fa-github\"></i>`\n<i class=\"fa fa-github fa-lg\"></i> `<i class=\"fa fa-github fa-lg\"></i>`\n<i class=\"fa fa-github fa-2x\"></i> `<i class=\"fa fa-github fa-2x\"></i>`\n\n\n","source":"_posts/hexo-next-one.md","raw":"---\ntitle: Hexo-NexT搭建个人博客（一）\ndate: 2016-09-03 13:25:24\ncategories: 综合\ntags: [Hexo,Next]\ncomments: false\n---\n[Hexo](https://hexo.io/zh-cn/) 是一个快速、简洁且高效的静态站点生成框架，它基于 [Node.js](https://nodejs.org/en/) 。 它有以下特点：\n\n- <i class=\"fa fa-bolt\"></i><h6 style=\"display: inline;\">　超快速度</h6>\n<i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i>\n- <i class=\"fa fa-pencil\"></i><h6 style=\"display: inline;\">　支持Markdown</h6>\n<i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i>\n- <i class=\"fa fa-cloud-upload\"></i><h6 style=\"display: inline;\">　一件部署</h6>\n<i>只需一条指令即可部署到Github Pages，或其他网站</i>\n- <i class=\"fa fa-cog\"></i><h6 style=\"display: inline;\">　丰富的插件</h6>\n<i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i>\n\n通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 [标签插件](https://hexo.io/zh-cn/docs/tag-plugins.html) 来快速的插入特定形式的内容。\n\n基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的[主题](https://hexo.io/themes/)。\n[NexT](http://theme-next.iissnan.com/) 因其 <span id=\"yu-1\">精于心，简于形</span> 的风格，一直被广大用户所喜爱。\n\n<!-- more -->\n\n## 安装\n安装 Hexo 只需几分钟时间，若你在安装过程中遇到问题或无法找到解决方式，请[提交问题](https://neveryu.github.io/guestbook/)，我会尽力解决你的问题。\n### 安装前提\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序:\n\n> [Node.js](https://nodejs.org/en/)\n> [Git](http://git-scm.com/)\n\n如果您的电脑中已经安装上述必备程序，那么恭喜你！接下来只需要使用 npm 即可完成 Hexo 的安装。\n``` bash \n$ npm install -g hexo-cli\n```\n如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n### 安装 Git\n* Windows：下载安装 git 。<a id=\"download\" href=\"https://git-scm.com/download/win\"><i class=\"fa fa-download\"></i><span> Download Now</span>\n</a>\n* Mac：使用 [Homebrew](http://mxcl.github.com/homebrew/)，[MacPorts](http://www.macports.org/) 或下载 [安装程序](http://sourceforge.net/projects/git-osx-installer/) 安装\n* Linux（Ubuntu，Debian）：`sudo apt-get install git-core`\n* Linux（Fedora，Red Hat，CentOS）：`sudo yum install git-core`\n\n### 安装 Node.js\n安装 Node.js 的最佳方式是使用 [nvm](https://github.com/creationix/nvm)。（nvm：Node Version Manager）\nwindows 下使用 nvm 请看这里： [nvm-windows](https://github.com/coreybutler/nvm-windows) ，首先需要下载安装 nvm 。<a id=\"download\" href=\"https://github.com/coreybutler/nvm-windows/releases\"><i class=\"fa fa-download\"></i><span> Download Now</span>\n</a> \nwindows下安装完nvm以后，我们可以打开命令行中执行命令\n``` bash\n$ nvm\n$ nvm install latest\n```\n执行完以后，重启命令行，执行命令 `node -v` ，如果出现版本号，那么 `Node.js` 就安装成功了。\n\n<p id=\"div-border-left-red\">如果没有安装成功，那可能就是墙的原因。建议下载 `Node.js` 直接安装。<a id=\"download\" href=\"https://nodejs.org/en/download/\"><i class=\"fa fa-download\"></i><span> Download Now</span>\n</a> </p>\n\n\n\n### 安装 Hexo\n有了 Node.js ，我们可以使用 npm 安装 Hexo。\n``` bash\n$ npm install -g hexo-cli\n```\n安装 Hexo 完成后，我们首先需要为我们的项目创建一个<span id=\"inline-green\">指定文件夹</span>（例如我在 D 盘目录下创建了一个文件夹 blog 。`D:\\blog` ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。\n``` bash\n$ hexo init\n```\n等待安装，安装完成后，<span id=\"inline-green\">指定文件夹</span> 的目录如下：\n``` \n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└──\n```\n\n我们继续执行命令\n``` bash\n$ hexo g\n$ hexo s --debug\n```\nHexo 将 `source` 文件夹中除 `_posts` 文件夹之外，开头命名为 `_`（下划线）的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 `public` 文件夹，而其他文件夹会被拷贝过去。\n这个时候，我们在浏览器中访问 `http://localhost:4000/` ，就可以看到基于 Hexo 的默认主题的原型：\n![hexo-next-one-1](http://p1.bqimg.com/567571/27324b740c9e91e2.png)\n\n\n安装 NexT 主题\n==\n\n#### 下载 NexT 主题\n\n依旧是在当前目录下，使用 Git checkout 代码：\n``` bash\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n等待下载完成。\n\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n#### 启用 NexT 主题\n打开 <span id=\"inline-blue\">站点配置文件</span> ，找到 `theme` 字段，并将其值更改为 `next` 。\n到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 `hexo clean` 来清除 Hexo 的缓存。\n\n#### 验证主题\n首先启动 Hexo 本地站点，并开启调试模式（即加上 `--debug`），整个命令是 `hexo s --debug`。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：\n`INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.`\n此时即可使用浏览器访问 `http://localhost:4000/` ，检查站点是否正确运行。\n<p id=\"div-border-left-green\">当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p>\n![hexo-next-one-1](http://p1.bqimg.com/567571/8333728b5eaab526.png)\n现在，我们已经成功安装并启用了 NexT 主题。\n\n<p id=\"div-border-top-blue\">关于更多基本操作和基础知识，请查阅 [Hexo](https://hexo.io/zh-cn/) 与 [NexT](http://theme-next.iissnan.com/) 官方文档.</p>\n\n\n### 总结：本地调试步骤\n三部曲：\n``` bash\n$ hexo clean\n$ hexo g\n$ hexo s --debug\n```\n这种带debug的运行，如果出现错误，可以在命令行中看到错误提示信息。\n\n### 总结：部署步骤\n三部曲：\n``` bash\n$ hexo clean\n$ hexo g\n$ hexo d\n```\n当然在部署之前，需要先配置好配置文件中的deploy。\n\n\n### 常用命令\n``` bash\n$ hexo new \"postName\"  #新建文章\n$ hexo new page \"pageName\" # 新建页面\n$ hexo generate # 生成静态页面至public目录\n$ hexo server # 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)\n$ hexo deploy # 项目部署\n$ hexo help # 查看帮助\n$ hexo version # 查看Hexo的版本\n```\n\n### 简写命令\n``` bash\n$ hexo new == hexo n\n$ hexo generate == hexo g\n$ hexo server == hexo s\n$ hexo deploy == hexo d\n```\n\n\n### 常见问题1\n在hexo的配置和设置文件中，在冒号后面没留空格会导致出问题：\n错误的设置：\n```\nauthor:Neveryu\nemail:react.dong.yu@gmail.com\nlanguage:zh-CN\n```\n正确的设置：\n```\nauthor: Neveryu\nemail: react.dong.yu@gmail.com\nlanguage: zh-CN\n```\n\n### 常见问题2\n关于Git提交中用户名和Email的设置\n```\ngit config --global user.name \"Your name\"\ngit config --global user.email \"Your email\"\n```\n\n### 常见问题3\n\nHexo 中的图标使用的是 [Font Awesome](http://fontawesome.io/) ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。\n<i class=\"fa fa-github\"></i> `<i class=\"fa fa-github\"></i>`\n<i class=\"fa fa-github fa-lg\"></i> `<i class=\"fa fa-github fa-lg\"></i>`\n<i class=\"fa fa-github fa-2x\"></i> `<i class=\"fa fa-github fa-2x\"></i>`\n\n\n","slug":"hexo-next-one","published":1,"updated":"2017-01-17T15:19:34.597Z","layout":"post","photos":[],"link":"","_id":"ciysq4uk1000iugi4y5u8plgv","content":"<p><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">Hexo</a> 是一个快速、简洁且高效的静态站点生成框架，它基于 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a> 。 它有以下特点：</p>\n<ul>\n<li><i class=\"fa fa-bolt\"></i><h6 style=\"display: inline;\">　超快速度</h6><br><i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i></li>\n<li><i class=\"fa fa-pencil\"></i><h6 style=\"display: inline;\">　支持Markdown</h6><br><i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i></li>\n<li><i class=\"fa fa-cloud-upload\"></i><h6 style=\"display: inline;\">　一件部署</h6><br><i>只需一条指令即可部署到Github Pages，或其他网站</i></li>\n<li><i class=\"fa fa-cog\"></i><h6 style=\"display: inline;\">　丰富的插件</h6><br><i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i></li>\n</ul>\n<p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\" target=\"_blank\" rel=\"external\">标签插件</a> 来快速的插入特定形式的内容。</p>\n<p>基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">主题</a>。<br><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">NexT</a> 因其 <span id=\"yu-1\">精于心，简于形</span> 的风格，一直被广大用户所喜爱。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装 Hexo 只需几分钟时间，若你在安装过程中遇到问题或无法找到解决方式，请<a href=\"https://neveryu.github.io/guestbook/\">提交问题</a>，我会尽力解决你的问题。</p>\n<h3 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序:</p>\n<blockquote>\n<p><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a><br><a href=\"http://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a></p>\n</blockquote>\n<p>如果您的电脑中已经安装上述必备程序，那么恭喜你！接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><ul>\n<li>Windows：下载安装 git 。<a id=\"download\" href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"external\"><i class=\"fa fa-download\"></i><span> Download Now</span><br></a></li>\n<li>Mac：使用 <a href=\"http://mxcl.github.com/homebrew/\" target=\"_blank\" rel=\"external\">Homebrew</a>，<a href=\"http://www.macports.org/\" target=\"_blank\" rel=\"external\">MacPorts</a> 或下载 <a href=\"http://sourceforge.net/projects/git-osx-installer/\" target=\"_blank\" rel=\"external\">安装程序</a> 安装</li>\n<li>Linux（Ubuntu，Debian）：<code>sudo apt-get install git-core</code></li>\n<li>Linux（Fedora，Red Hat，CentOS）：<code>sudo yum install git-core</code></li>\n</ul>\n<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><p>安装 Node.js 的最佳方式是使用 <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">nvm</a>。（nvm：Node Version Manager）<br>windows 下使用 nvm 请看这里： <a href=\"https://github.com/coreybutler/nvm-windows\" target=\"_blank\" rel=\"external\">nvm-windows</a> ，首先需要下载安装 nvm 。<a id=\"download\" href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"external\"><i class=\"fa fa-download\"></i><span> Download Now</span><br></a><br>windows下安装完nvm以后，我们可以打开命令行中执行命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm</div><div class=\"line\">$ nvm install latest</div></pre></td></tr></table></figure></p>\n<p>执行完以后，重启命令行，执行命令 <code>node -v</code> ，如果出现版本号，那么 <code>Node.js</code> 就安装成功了。</p>\n<p id=\"div-border-left-red\">如果没有安装成功，那可能就是墙的原因。建议下载 <code>Node.js</code> 直接安装。<a id=\"download\" href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"external\"><i class=\"fa fa-download\"></i><span> Download Now</span><br></a> </p>\n\n\n\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>有了 Node.js ，我们可以使用 npm 安装 Hexo。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>安装 Hexo 完成后，我们首先需要为我们的项目创建一个<span id=\"inline-green\">指定文件夹</span>（例如我在 D 盘目录下创建了一个文件夹 blog 。<code>D:\\blog</code> ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<p>等待安装，安装完成后，<span id=\"inline-green\">指定文件夹</span> 的目录如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">└──</div></pre></td></tr></table></figure></p>\n<p>我们继续执行命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo s --debug</div></pre></td></tr></table></figure></p>\n<p>Hexo 将 <code>source</code> 文件夹中除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code>（下划线）的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件夹会被拷贝过去。<br>这个时候，我们在浏览器中访问 <code>http://localhost:4000/</code> ，就可以看到基于 Hexo 的默认主题的原型：<br><img src=\"http://p1.bqimg.com/567571/27324b740c9e91e2.png\" alt=\"hexo-next-one-1\"></p>\n<h1 id=\"安装-NexT-主题\"><a href=\"#安装-NexT-主题\" class=\"headerlink\" title=\"安装 NexT 主题\"></a>安装 NexT 主题</h1><h4 id=\"下载-NexT-主题\"><a href=\"#下载-NexT-主题\" class=\"headerlink\" title=\"下载 NexT 主题\"></a>下载 NexT 主题</h4><p>依旧是在当前目录下，使用 Git checkout 代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>\n<p>等待下载完成。</p>\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n<h4 id=\"启用-NexT-主题\"><a href=\"#启用-NexT-主题\" class=\"headerlink\" title=\"启用 NexT 主题\"></a>启用 NexT 主题</h4><p>打开 <span id=\"inline-blue\">站点配置文件</span> ，找到 <code>theme</code> 字段，并将其值更改为 <code>next</code> 。<br>到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p>\n<h4 id=\"验证主题\"><a href=\"#验证主题\" class=\"headerlink\" title=\"验证主题\"></a>验证主题</h4><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：<br><code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000/</code> ，检查站点是否正确运行。</p>\n<p id=\"div-border-left-green\">当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p><br><img src=\"http://p1.bqimg.com/567571/8333728b5eaab526.png\" alt=\"hexo-next-one-1\"><br>现在，我们已经成功安装并启用了 NexT 主题。<br><br><p id=\"div-border-top-blue\">关于更多基本操作和基础知识，请查阅 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">Hexo</a> 与 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">NexT</a> 官方文档.</p>\n\n\n<h3 id=\"总结：本地调试步骤\"><a href=\"#总结：本地调试步骤\" class=\"headerlink\" title=\"总结：本地调试步骤\"></a>总结：本地调试步骤</h3><p>三部曲：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo s --debug</div></pre></td></tr></table></figure></p>\n<p>这种带debug的运行，如果出现错误，可以在命令行中看到错误提示信息。</p>\n<h3 id=\"总结：部署步骤\"><a href=\"#总结：部署步骤\" class=\"headerlink\" title=\"总结：部署步骤\"></a>总结：部署步骤</h3><p>三部曲：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure></p>\n<p>当然在部署之前，需要先配置好配置文件中的deploy。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"postName\"</span>  <span class=\"comment\">#新建文章</span></div><div class=\"line\">$ hexo new page <span class=\"string\">\"pageName\"</span> <span class=\"comment\"># 新建页面</span></div><div class=\"line\">$ hexo generate <span class=\"comment\"># 生成静态页面至public目录</span></div><div class=\"line\">$ hexo server <span class=\"comment\"># 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)</span></div><div class=\"line\">$ hexo deploy <span class=\"comment\"># 项目部署</span></div><div class=\"line\">$ hexo <span class=\"built_in\">help</span> <span class=\"comment\"># 查看帮助</span></div><div class=\"line\">$ hexo version <span class=\"comment\"># 查看Hexo的版本</span></div></pre></td></tr></table></figure>\n<h3 id=\"简写命令\"><a href=\"#简写命令\" class=\"headerlink\" title=\"简写命令\"></a>简写命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new == hexo n</div><div class=\"line\">$ hexo generate == hexo g</div><div class=\"line\">$ hexo server == hexo s</div><div class=\"line\">$ hexo deploy == hexo d</div></pre></td></tr></table></figure>\n<h3 id=\"常见问题1\"><a href=\"#常见问题1\" class=\"headerlink\" title=\"常见问题1\"></a>常见问题1</h3><p>在hexo的配置和设置文件中，在冒号后面没留空格会导致出问题：<br>错误的设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">author:Neveryu</div><div class=\"line\">email:react.dong.yu@gmail.com</div><div class=\"line\">language:zh-CN</div></pre></td></tr></table></figure></p>\n<p>正确的设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">author: Neveryu</div><div class=\"line\">email: react.dong.yu@gmail.com</div><div class=\"line\">language: zh-CN</div></pre></td></tr></table></figure></p>\n<h3 id=\"常见问题2\"><a href=\"#常见问题2\" class=\"headerlink\" title=\"常见问题2\"></a>常见问题2</h3><p>关于Git提交中用户名和Email的设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;Your name&quot;</div><div class=\"line\">git config --global user.email &quot;Your email&quot;</div></pre></td></tr></table></figure></p>\n<h3 id=\"常见问题3\"><a href=\"#常见问题3\" class=\"headerlink\" title=\"常见问题3\"></a>常见问题3</h3><p>Hexo 中的图标使用的是 <a href=\"http://fontawesome.io/\" target=\"_blank\" rel=\"external\">Font Awesome</a> ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。<br><i class=\"fa fa-github\"></i> <code>&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;</code><br><i class=\"fa fa-github fa-lg\"></i> <code>&lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt;</code><br><i class=\"fa fa-github fa-2x\"></i> <code>&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt;</code></p>\n","excerpt":"<p><a href=\"https://hexo.io/zh-cn/\">Hexo</a> 是一个快速、简洁且高效的静态站点生成框架，它基于 <a href=\"https://nodejs.org/en/\">Node.js</a> 。 它有以下特点：</p>\n<ul>\n<li><i class=\"fa fa-bolt\"></i><h6 style=\"display: inline;\">　超快速度</h6><br><i>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</i></li>\n<li><i class=\"fa fa-pencil\"></i><h6 style=\"display: inline;\">　支持Markdown</h6><br><i>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</i></li>\n<li><i class=\"fa fa-cloud-upload\"></i><h6 style=\"display: inline;\">　一件部署</h6><br><i>只需一条指令即可部署到Github Pages，或其他网站</i></li>\n<li><i class=\"fa fa-cog\"></i><h6 style=\"display: inline;\">　丰富的插件</h6><br><i>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</i></li>\n</ul>\n<p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href=\"https://hexo.io/zh-cn/docs/tag-plugins.html\">标签插件</a> 来快速的插入特定形式的内容。</p>\n<p>基于 Hexo 这个优秀的博客框架，很多优秀的开发者奉献出了它们基于 Hexo 开发的<a href=\"https://hexo.io/themes/\">主题</a>。<br><a href=\"http://theme-next.iissnan.com/\">NexT</a> 因其 <span id=\"yu-1\">精于心，简于形</span> 的风格，一直被广大用户所喜爱。</p>","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>安装 Hexo 只需几分钟时间，若你在安装过程中遇到问题或无法找到解决方式，请<a href=\"https://neveryu.github.io/guestbook/\">提交问题</a>，我会尽力解决你的问题。</p>\n<h3 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序:</p>\n<blockquote>\n<p><a href=\"https://nodejs.org/en/\">Node.js</a><br><a href=\"http://git-scm.com/\">Git</a></p>\n</blockquote>\n<p>如果您的电脑中已经安装上述必备程序，那么恭喜你！接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>如果你的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>\n<h3 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h3><ul>\n<li>Windows：下载安装 git 。<a id=\"download\" href=\"https://git-scm.com/download/win\"><i class=\"fa fa-download\"></i><span> Download Now</span><br></a></li>\n<li>Mac：使用 <a href=\"http://mxcl.github.com/homebrew/\">Homebrew</a>，<a href=\"http://www.macports.org/\">MacPorts</a> 或下载 <a href=\"http://sourceforge.net/projects/git-osx-installer/\">安装程序</a> 安装</li>\n<li>Linux（Ubuntu，Debian）：<code>sudo apt-get install git-core</code></li>\n<li>Linux（Fedora，Red Hat，CentOS）：<code>sudo yum install git-core</code></li>\n</ul>\n<h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><p>安装 Node.js 的最佳方式是使用 <a href=\"https://github.com/creationix/nvm\">nvm</a>。（nvm：Node Version Manager）<br>windows 下使用 nvm 请看这里： <a href=\"https://github.com/coreybutler/nvm-windows\">nvm-windows</a> ，首先需要下载安装 nvm 。<a id=\"download\" href=\"https://github.com/coreybutler/nvm-windows/releases\"><i class=\"fa fa-download\"></i><span> Download Now</span><br></a><br>windows下安装完nvm以后，我们可以打开命令行中执行命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm</div><div class=\"line\">$ nvm install latest</div></pre></td></tr></table></figure></p>\n<p>执行完以后，重启命令行，执行命令 <code>node -v</code> ，如果出现版本号，那么 <code>Node.js</code> 就安装成功了。</p>\n<p id=\"div-border-left-red\">如果没有安装成功，那可能就是墙的原因。建议下载 <code>Node.js</code> 直接安装。<a id=\"download\" href=\"https://nodejs.org/en/download/\"><i class=\"fa fa-download\"></i><span> Download Now</span><br></a> </p>\n\n\n\n<h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>有了 Node.js ，我们可以使用 npm 安装 Hexo。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>\n<p>安装 Hexo 完成后，我们首先需要为我们的项目创建一个<span id=\"inline-green\">指定文件夹</span>（例如我在 D 盘目录下创建了一个文件夹 blog 。<code>D:\\blog</code> ），在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<p>等待安装，安装完成后，<span id=\"inline-green\">指定文件夹</span> 的目录如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── _config.yml</div><div class=\"line\">├── package.json</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">└──</div></pre></td></tr></table></figure></p>\n<p>我们继续执行命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo s --debug</div></pre></td></tr></table></figure></p>\n<p>Hexo 将 <code>source</code> 文件夹中除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code>（下划线）的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件夹会被拷贝过去。<br>这个时候，我们在浏览器中访问 <code>http://localhost:4000/</code> ，就可以看到基于 Hexo 的默认主题的原型：<br><img src=\"http://p1.bqimg.com/567571/27324b740c9e91e2.png\" alt=\"hexo-next-one-1\"></p>\n<h1 id=\"安装-NexT-主题\"><a href=\"#安装-NexT-主题\" class=\"headerlink\" title=\"安装 NexT 主题\"></a>安装 NexT 主题</h1><h4 id=\"下载-NexT-主题\"><a href=\"#下载-NexT-主题\" class=\"headerlink\" title=\"下载 NexT 主题\"></a>下载 NexT 主题</h4><p>依旧是在当前目录下，使用 Git checkout 代码：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>\n<p>等待下载完成。</p>\n<p id=\"div-border-left-yellow\">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <span id=\"inline-blue\">站点配置文件</span>，后者称为 <span id=\"inline-purple\">主题配置文件</span></p>\n\n<h4 id=\"启用-NexT-主题\"><a href=\"#启用-NexT-主题\" class=\"headerlink\" title=\"启用 NexT 主题\"></a>启用 NexT 主题</h4><p>打开 <span id=\"inline-blue\">站点配置文件</span> ，找到 <code>theme</code> 字段，并将其值更改为 <code>next</code> 。<br>到此， NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p>\n<h4 id=\"验证主题\"><a href=\"#验证主题\" class=\"headerlink\" title=\"验证主题\"></a>验证主题</h4><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 <code>--debug</code>），整个命令是 <code>hexo s --debug</code>。在服务启动的过程，注意观察命令行输出是否有任何异常信息。当命令行输出中提示：<br><code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000/</code> ，检查站点是否正确运行。</p>\n<p id=\"div-border-left-green\">当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse</p><br><img src=\"http://p1.bqimg.com/567571/8333728b5eaab526.png\" alt=\"hexo-next-one-1\"><br>现在，我们已经成功安装并启用了 NexT 主题。<br><br><p id=\"div-border-top-blue\">关于更多基本操作和基础知识，请查阅 <a href=\"https://hexo.io/zh-cn/\">Hexo</a> 与 <a href=\"http://theme-next.iissnan.com/\">NexT</a> 官方文档.</p>\n\n\n<h3 id=\"总结：本地调试步骤\"><a href=\"#总结：本地调试步骤\" class=\"headerlink\" title=\"总结：本地调试步骤\"></a>总结：本地调试步骤</h3><p>三部曲：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo s --debug</div></pre></td></tr></table></figure></p>\n<p>这种带debug的运行，如果出现错误，可以在命令行中看到错误提示信息。</p>\n<h3 id=\"总结：部署步骤\"><a href=\"#总结：部署步骤\" class=\"headerlink\" title=\"总结：部署步骤\"></a>总结：部署步骤</h3><p>三部曲：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure></p>\n<p>当然在部署之前，需要先配置好配置文件中的deploy。</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"postName\"</span>  <span class=\"comment\">#新建文章</span></div><div class=\"line\">$ hexo new page <span class=\"string\">\"pageName\"</span> <span class=\"comment\"># 新建页面</span></div><div class=\"line\">$ hexo generate <span class=\"comment\"># 生成静态页面至public目录</span></div><div class=\"line\">$ hexo server <span class=\"comment\"># 开启预览访问端口(默认端口4000，'ctrl+c'关闭server)</span></div><div class=\"line\">$ hexo deploy <span class=\"comment\"># 项目部署</span></div><div class=\"line\">$ hexo <span class=\"built_in\">help</span> <span class=\"comment\"># 查看帮助</span></div><div class=\"line\">$ hexo version <span class=\"comment\"># 查看Hexo的版本</span></div></pre></td></tr></table></figure>\n<h3 id=\"简写命令\"><a href=\"#简写命令\" class=\"headerlink\" title=\"简写命令\"></a>简写命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new == hexo n</div><div class=\"line\">$ hexo generate == hexo g</div><div class=\"line\">$ hexo server == hexo s</div><div class=\"line\">$ hexo deploy == hexo d</div></pre></td></tr></table></figure>\n<h3 id=\"常见问题1\"><a href=\"#常见问题1\" class=\"headerlink\" title=\"常见问题1\"></a>常见问题1</h3><p>在hexo的配置和设置文件中，在冒号后面没留空格会导致出问题：<br>错误的设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">author:Neveryu</div><div class=\"line\">email:react.dong.yu@gmail.com</div><div class=\"line\">language:zh-CN</div></pre></td></tr></table></figure></p>\n<p>正确的设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">author: Neveryu</div><div class=\"line\">email: react.dong.yu@gmail.com</div><div class=\"line\">language: zh-CN</div></pre></td></tr></table></figure></p>\n<h3 id=\"常见问题2\"><a href=\"#常见问题2\" class=\"headerlink\" title=\"常见问题2\"></a>常见问题2</h3><p>关于Git提交中用户名和Email的设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;Your name&quot;</div><div class=\"line\">git config --global user.email &quot;Your email&quot;</div></pre></td></tr></table></figure></p>\n<h3 id=\"常见问题3\"><a href=\"#常见问题3\" class=\"headerlink\" title=\"常见问题3\"></a>常见问题3</h3><p>Hexo 中的图标使用的是 <a href=\"http://fontawesome.io/\">Font Awesome</a> ，所以，我们的博客已经自带了 Font Awesome 中的所有图标，基本可以满足我们的所有需求，我们可以去 Font Awesome 中查找我们想要使用的图标。<br><i class=\"fa fa-github\"></i> <code>&lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;</code><br><i class=\"fa fa-github fa-lg\"></i> <code>&lt;i class=&quot;fa fa-github fa-lg&quot;&gt;&lt;/i&gt;</code><br><i class=\"fa fa-github fa-2x\"></i> <code>&lt;i class=&quot;fa fa-github fa-2x&quot;&gt;&lt;/i&gt;</code></p>"},{"title":"【转】在2016年学JavaScript是一种什么样的体验","date":"2016-10-16T15:25:24.000Z","comments":0,"_content":"<p id=\"div-border-left-blue\" style=\"width:90%;\">嘿，我最近接到一个 Web 项目，不过老实说，我这两年没怎么接触 Web 编程，听说 Web 技术已经发生了一些变化。听说你是这里对新技术最了解的 Web 开发工程师？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">准确地说，我是一名「前端工程师」。不过你算是找对人了。我对今年的技术别提多熟了，前端可视化、音乐播放器、能踢足球的无人机，你尽管问吧。我刚去 JS 大会和 React 大会逛了一圈，没有什么新技术是我不知道的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">厉害。是这样的，我要开发一个网页，用来展示用户的最新动态。我想我应该通过后端接口获取数据，然后用一个 table 来展示数据，用户可以对数据进行排序。如果服务器上的数据变化了，我还需要更新这个 table。我的思路是用 jQuery 来做。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">可别用 jQuery！现在哪还有人用 jQuery。现在是 2016 年了，你绝对应该用 React。</p>\n\n<!-- more -->\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，React 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是一个非常厉害的库，Facebook 的牛人写的。它能让页面更可控，性能极高，而且使用起来很简单。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来确实不错。我能用 React 展示服务器传来的数据吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">当然可以，你只需要添加两个依赖，一个是 React，一个是 React DOM</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，等下，为什么是两个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是我说的库，React DOM 是用来操作 DOM 的。因为这些 DOM 是用 JSX 写的，所以需要一个专门的库来操作。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">JSX？JSX 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">JSX 是对 JS 的扩展，它看起来跟 XML 差不多，可以用来写 HTML，你可以认为 JSX 是一种更优雅的 HTML 写法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么不用 HTML 了……？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">现在可是 2016 年啊，没有直接写 HTML 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。好吧，加了这两个依赖，是不是就可以开始用 React 了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行哦。你需要添加 Babel，然后才能用 React。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Babel 是另一个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，Babel 是一个转译工具，Babel 能把你写的 JS 转译成任意版本的 JS。你不一定非要用 Babel，但是如果你不用的话，你就只能写 ES5 的语法了。你知道的，现在是 2016 年，你怎么能不使用 ES2016+ 的语法呢？ES2016+ 多么酷啊。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES5 是啥？ES2016+ 又是啥？我有点晕。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">ES5 就是 ECMAScript 5。大部分人都会使用 ES5，因为大部分浏览器都支持 ES5。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ECMAScript 是啥……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你晓得的，JS是1995年诞生的，而JS的标准是1999制定出来的。那时候 JavaScript 还叫做 Livescript，只能运行在网景的浏览器里。那时真是混乱的年代，现在好了，我们有了 JS 的 7 个版本的规范。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">7 个版本？那 ES5 和 ES2016+ 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">分别是第 5 个版本和第 7 个版本。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">诶，那第六个版本呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你说的是 ES6。每个版本都是上一个版本的超集，所以你直接使用最新的 ES2016+ 就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。为什么不用 ES6 呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">好吧，你可以用 ES6，但是你就用不到 async 和 await 这么酷的语法了。用 ES2016+ 比较好。用 ES6 的话你就只能用 generator 来控制异步任务流了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么……你说了太多我听不懂的名词了。我只是想从服务器取点数据，我以前用 jQuery 挺好的，从 CDN 引入 jQuery，我就能用 AJAX 获取数据了，现在不能这样做吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大哥，都 2016 年了，没人用 jQuery 好吗。所有人都知道用 jQuery 只会造出「意大利面条」一样的代码（不可维护）</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，所以我现在要加载三个库才能获取并展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的，其实你可以用「模块管理器」把这三个库「打包」成一个文件。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，什么是模块管理器……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不同平台的模块管理器不同啦。前端的模块管理器一般指管理 AMD 或者 CommonJS 模块的东西。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好……吧，什么是 AMD 和 CommonJS？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是两个定义。我们有很多方式来描述 JS 中多个库或类的交互方式，比如 exports 和 requires。你可以按照 AMD 或者 CommonJS 的 API 来书写 JS，然后用 Browserify 将它们打包。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来很有道理。不过，什么是 Browserify？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个工具，用来将 CommonJS 形式的 JS 文件打包起来，放到浏览器里运行。用 npm 仓库的人发明了 CommonJS。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">npm 仓库是什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个公开的仓库，用于放置可依赖的模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">就像一个 CDN 么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不太一样。它更像是一个数据库，每个人都能在上面发布代码，也能下载上面的代码。你可以在开发的时候将这些代码下载到本地来使用，必要的时候也能上传到 CDN。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是 Bower！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过现在是 2016 年了，没有人用 Bower 了……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，我知道了，所以我应该用 npm 来安装依赖。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。我举个例子吧，如果你要使用 React，你直接用 npm 安装 React，然后在代码里导入 React 就可以了。大部分 JS 库都能这么安装。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">嗯，Angular 也可以。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Angular 是 2015 年的事情了。不过今年 Angular 还没死，还有 VueJS 和 RxJS 等等，你想学一学么？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还是用 React 吧。我刚才已经学了够多东西了。所以我用 npm 安装 React 然后用 Browerify 来打包就好了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这么做看起来有点过于复杂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">确实。这就是为什么你应该使用 Grunt、Gulp 或者 Broccoli 这样的任务管理工具，它们能自动运行 Browserify。不对，你现在可以用 Mimosa。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你在说什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">任务管理工具。不过我们现在已经不用了。去年我们还在用，后来改成了 Makefiles，但是现在我们用的都是 Webpack。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我以为只有 C/C++ 项目才会用 Makefiles。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过显然我们做 Web 开发的，喜欢先把事情搞复杂，然后回归到最朴素的状态。每年我们都是这么搞的。你就看着吧，过不了两年，我们就可以在网页上写汇编了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，你刚才说的 Webpack 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">另一种模块管理工具，同时也是一个任务管理工具。你可以认为它是 Browserify 的加强版。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，为什么 Webpack 是加强版？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，可能并没有加强吧。Webpack 告诉你应该如何管理你的依赖，Webpack 允许你使用不同的模块管理器，不只是 CommonJS，甚至支持 ES6 模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这都是哪跟哪啊，我都被绕晕了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大家都被绕晕了，不过等 SystemJS 出来了就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐，又一个 JS 库，这是什么鬼？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">呵呵，不像 Browserify 和 Webpack 1.x，SystemJS 是一个动态的模块加载器。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，刚才不是说应该把所有依赖打包成一个文件吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">话是这么说，但是等 HTTP/2 普及之后，不打包反而更好。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">那为什么我们不直接在页面里添加 React 的三个依赖文件呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行。你可以从 CDN 加载这些文件，但是你还是要在本地用 Babel 转译。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，这么鹾？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，你不能在生产环境上运行 babel，你应该在发布到生产环境之前，运行一系列的任务，包括压缩、混淆、内联化CSS、延迟加载script……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我懂了我懂了。既然我不能直接用 CDN，那么我应该怎么做？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我会考虑用 Webpack + SystemJS + Babel 来转译 Typescript。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Typescript？我们不是在说 JavaScript 吗？！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Typescript 也是 JavaScript 呀，它比 JS 更好用，是 JS 的超集，它是基于 ES6 的，就是我们刚才谈论的 ES6，你还记得吧。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES2016+ 已经是 ES6 的超集了，怎么又冒出来一个 Typescript？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是这样的，Typescript 能让我们写出「强类型」的 JS，从而减少运行时的错误。2016年，我们应该让 JS 支持强类型了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">显然 Typescript 可以做到。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Flow 也可以做到，区别是 Typescript 需要编译，而 Flow 只是检查语法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，Flow 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个静态类型检查器，就是 Facebook 的人写的。使用 OCaml 写的，函数式编程很叼的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">OCaml？函数式编程？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">如今大牛都用这些东西，都2016年了，你懂的，函数式编程、高阶函数、柯里化、纯函数这些概念。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">一开始大家都不知道。这么说吧，你只需要知道函数式编程比面向对象编程厉害，2016 年我们就指着函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，我大学里学过面向对象编程，当时我觉得它还不错。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Java 在被 Oracle 买下来之前也挺不错啊。我的意思是，面向对象以前是不错，现在依然有人用它，但是现在所有人都发觉状态变换是很难维护的，所以大家都开始用「不可变对象」和函数式编程了。Haskell 的人已经用这套东西用了很久了，不过幸运的是 Web 开发领域里有 Ramda 这样的库，让我们用 JS 就可以进行函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚刚是不是又抛出了几个名词？Ramnda 又是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不是 Ramnda，是 Ramda，跟 Lambda 表达式有点像。是 David Chambers 写的库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">谁？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">David Chambers，大神一个。blablabla</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我不得不打断你一下了。这些东西看起来都不错，但是我觉得它们都太复杂，而且没必要。我只是想获取数据然后展示，我很确定这种情况下我不需要掌握这些知识。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回到 React 吧，用 React 我怎么从服务器获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，React 没有提供这个功能，你只能用 React 展示数据。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">服了啊。那我怎么获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你用 Fetch API 就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？这个 API 的名字很烂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我也觉得是啊。Fetch API 是浏览器提供的异步请求接口。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，那不就是 AJAX。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">AJAX 只是使用 XMLHttpRequest 对象，但是 Fetch API 可以让你用 Promise 风格来发起异步请求，帮你摆脱「回调地狱」。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回调地狱？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，每次你发起一个异步请求，就得等待它响应。这时你就得在函数里使用一个函数，这种嵌套调用就是回调地狱。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧。Promise 解决了这个问题么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。用 Promise 来管理回调，你就可以写出更易读的代码，更容易测试的代码。甚至可以同时发起多个请求，然后等待它们全部返回。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Fetch 也能做到吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。但前提是你的用户使用了新版的浏览器，不然的话你就需要加一个 Fetch 的 「polyfill」，或者使用 Request、Bluebird 或者 Axios 这些库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐我到底需要多少个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这是 JS，同一件事情有上千个库在做。我们了解库，而且我们有最好的库，我们有海量的库，要什么有什么。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚才说的几个库都是干什么的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这几个库操作 XMLHttpRequest 然后返回 Promise 对象。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好像 jQuery 的 ajax 方法做的是同样的事吧……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">从 2016 年起我们就不用 jQuery 了。用 Fetch，大不了加个 Polyfill，要不然用 Bluebird、Request 或者 Axios 都行。然后用 await 和 async 管理 Promise，这样才能控制好异步任务。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这是你第三次说 await 了，那是什么东西？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">await 能让你拦住一个异步调用，让你更好地控制异步返回的数据，大大增强了代码的可读性。await 非常好用，你只需要在 Babel 里添加 stage–3 配置，或者添加 syntax-async-functions 和 transform-async-to-generator 插件就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没疯。为了使用 await，把 Typescript 编译之后再用 Babel 转译一道的人才是疯了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？Typescript 不支持 await？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">下个版本就支持了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我已经无话可说了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你看其实很简单。用 Typescript 写代码，用 Fetch 发起异步请求，所有代码编译成 ES6，然后用上 Babel 的 stage–3 配置项，把 ES6 转译成 ES5。所有代码用 SystemJS 加载。如果你用不了 Fetch，就加个 polyfill，或者用 Bluebird、Request 或者 Axios，这样你就可以用 await 来处理 Promise 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">看来我们俩对于「简单」的理解是不同的。好吧，有了这些，我终于可以获取数据然后用 React 展示数据了，对吧？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你的网页需要处理状态变更吗？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唔，不用吧。我只是想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">那就好，不然我就得跟你解释 Flux，以及 Flux 的一些实现，比如 Flummox、Alt、Fluxible。不过说真的你应该用 Redux。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你说的这些我就当耳旁风了。再说一次，我只想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这样啊，如果你只是想展示数据，其实你不需要 React。你只需要一个模板引擎。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你逗我呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我只是告诉你你可以用什么技术。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">别说了，真的。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我想说，即使只是用一个模板引擎，我还是会用 Typescript + SystemJS + Babel 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我只是想在页面上展示数据，你就告诉我用哪个模板引擎就好了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">有很多，你用过哪一个？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，太久没用了，不记得了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">jTemplates、jQote 还是 PURE？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，不记得，还有别的么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Transparency? JSRender? MarkupJS? KnockoutJS? 这一个支持双向绑定。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还有吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">PlatesJS? jQuery-tmpl? Handlebars? 还有些人在用。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">有点像。有哪些跟最后一个比较像的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Mustache, underscore? 我记得连 Lodash 都有一个模板引擎，不过这是 2014 年的事情了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，也许是再新一点的库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Jade? DustJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">DotJS? EJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。</p><p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Nunjucks? ECT?</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。记不起来了，要是你的话，你用哪个？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我应该会用 ES6 原生的模板字符串</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我猜猜，只有 ES6 支持。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Babel</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 npm 安装</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Browserify 或者 Webpack，或者 SystemJS</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果没用 Webpack 的话，我还需要一个任务管理工具。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">但是由于我要用函数式编程和强类型语言，所以我首先要用上 Typescript 或者 Flow。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果我要用 await，那我就必须用 Babel 转译。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">然后我就能用上 Fetch、Promise 和各种炫酷的东西。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，别忘了加上 Fetch 的 Polyfill，因为 Safari 不支持 Fetch。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你猜怎么着，我们就聊到这吧。我不做了，我不做 Web 了，我也不想再碰 JS 了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没事，过不了几年，我们都会用 Elm 或者 WebAssembly 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我要回后端去了，我受不这些变动、版本更新、编译和转译了，JS 社区如果觉得有人能跟上它的脚步，那这个社区就是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我理解你。我建议你去 Python 社区。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">听说过 Python 3 吗？</p>\n<p id=\"div-border-top-blue\"><i>译者注：最后一句「听说过 Python 3 吗？」是讽刺 Python 3 发布已经 8 年了，Python 社区却依然在使用 Python 2.7。而 JS 社区正好相反，把还没有实现的语言特性都用到生成环境中了！</i></p>\n\n译者：方应杭\n[原文](https://link.zhihu.com/?target=https%3A//hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f)\n","source":"_posts/how-it-feels-to-learn-javascript-in-2016.md","raw":"---\ntitle: 【转】在2016年学JavaScript是一种什么样的体验\ndate: 2016-10-16 23:25:24\ncategories: 前端\ntags: [essay]\ncomments: false\n---\n<p id=\"div-border-left-blue\" style=\"width:90%;\">嘿，我最近接到一个 Web 项目，不过老实说，我这两年没怎么接触 Web 编程，听说 Web 技术已经发生了一些变化。听说你是这里对新技术最了解的 Web 开发工程师？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">准确地说，我是一名「前端工程师」。不过你算是找对人了。我对今年的技术别提多熟了，前端可视化、音乐播放器、能踢足球的无人机，你尽管问吧。我刚去 JS 大会和 React 大会逛了一圈，没有什么新技术是我不知道的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">厉害。是这样的，我要开发一个网页，用来展示用户的最新动态。我想我应该通过后端接口获取数据，然后用一个 table 来展示数据，用户可以对数据进行排序。如果服务器上的数据变化了，我还需要更新这个 table。我的思路是用 jQuery 来做。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">可别用 jQuery！现在哪还有人用 jQuery。现在是 2016 年了，你绝对应该用 React。</p>\n\n<!-- more -->\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，React 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是一个非常厉害的库，Facebook 的牛人写的。它能让页面更可控，性能极高，而且使用起来很简单。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来确实不错。我能用 React 展示服务器传来的数据吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">当然可以，你只需要添加两个依赖，一个是 React，一个是 React DOM</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，等下，为什么是两个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是我说的库，React DOM 是用来操作 DOM 的。因为这些 DOM 是用 JSX 写的，所以需要一个专门的库来操作。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">JSX？JSX 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">JSX 是对 JS 的扩展，它看起来跟 XML 差不多，可以用来写 HTML，你可以认为 JSX 是一种更优雅的 HTML 写法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么不用 HTML 了……？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">现在可是 2016 年啊，没有直接写 HTML 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。好吧，加了这两个依赖，是不是就可以开始用 React 了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行哦。你需要添加 Babel，然后才能用 React。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Babel 是另一个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，Babel 是一个转译工具，Babel 能把你写的 JS 转译成任意版本的 JS。你不一定非要用 Babel，但是如果你不用的话，你就只能写 ES5 的语法了。你知道的，现在是 2016 年，你怎么能不使用 ES2016+ 的语法呢？ES2016+ 多么酷啊。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES5 是啥？ES2016+ 又是啥？我有点晕。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">ES5 就是 ECMAScript 5。大部分人都会使用 ES5，因为大部分浏览器都支持 ES5。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ECMAScript 是啥……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你晓得的，JS是1995年诞生的，而JS的标准是1999制定出来的。那时候 JavaScript 还叫做 Livescript，只能运行在网景的浏览器里。那时真是混乱的年代，现在好了，我们有了 JS 的 7 个版本的规范。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">7 个版本？那 ES5 和 ES2016+ 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">分别是第 5 个版本和第 7 个版本。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">诶，那第六个版本呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你说的是 ES6。每个版本都是上一个版本的超集，所以你直接使用最新的 ES2016+ 就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。为什么不用 ES6 呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">好吧，你可以用 ES6，但是你就用不到 async 和 await 这么酷的语法了。用 ES2016+ 比较好。用 ES6 的话你就只能用 generator 来控制异步任务流了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么……你说了太多我听不懂的名词了。我只是想从服务器取点数据，我以前用 jQuery 挺好的，从 CDN 引入 jQuery，我就能用 AJAX 获取数据了，现在不能这样做吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大哥，都 2016 年了，没人用 jQuery 好吗。所有人都知道用 jQuery 只会造出「意大利面条」一样的代码（不可维护）</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，所以我现在要加载三个库才能获取并展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的，其实你可以用「模块管理器」把这三个库「打包」成一个文件。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，什么是模块管理器……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不同平台的模块管理器不同啦。前端的模块管理器一般指管理 AMD 或者 CommonJS 模块的东西。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好……吧，什么是 AMD 和 CommonJS？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是两个定义。我们有很多方式来描述 JS 中多个库或类的交互方式，比如 exports 和 requires。你可以按照 AMD 或者 CommonJS 的 API 来书写 JS，然后用 Browserify 将它们打包。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来很有道理。不过，什么是 Browserify？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个工具，用来将 CommonJS 形式的 JS 文件打包起来，放到浏览器里运行。用 npm 仓库的人发明了 CommonJS。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">npm 仓库是什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个公开的仓库，用于放置可依赖的模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">就像一个 CDN 么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不太一样。它更像是一个数据库，每个人都能在上面发布代码，也能下载上面的代码。你可以在开发的时候将这些代码下载到本地来使用，必要的时候也能上传到 CDN。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是 Bower！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过现在是 2016 年了，没有人用 Bower 了……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，我知道了，所以我应该用 npm 来安装依赖。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。我举个例子吧，如果你要使用 React，你直接用 npm 安装 React，然后在代码里导入 React 就可以了。大部分 JS 库都能这么安装。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">嗯，Angular 也可以。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Angular 是 2015 年的事情了。不过今年 Angular 还没死，还有 VueJS 和 RxJS 等等，你想学一学么？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还是用 React 吧。我刚才已经学了够多东西了。所以我用 npm 安装 React 然后用 Browerify 来打包就好了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这么做看起来有点过于复杂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">确实。这就是为什么你应该使用 Grunt、Gulp 或者 Broccoli 这样的任务管理工具，它们能自动运行 Browserify。不对，你现在可以用 Mimosa。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你在说什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">任务管理工具。不过我们现在已经不用了。去年我们还在用，后来改成了 Makefiles，但是现在我们用的都是 Webpack。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我以为只有 C/C++ 项目才会用 Makefiles。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过显然我们做 Web 开发的，喜欢先把事情搞复杂，然后回归到最朴素的状态。每年我们都是这么搞的。你就看着吧，过不了两年，我们就可以在网页上写汇编了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，你刚才说的 Webpack 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">另一种模块管理工具，同时也是一个任务管理工具。你可以认为它是 Browserify 的加强版。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，为什么 Webpack 是加强版？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，可能并没有加强吧。Webpack 告诉你应该如何管理你的依赖，Webpack 允许你使用不同的模块管理器，不只是 CommonJS，甚至支持 ES6 模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这都是哪跟哪啊，我都被绕晕了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大家都被绕晕了，不过等 SystemJS 出来了就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐，又一个 JS 库，这是什么鬼？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">呵呵，不像 Browserify 和 Webpack 1.x，SystemJS 是一个动态的模块加载器。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，刚才不是说应该把所有依赖打包成一个文件吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">话是这么说，但是等 HTTP/2 普及之后，不打包反而更好。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">那为什么我们不直接在页面里添加 React 的三个依赖文件呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行。你可以从 CDN 加载这些文件，但是你还是要在本地用 Babel 转译。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，这么鹾？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，你不能在生产环境上运行 babel，你应该在发布到生产环境之前，运行一系列的任务，包括压缩、混淆、内联化CSS、延迟加载script……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我懂了我懂了。既然我不能直接用 CDN，那么我应该怎么做？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我会考虑用 Webpack + SystemJS + Babel 来转译 Typescript。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Typescript？我们不是在说 JavaScript 吗？！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Typescript 也是 JavaScript 呀，它比 JS 更好用，是 JS 的超集，它是基于 ES6 的，就是我们刚才谈论的 ES6，你还记得吧。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES2016+ 已经是 ES6 的超集了，怎么又冒出来一个 Typescript？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是这样的，Typescript 能让我们写出「强类型」的 JS，从而减少运行时的错误。2016年，我们应该让 JS 支持强类型了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">显然 Typescript 可以做到。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Flow 也可以做到，区别是 Typescript 需要编译，而 Flow 只是检查语法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，Flow 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个静态类型检查器，就是 Facebook 的人写的。使用 OCaml 写的，函数式编程很叼的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">OCaml？函数式编程？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">如今大牛都用这些东西，都2016年了，你懂的，函数式编程、高阶函数、柯里化、纯函数这些概念。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">一开始大家都不知道。这么说吧，你只需要知道函数式编程比面向对象编程厉害，2016 年我们就指着函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，我大学里学过面向对象编程，当时我觉得它还不错。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Java 在被 Oracle 买下来之前也挺不错啊。我的意思是，面向对象以前是不错，现在依然有人用它，但是现在所有人都发觉状态变换是很难维护的，所以大家都开始用「不可变对象」和函数式编程了。Haskell 的人已经用这套东西用了很久了，不过幸运的是 Web 开发领域里有 Ramda 这样的库，让我们用 JS 就可以进行函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚刚是不是又抛出了几个名词？Ramnda 又是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不是 Ramnda，是 Ramda，跟 Lambda 表达式有点像。是 David Chambers 写的库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">谁？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">David Chambers，大神一个。blablabla</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我不得不打断你一下了。这些东西看起来都不错，但是我觉得它们都太复杂，而且没必要。我只是想获取数据然后展示，我很确定这种情况下我不需要掌握这些知识。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回到 React 吧，用 React 我怎么从服务器获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，React 没有提供这个功能，你只能用 React 展示数据。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">服了啊。那我怎么获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你用 Fetch API 就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？这个 API 的名字很烂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我也觉得是啊。Fetch API 是浏览器提供的异步请求接口。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，那不就是 AJAX。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">AJAX 只是使用 XMLHttpRequest 对象，但是 Fetch API 可以让你用 Promise 风格来发起异步请求，帮你摆脱「回调地狱」。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回调地狱？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，每次你发起一个异步请求，就得等待它响应。这时你就得在函数里使用一个函数，这种嵌套调用就是回调地狱。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧。Promise 解决了这个问题么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。用 Promise 来管理回调，你就可以写出更易读的代码，更容易测试的代码。甚至可以同时发起多个请求，然后等待它们全部返回。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Fetch 也能做到吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。但前提是你的用户使用了新版的浏览器，不然的话你就需要加一个 Fetch 的 「polyfill」，或者使用 Request、Bluebird 或者 Axios 这些库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐我到底需要多少个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这是 JS，同一件事情有上千个库在做。我们了解库，而且我们有最好的库，我们有海量的库，要什么有什么。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚才说的几个库都是干什么的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这几个库操作 XMLHttpRequest 然后返回 Promise 对象。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好像 jQuery 的 ajax 方法做的是同样的事吧……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">从 2016 年起我们就不用 jQuery 了。用 Fetch，大不了加个 Polyfill，要不然用 Bluebird、Request 或者 Axios 都行。然后用 await 和 async 管理 Promise，这样才能控制好异步任务。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这是你第三次说 await 了，那是什么东西？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">await 能让你拦住一个异步调用，让你更好地控制异步返回的数据，大大增强了代码的可读性。await 非常好用，你只需要在 Babel 里添加 stage–3 配置，或者添加 syntax-async-functions 和 transform-async-to-generator 插件就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没疯。为了使用 await，把 Typescript 编译之后再用 Babel 转译一道的人才是疯了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？Typescript 不支持 await？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">下个版本就支持了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我已经无话可说了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你看其实很简单。用 Typescript 写代码，用 Fetch 发起异步请求，所有代码编译成 ES6，然后用上 Babel 的 stage–3 配置项，把 ES6 转译成 ES5。所有代码用 SystemJS 加载。如果你用不了 Fetch，就加个 polyfill，或者用 Bluebird、Request 或者 Axios，这样你就可以用 await 来处理 Promise 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">看来我们俩对于「简单」的理解是不同的。好吧，有了这些，我终于可以获取数据然后用 React 展示数据了，对吧？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你的网页需要处理状态变更吗？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唔，不用吧。我只是想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">那就好，不然我就得跟你解释 Flux，以及 Flux 的一些实现，比如 Flummox、Alt、Fluxible。不过说真的你应该用 Redux。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你说的这些我就当耳旁风了。再说一次，我只想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这样啊，如果你只是想展示数据，其实你不需要 React。你只需要一个模板引擎。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你逗我呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我只是告诉你你可以用什么技术。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">别说了，真的。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我想说，即使只是用一个模板引擎，我还是会用 Typescript + SystemJS + Babel 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我只是想在页面上展示数据，你就告诉我用哪个模板引擎就好了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">有很多，你用过哪一个？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，太久没用了，不记得了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">jTemplates、jQote 还是 PURE？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，不记得，还有别的么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Transparency? JSRender? MarkupJS? KnockoutJS? 这一个支持双向绑定。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还有吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">PlatesJS? jQuery-tmpl? Handlebars? 还有些人在用。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">有点像。有哪些跟最后一个比较像的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Mustache, underscore? 我记得连 Lodash 都有一个模板引擎，不过这是 2014 年的事情了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，也许是再新一点的库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Jade? DustJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">DotJS? EJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。</p><p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Nunjucks? ECT?</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。记不起来了，要是你的话，你用哪个？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我应该会用 ES6 原生的模板字符串</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我猜猜，只有 ES6 支持。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Babel</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 npm 安装</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Browserify 或者 Webpack，或者 SystemJS</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果没用 Webpack 的话，我还需要一个任务管理工具。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">但是由于我要用函数式编程和强类型语言，所以我首先要用上 Typescript 或者 Flow。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果我要用 await，那我就必须用 Babel 转译。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">然后我就能用上 Fetch、Promise 和各种炫酷的东西。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，别忘了加上 Fetch 的 Polyfill，因为 Safari 不支持 Fetch。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你猜怎么着，我们就聊到这吧。我不做了，我不做 Web 了，我也不想再碰 JS 了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没事，过不了几年，我们都会用 Elm 或者 WebAssembly 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我要回后端去了，我受不这些变动、版本更新、编译和转译了，JS 社区如果觉得有人能跟上它的脚步，那这个社区就是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我理解你。我建议你去 Python 社区。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">听说过 Python 3 吗？</p>\n<p id=\"div-border-top-blue\"><i>译者注：最后一句「听说过 Python 3 吗？」是讽刺 Python 3 发布已经 8 年了，Python 社区却依然在使用 Python 2.7。而 JS 社区正好相反，把还没有实现的语言特性都用到生成环境中了！</i></p>\n\n译者：方应杭\n[原文](https://link.zhihu.com/?target=https%3A//hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f)\n","slug":"how-it-feels-to-learn-javascript-in-2016","published":1,"updated":"2017-01-17T15:19:40.354Z","layout":"post","photos":[],"link":"","_id":"ciysq4ukr000mugi4hwb7np9s","content":"<p id=\"div-border-left-blue\" style=\"width:90%;\">嘿，我最近接到一个 Web 项目，不过老实说，我这两年没怎么接触 Web 编程，听说 Web 技术已经发生了一些变化。听说你是这里对新技术最了解的 Web 开发工程师？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">准确地说，我是一名「前端工程师」。不过你算是找对人了。我对今年的技术别提多熟了，前端可视化、音乐播放器、能踢足球的无人机，你尽管问吧。我刚去 JS 大会和 React 大会逛了一圈，没有什么新技术是我不知道的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">厉害。是这样的，我要开发一个网页，用来展示用户的最新动态。我想我应该通过后端接口获取数据，然后用一个 table 来展示数据，用户可以对数据进行排序。如果服务器上的数据变化了，我还需要更新这个 table。我的思路是用 jQuery 来做。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">可别用 jQuery！现在哪还有人用 jQuery。现在是 2016 年了，你绝对应该用 React。</p>\n\n<a id=\"more\"></a>\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，React 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是一个非常厉害的库，Facebook 的牛人写的。它能让页面更可控，性能极高，而且使用起来很简单。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来确实不错。我能用 React 展示服务器传来的数据吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">当然可以，你只需要添加两个依赖，一个是 React，一个是 React DOM</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，等下，为什么是两个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是我说的库，React DOM 是用来操作 DOM 的。因为这些 DOM 是用 JSX 写的，所以需要一个专门的库来操作。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">JSX？JSX 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">JSX 是对 JS 的扩展，它看起来跟 XML 差不多，可以用来写 HTML，你可以认为 JSX 是一种更优雅的 HTML 写法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么不用 HTML 了……？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">现在可是 2016 年啊，没有直接写 HTML 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。好吧，加了这两个依赖，是不是就可以开始用 React 了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行哦。你需要添加 Babel，然后才能用 React。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Babel 是另一个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，Babel 是一个转译工具，Babel 能把你写的 JS 转译成任意版本的 JS。你不一定非要用 Babel，但是如果你不用的话，你就只能写 ES5 的语法了。你知道的，现在是 2016 年，你怎么能不使用 ES2016+ 的语法呢？ES2016+ 多么酷啊。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES5 是啥？ES2016+ 又是啥？我有点晕。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">ES5 就是 ECMAScript 5。大部分人都会使用 ES5，因为大部分浏览器都支持 ES5。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ECMAScript 是啥……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你晓得的，JS是1995年诞生的，而JS的标准是1999制定出来的。那时候 JavaScript 还叫做 Livescript，只能运行在网景的浏览器里。那时真是混乱的年代，现在好了，我们有了 JS 的 7 个版本的规范。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">7 个版本？那 ES5 和 ES2016+ 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">分别是第 5 个版本和第 7 个版本。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">诶，那第六个版本呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你说的是 ES6。每个版本都是上一个版本的超集，所以你直接使用最新的 ES2016+ 就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。为什么不用 ES6 呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">好吧，你可以用 ES6，但是你就用不到 async 和 await 这么酷的语法了。用 ES2016+ 比较好。用 ES6 的话你就只能用 generator 来控制异步任务流了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么……你说了太多我听不懂的名词了。我只是想从服务器取点数据，我以前用 jQuery 挺好的，从 CDN 引入 jQuery，我就能用 AJAX 获取数据了，现在不能这样做吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大哥，都 2016 年了，没人用 jQuery 好吗。所有人都知道用 jQuery 只会造出「意大利面条」一样的代码（不可维护）</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，所以我现在要加载三个库才能获取并展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的，其实你可以用「模块管理器」把这三个库「打包」成一个文件。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，什么是模块管理器……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不同平台的模块管理器不同啦。前端的模块管理器一般指管理 AMD 或者 CommonJS 模块的东西。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好……吧，什么是 AMD 和 CommonJS？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是两个定义。我们有很多方式来描述 JS 中多个库或类的交互方式，比如 exports 和 requires。你可以按照 AMD 或者 CommonJS 的 API 来书写 JS，然后用 Browserify 将它们打包。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来很有道理。不过，什么是 Browserify？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个工具，用来将 CommonJS 形式的 JS 文件打包起来，放到浏览器里运行。用 npm 仓库的人发明了 CommonJS。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">npm 仓库是什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个公开的仓库，用于放置可依赖的模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">就像一个 CDN 么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不太一样。它更像是一个数据库，每个人都能在上面发布代码，也能下载上面的代码。你可以在开发的时候将这些代码下载到本地来使用，必要的时候也能上传到 CDN。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是 Bower！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过现在是 2016 年了，没有人用 Bower 了……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，我知道了，所以我应该用 npm 来安装依赖。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。我举个例子吧，如果你要使用 React，你直接用 npm 安装 React，然后在代码里导入 React 就可以了。大部分 JS 库都能这么安装。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">嗯，Angular 也可以。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Angular 是 2015 年的事情了。不过今年 Angular 还没死，还有 VueJS 和 RxJS 等等，你想学一学么？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还是用 React 吧。我刚才已经学了够多东西了。所以我用 npm 安装 React 然后用 Browerify 来打包就好了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这么做看起来有点过于复杂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">确实。这就是为什么你应该使用 Grunt、Gulp 或者 Broccoli 这样的任务管理工具，它们能自动运行 Browserify。不对，你现在可以用 Mimosa。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你在说什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">任务管理工具。不过我们现在已经不用了。去年我们还在用，后来改成了 Makefiles，但是现在我们用的都是 Webpack。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我以为只有 C/C++ 项目才会用 Makefiles。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过显然我们做 Web 开发的，喜欢先把事情搞复杂，然后回归到最朴素的状态。每年我们都是这么搞的。你就看着吧，过不了两年，我们就可以在网页上写汇编了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，你刚才说的 Webpack 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">另一种模块管理工具，同时也是一个任务管理工具。你可以认为它是 Browserify 的加强版。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，为什么 Webpack 是加强版？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，可能并没有加强吧。Webpack 告诉你应该如何管理你的依赖，Webpack 允许你使用不同的模块管理器，不只是 CommonJS，甚至支持 ES6 模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这都是哪跟哪啊，我都被绕晕了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大家都被绕晕了，不过等 SystemJS 出来了就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐，又一个 JS 库，这是什么鬼？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">呵呵，不像 Browserify 和 Webpack 1.x，SystemJS 是一个动态的模块加载器。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，刚才不是说应该把所有依赖打包成一个文件吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">话是这么说，但是等 HTTP/2 普及之后，不打包反而更好。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">那为什么我们不直接在页面里添加 React 的三个依赖文件呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行。你可以从 CDN 加载这些文件，但是你还是要在本地用 Babel 转译。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，这么鹾？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，你不能在生产环境上运行 babel，你应该在发布到生产环境之前，运行一系列的任务，包括压缩、混淆、内联化CSS、延迟加载script……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我懂了我懂了。既然我不能直接用 CDN，那么我应该怎么做？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我会考虑用 Webpack + SystemJS + Babel 来转译 Typescript。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Typescript？我们不是在说 JavaScript 吗？！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Typescript 也是 JavaScript 呀，它比 JS 更好用，是 JS 的超集，它是基于 ES6 的，就是我们刚才谈论的 ES6，你还记得吧。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES2016+ 已经是 ES6 的超集了，怎么又冒出来一个 Typescript？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是这样的，Typescript 能让我们写出「强类型」的 JS，从而减少运行时的错误。2016年，我们应该让 JS 支持强类型了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">显然 Typescript 可以做到。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Flow 也可以做到，区别是 Typescript 需要编译，而 Flow 只是检查语法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，Flow 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个静态类型检查器，就是 Facebook 的人写的。使用 OCaml 写的，函数式编程很叼的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">OCaml？函数式编程？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">如今大牛都用这些东西，都2016年了，你懂的，函数式编程、高阶函数、柯里化、纯函数这些概念。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">一开始大家都不知道。这么说吧，你只需要知道函数式编程比面向对象编程厉害，2016 年我们就指着函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，我大学里学过面向对象编程，当时我觉得它还不错。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Java 在被 Oracle 买下来之前也挺不错啊。我的意思是，面向对象以前是不错，现在依然有人用它，但是现在所有人都发觉状态变换是很难维护的，所以大家都开始用「不可变对象」和函数式编程了。Haskell 的人已经用这套东西用了很久了，不过幸运的是 Web 开发领域里有 Ramda 这样的库，让我们用 JS 就可以进行函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚刚是不是又抛出了几个名词？Ramnda 又是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不是 Ramnda，是 Ramda，跟 Lambda 表达式有点像。是 David Chambers 写的库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">谁？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">David Chambers，大神一个。blablabla</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我不得不打断你一下了。这些东西看起来都不错，但是我觉得它们都太复杂，而且没必要。我只是想获取数据然后展示，我很确定这种情况下我不需要掌握这些知识。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回到 React 吧，用 React 我怎么从服务器获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，React 没有提供这个功能，你只能用 React 展示数据。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">服了啊。那我怎么获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你用 Fetch API 就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？这个 API 的名字很烂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我也觉得是啊。Fetch API 是浏览器提供的异步请求接口。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，那不就是 AJAX。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">AJAX 只是使用 XMLHttpRequest 对象，但是 Fetch API 可以让你用 Promise 风格来发起异步请求，帮你摆脱「回调地狱」。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回调地狱？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，每次你发起一个异步请求，就得等待它响应。这时你就得在函数里使用一个函数，这种嵌套调用就是回调地狱。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧。Promise 解决了这个问题么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。用 Promise 来管理回调，你就可以写出更易读的代码，更容易测试的代码。甚至可以同时发起多个请求，然后等待它们全部返回。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Fetch 也能做到吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。但前提是你的用户使用了新版的浏览器，不然的话你就需要加一个 Fetch 的 「polyfill」，或者使用 Request、Bluebird 或者 Axios 这些库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐我到底需要多少个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这是 JS，同一件事情有上千个库在做。我们了解库，而且我们有最好的库，我们有海量的库，要什么有什么。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚才说的几个库都是干什么的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这几个库操作 XMLHttpRequest 然后返回 Promise 对象。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好像 jQuery 的 ajax 方法做的是同样的事吧……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">从 2016 年起我们就不用 jQuery 了。用 Fetch，大不了加个 Polyfill，要不然用 Bluebird、Request 或者 Axios 都行。然后用 await 和 async 管理 Promise，这样才能控制好异步任务。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这是你第三次说 await 了，那是什么东西？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">await 能让你拦住一个异步调用，让你更好地控制异步返回的数据，大大增强了代码的可读性。await 非常好用，你只需要在 Babel 里添加 stage–3 配置，或者添加 syntax-async-functions 和 transform-async-to-generator 插件就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没疯。为了使用 await，把 Typescript 编译之后再用 Babel 转译一道的人才是疯了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？Typescript 不支持 await？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">下个版本就支持了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我已经无话可说了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你看其实很简单。用 Typescript 写代码，用 Fetch 发起异步请求，所有代码编译成 ES6，然后用上 Babel 的 stage–3 配置项，把 ES6 转译成 ES5。所有代码用 SystemJS 加载。如果你用不了 Fetch，就加个 polyfill，或者用 Bluebird、Request 或者 Axios，这样你就可以用 await 来处理 Promise 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">看来我们俩对于「简单」的理解是不同的。好吧，有了这些，我终于可以获取数据然后用 React 展示数据了，对吧？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你的网页需要处理状态变更吗？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唔，不用吧。我只是想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">那就好，不然我就得跟你解释 Flux，以及 Flux 的一些实现，比如 Flummox、Alt、Fluxible。不过说真的你应该用 Redux。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你说的这些我就当耳旁风了。再说一次，我只想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这样啊，如果你只是想展示数据，其实你不需要 React。你只需要一个模板引擎。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你逗我呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我只是告诉你你可以用什么技术。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">别说了，真的。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我想说，即使只是用一个模板引擎，我还是会用 Typescript + SystemJS + Babel 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我只是想在页面上展示数据，你就告诉我用哪个模板引擎就好了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">有很多，你用过哪一个？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，太久没用了，不记得了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">jTemplates、jQote 还是 PURE？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，不记得，还有别的么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Transparency? JSRender? MarkupJS? KnockoutJS? 这一个支持双向绑定。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还有吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">PlatesJS? jQuery-tmpl? Handlebars? 还有些人在用。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">有点像。有哪些跟最后一个比较像的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Mustache, underscore? 我记得连 Lodash 都有一个模板引擎，不过这是 2014 年的事情了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，也许是再新一点的库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Jade? DustJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">DotJS? EJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。</p><p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Nunjucks? ECT?</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。记不起来了，要是你的话，你用哪个？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我应该会用 ES6 原生的模板字符串</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我猜猜，只有 ES6 支持。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Babel</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 npm 安装</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Browserify 或者 Webpack，或者 SystemJS</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果没用 Webpack 的话，我还需要一个任务管理工具。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">但是由于我要用函数式编程和强类型语言，所以我首先要用上 Typescript 或者 Flow。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果我要用 await，那我就必须用 Babel 转译。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">然后我就能用上 Fetch、Promise 和各种炫酷的东西。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，别忘了加上 Fetch 的 Polyfill，因为 Safari 不支持 Fetch。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你猜怎么着，我们就聊到这吧。我不做了，我不做 Web 了，我也不想再碰 JS 了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没事，过不了几年，我们都会用 Elm 或者 WebAssembly 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我要回后端去了，我受不这些变动、版本更新、编译和转译了，JS 社区如果觉得有人能跟上它的脚步，那这个社区就是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我理解你。我建议你去 Python 社区。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">听说过 Python 3 吗？</p><br><p id=\"div-border-top-blue\"><i>译者注：最后一句「听说过 Python 3 吗？」是讽刺 Python 3 发布已经 8 年了，Python 社区却依然在使用 Python 2.7。而 JS 社区正好相反，把还没有实现的语言特性都用到生成环境中了！</i></p>\n\n<p>译者：方应杭<br><a href=\"https://link.zhihu.com/?target=https%3A//hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f\" target=\"_blank\" rel=\"external\">原文</a></p>\n","excerpt":"<p id=\"div-border-left-blue\" style=\"width:90%;\">嘿，我最近接到一个 Web 项目，不过老实说，我这两年没怎么接触 Web 编程，听说 Web 技术已经发生了一些变化。听说你是这里对新技术最了解的 Web 开发工程师？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">准确地说，我是一名「前端工程师」。不过你算是找对人了。我对今年的技术别提多熟了，前端可视化、音乐播放器、能踢足球的无人机，你尽管问吧。我刚去 JS 大会和 React 大会逛了一圈，没有什么新技术是我不知道的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">厉害。是这样的，我要开发一个网页，用来展示用户的最新动态。我想我应该通过后端接口获取数据，然后用一个 table 来展示数据，用户可以对数据进行排序。如果服务器上的数据变化了，我还需要更新这个 table。我的思路是用 jQuery 来做。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">可别用 jQuery！现在哪还有人用 jQuery。现在是 2016 年了，你绝对应该用 React。</p>","more":"<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，React 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是一个非常厉害的库，Facebook 的牛人写的。它能让页面更可控，性能极高，而且使用起来很简单。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来确实不错。我能用 React 展示服务器传来的数据吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">当然可以，你只需要添加两个依赖，一个是 React，一个是 React DOM</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，等下，为什么是两个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">React 是我说的库，React DOM 是用来操作 DOM 的。因为这些 DOM 是用 JSX 写的，所以需要一个专门的库来操作。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">JSX？JSX 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">JSX 是对 JS 的扩展，它看起来跟 XML 差不多，可以用来写 HTML，你可以认为 JSX 是一种更优雅的 HTML 写法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么不用 HTML 了……？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">现在可是 2016 年啊，没有直接写 HTML 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。好吧，加了这两个依赖，是不是就可以开始用 React 了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行哦。你需要添加 Babel，然后才能用 React。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Babel 是另一个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，Babel 是一个转译工具，Babel 能把你写的 JS 转译成任意版本的 JS。你不一定非要用 Babel，但是如果你不用的话，你就只能写 ES5 的语法了。你知道的，现在是 2016 年，你怎么能不使用 ES2016+ 的语法呢？ES2016+ 多么酷啊。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES5 是啥？ES2016+ 又是啥？我有点晕。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">ES5 就是 ECMAScript 5。大部分人都会使用 ES5，因为大部分浏览器都支持 ES5。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ECMAScript 是啥……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你晓得的，JS是1995年诞生的，而JS的标准是1999制定出来的。那时候 JavaScript 还叫做 Livescript，只能运行在网景的浏览器里。那时真是混乱的年代，现在好了，我们有了 JS 的 7 个版本的规范。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">7 个版本？那 ES5 和 ES2016+ 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">分别是第 5 个版本和第 7 个版本。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">诶，那第六个版本呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你说的是 ES6。每个版本都是上一个版本的超集，所以你直接使用最新的 ES2016+ 就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">对哦。为什么不用 ES6 呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">好吧，你可以用 ES6，但是你就用不到 async 和 await 这么酷的语法了。用 ES2016+ 比较好。用 ES6 的话你就只能用 generator 来控制异步任务流了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么……你说了太多我听不懂的名词了。我只是想从服务器取点数据，我以前用 jQuery 挺好的，从 CDN 引入 jQuery，我就能用 AJAX 获取数据了，现在不能这样做吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大哥，都 2016 年了，没人用 jQuery 好吗。所有人都知道用 jQuery 只会造出「意大利面条」一样的代码（不可维护）</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，所以我现在要加载三个库才能获取并展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的，其实你可以用「模块管理器」把这三个库「打包」成一个文件。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，什么是模块管理器……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不同平台的模块管理器不同啦。前端的模块管理器一般指管理 AMD 或者 CommonJS 模块的东西。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好……吧，什么是 AMD 和 CommonJS？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是两个定义。我们有很多方式来描述 JS 中多个库或类的交互方式，比如 exports 和 requires。你可以按照 AMD 或者 CommonJS 的 API 来书写 JS，然后用 Browserify 将它们打包。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来很有道理。不过，什么是 Browserify？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个工具，用来将 CommonJS 形式的 JS 文件打包起来，放到浏览器里运行。用 npm 仓库的人发明了 CommonJS。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">npm 仓库是什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个公开的仓库，用于放置可依赖的模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">就像一个 CDN 么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不太一样。它更像是一个数据库，每个人都能在上面发布代码，也能下载上面的代码。你可以在开发的时候将这些代码下载到本地来使用，必要的时候也能上传到 CDN。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是 Bower！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过现在是 2016 年了，没有人用 Bower 了……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧，我知道了，所以我应该用 npm 来安装依赖。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。我举个例子吧，如果你要使用 React，你直接用 npm 安装 React，然后在代码里导入 React 就可以了。大部分 JS 库都能这么安装。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">嗯，Angular 也可以。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Angular 是 2015 年的事情了。不过今年 Angular 还没死，还有 VueJS 和 RxJS 等等，你想学一学么？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还是用 React 吧。我刚才已经学了够多东西了。所以我用 npm 安装 React 然后用 Browerify 来打包就好了？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这么做看起来有点过于复杂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">确实。这就是为什么你应该使用 Grunt、Gulp 或者 Broccoli 这样的任务管理工具，它们能自动运行 Browserify。不对，你现在可以用 Mimosa。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你在说什么……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">任务管理工具。不过我们现在已经不用了。去年我们还在用，后来改成了 Makefiles，但是现在我们用的都是 Webpack。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我以为只有 C/C++ 项目才会用 Makefiles。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，不过显然我们做 Web 开发的，喜欢先把事情搞复杂，然后回归到最朴素的状态。每年我们都是这么搞的。你就看着吧，过不了两年，我们就可以在网页上写汇编了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，你刚才说的 Webpack 是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">另一种模块管理工具，同时也是一个任务管理工具。你可以认为它是 Browserify 的加强版。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，好吧，为什么 Webpack 是加强版？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，可能并没有加强吧。Webpack 告诉你应该如何管理你的依赖，Webpack 允许你使用不同的模块管理器，不只是 CommonJS，甚至支持 ES6 模块。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这都是哪跟哪啊，我都被绕晕了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">大家都被绕晕了，不过等 SystemJS 出来了就好了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐，又一个 JS 库，这是什么鬼？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">呵呵，不像 Browserify 和 Webpack 1.x，SystemJS 是一个动态的模块加载器。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，刚才不是说应该把所有依赖打包成一个文件吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">话是这么说，但是等 HTTP/2 普及之后，不打包反而更好。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">那为什么我们不直接在页面里添加 React 的三个依赖文件呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不行。你可以从 CDN 加载这些文件，但是你还是要在本地用 Babel 转译。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，这么鹾？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，你不能在生产环境上运行 babel，你应该在发布到生产环境之前，运行一系列的任务，包括压缩、混淆、内联化CSS、延迟加载script……</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我懂了我懂了。既然我不能直接用 CDN，那么我应该怎么做？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我会考虑用 Webpack + SystemJS + Babel 来转译 Typescript。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Typescript？我们不是在说 JavaScript 吗？！</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Typescript 也是 JavaScript 呀，它比 JS 更好用，是 JS 的超集，它是基于 ES6 的，就是我们刚才谈论的 ES6，你还记得吧。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">ES2016+ 已经是 ES6 的超集了，怎么又冒出来一个 Typescript？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是这样的，Typescript 能让我们写出「强类型」的 JS，从而减少运行时的错误。2016年，我们应该让 JS 支持强类型了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">显然 Typescript 可以做到。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Flow 也可以做到，区别是 Typescript 需要编译，而 Flow 只是检查语法。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唉，Flow 是？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是一个静态类型检查器，就是 Facebook 的人写的。使用 OCaml 写的，函数式编程很叼的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">OCaml？函数式编程？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">如今大牛都用这些东西，都2016年了，你懂的，函数式编程、高阶函数、柯里化、纯函数这些概念。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">不知道你在说什么。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">一开始大家都不知道。这么说吧，你只需要知道函数式编程比面向对象编程厉害，2016 年我们就指着函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">等下，我大学里学过面向对象编程，当时我觉得它还不错。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Java 在被 Oracle 买下来之前也挺不错啊。我的意思是，面向对象以前是不错，现在依然有人用它，但是现在所有人都发觉状态变换是很难维护的，所以大家都开始用「不可变对象」和函数式编程了。Haskell 的人已经用这套东西用了很久了，不过幸运的是 Web 开发领域里有 Ramda 这样的库，让我们用 JS 就可以进行函数式编程了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚刚是不是又抛出了几个名词？Ramnda 又是什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">不是 Ramnda，是 Ramda，跟 Lambda 表达式有点像。是 David Chambers 写的库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">谁？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">David Chambers，大神一个。blablabla</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我不得不打断你一下了。这些东西看起来都不错，但是我觉得它们都太复杂，而且没必要。我只是想获取数据然后展示，我很确定这种情况下我不需要掌握这些知识。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回到 React 吧，用 React 我怎么从服务器获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">额，React 没有提供这个功能，你只能用 React 展示数据。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">服了啊。那我怎么获取数据？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你用 Fetch API 就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？这个 API 的名字很烂啊。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我也觉得是啊。Fetch API 是浏览器提供的异步请求接口。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">哦，那不就是 AJAX。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">AJAX 只是使用 XMLHttpRequest 对象，但是 Fetch API 可以让你用 Promise 风格来发起异步请求，帮你摆脱「回调地狱」。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">回调地狱？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的，每次你发起一个异步请求，就得等待它响应。这时你就得在函数里使用一个函数，这种嵌套调用就是回调地狱。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好吧。Promise 解决了这个问题么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。用 Promise 来管理回调，你就可以写出更易读的代码，更容易测试的代码。甚至可以同时发起多个请求，然后等待它们全部返回。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">Fetch 也能做到吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">是的。但前提是你的用户使用了新版的浏览器，不然的话你就需要加一个 Fetch 的 「polyfill」，或者使用 Request、Bluebird 或者 Axios 这些库。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">天呐我到底需要多少个库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这是 JS，同一件事情有上千个库在做。我们了解库，而且我们有最好的库，我们有海量的库，要什么有什么。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你刚才说的几个库都是干什么的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这几个库操作 XMLHttpRequest 然后返回 Promise 对象。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">好像 jQuery 的 ajax 方法做的是同样的事吧……</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">从 2016 年起我们就不用 jQuery 了。用 Fetch，大不了加个 Polyfill，要不然用 Bluebird、Request 或者 Axios 都行。然后用 await 和 async 管理 Promise，这样才能控制好异步任务。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">这是你第三次说 await 了，那是什么东西？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">await 能让你拦住一个异步调用，让你更好地控制异步返回的数据，大大增强了代码的可读性。await 非常好用，你只需要在 Babel 里添加 stage–3 配置，或者添加 syntax-async-functions 和 transform-async-to-generator 插件就可以了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">听起来像是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没疯。为了使用 await，把 Typescript 编译之后再用 Babel 转译一道的人才是疯了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">啥玩意？Typescript 不支持 await？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">下个版本就支持了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我已经无话可说了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你看其实很简单。用 Typescript 写代码，用 Fetch 发起异步请求，所有代码编译成 ES6，然后用上 Babel 的 stage–3 配置项，把 ES6 转译成 ES5。所有代码用 SystemJS 加载。如果你用不了 Fetch，就加个 polyfill，或者用 Bluebird、Request 或者 Axios，这样你就可以用 await 来处理 Promise 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">看来我们俩对于「简单」的理解是不同的。好吧，有了这些，我终于可以获取数据然后用 React 展示数据了，对吧？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">你的网页需要处理状态变更吗？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">唔，不用吧。我只是想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">那就好，不然我就得跟你解释 Flux，以及 Flux 的一些实现，比如 Flummox、Alt、Fluxible。不过说真的你应该用 Redux。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你说的这些我就当耳旁风了。再说一次，我只想展示数据。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">这样啊，如果你只是想展示数据，其实你不需要 React。你只需要一个模板引擎。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你逗我呢？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我只是告诉你你可以用什么技术。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">别说了，真的。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我想说，即使只是用一个模板引擎，我还是会用 Typescript + SystemJS + Babel 的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我只是想在页面上展示数据，你就告诉我用哪个模板引擎就好了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">有很多，你用过哪一个？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，太久没用了，不记得了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">jTemplates、jQote 还是 PURE？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，不记得，还有别的么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Transparency? JSRender? MarkupJS? KnockoutJS? 这一个支持双向绑定。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">还有吗？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">PlatesJS? jQuery-tmpl? Handlebars? 还有些人在用。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">有点像。有哪些跟最后一个比较像的？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Mustache, underscore? 我记得连 Lodash 都有一个模板引擎，不过这是 2014 年的事情了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">额，也许是再新一点的库？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Jade? DustJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">DotJS? EJS？</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。</p><p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">Nunjucks? ECT?</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">没用过。记不起来了，要是你的话，你用哪个？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我应该会用 ES6 原生的模板字符串</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我猜猜，只有 ES6 支持。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Babel</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 npm 安装</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">需要用 Browserify 或者 Webpack，或者 SystemJS</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果没用 Webpack 的话，我还需要一个任务管理工具。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">但是由于我要用函数式编程和强类型语言，所以我首先要用上 Typescript 或者 Flow。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">如果我要用 await，那我就必须用 Babel 转译。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">对的。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">然后我就能用上 Fetch、Promise 和各种炫酷的东西。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">嗯，别忘了加上 Fetch 的 Polyfill，因为 Safari 不支持 Fetch。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">你猜怎么着，我们就聊到这吧。我不做了，我不做 Web 了，我也不想再碰 JS 了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">没事，过不了几年，我们都会用 Elm 或者 WebAssembly 了。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">我要回后端去了，我受不这些变动、版本更新、编译和转译了，JS 社区如果觉得有人能跟上它的脚步，那这个社区就是疯了。</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">我理解你。我建议你去 Python 社区。</p>\n\n<p id=\"div-border-left-blue\" style=\"width:90%\">为什么？</p>\n\n<p id=\"div-border-right-green\" style=\"width:90%;margin-left:10%\">听说过 Python 3 吗？</p><br><p id=\"div-border-top-blue\"><i>译者注：最后一句「听说过 Python 3 吗？」是讽刺 Python 3 发布已经 8 年了，Python 社区却依然在使用 Python 2.7。而 JS 社区正好相反，把还没有实现的语言特性都用到生成环境中了！</i></p>\n\n<p>译者：方应杭<br><a href=\"https://link.zhihu.com/?target=https%3A//hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f\">原文</a></p>"},{"title":"Sass入门教程","date":"2016-10-23T02:49:15.000Z","comments":0,"_content":"\n <span id=\"inline-blue\" style=\"font-size:100%;border-radius:3px;\">Sass</span>： (Syntactically Awesome StyleSheets)\n\n1.sass简介\n---\n来自于官网的简介：\nSass is the most mature, stable, and powerful professional grade CSS extension language in the world.\n<font color=red>Sass是世界上最成熟的，稳定的，功能强大的专业级CSS扩展语言。</font>\n\n<!-- more -->\n\n2.sass安装\n---\n因为sass依赖ruby环境，所以装sass之前先确认安装了ruby.\n在安装的时候，请勾选Add Ruby executables to your PATH这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到ruby环境.\n![](http://i1.piimg.com/567571/3a876fb3bb575d25.png)\n\n安装完ruby之后，在开始菜单中，打开我们的命令行，输入\n```\nruby -v\n```\n![](http://i1.piimg.com/567571/e5795e583371ce6d.png)\n那么我们的ruby就安装成功了。\n\n然后直接在命令行中输入\n`gem install sass`\n按回车键确认，等待一段时间就会提示你sass安装成功。\n\n如果要安装beta版本的，可以在命令行中输入\n`gem install sass --pre`\n\n最近因为墙的比较厉害，如果你没有安装成功，那么请参考下面的淘宝的RubyGems镜像安装sass，如果成功则忽略。\n由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过gem sources命令来配置源，先移除默认的https://rubygems.org源，然后添加淘宝的源 `https://ruby.taobao.org/` ，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入sass安装命令gem install sass了.\n\n```\ngem sources --remove https://rubygems.org/\ngem sources -a https://ruby.taobao.org/\ngem sources -l\n```\n如果输出：\n```\n*** CURRENT SOURCES ***\nhttps://ruby.taobao.org\n```\n则表示镜像替换成功，下一步\n```\ngem install sass\n```\n\n按回车键确认，等待一段时间就会提示你sass安装成功。\n\n如果你熟悉git命令的话，你还可以从sass的Git repository来安装，git的命令行为\n```\ngit clone git://github.com/nex3/sass.git\ncd sass\nrake install\n```\n\n升级sass版本的命令行为\n`gem update sass`\n\n如果想要安装sass的某一特定版本，命令行为\n`gem install sass --version=3.3.0`\n\n如果想要删除sass的某一特定版本，命令行为\n`gem uninstall sass --version=3.3.0`\n\n卸载sass,命令行为\n`gem uninstall sass`\n\n查看sass版本的命令行为\n`sass -v`\n\n查看ruby安装的所有程序包，命令语句为`gem list`\n\n\n\n单文件转换命令\n```\nsass style.scss style.css\n```\n\n单文件监听命令\n`sass --watch style.scss:style.css`\n\n文件夹监听命令\n`sass --watch sassFileDirectory:cssFileDirectory`\n\ncss文件转成sass/scss文件\n```\nsass-convert style.css style.sass\nsass-convert style.css style.scss\n```\n\n### sass语法\n变量\nsass 的变量必须是 $ 开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(：)分隔开（就像CSS属性设置一样），如果值后面加上!default则表示默认值。\n普通变量\n定义之后可以在全局范围内使用。\n``` css\n$fontSize: 12px;\nbody {\n    font-size: $fontSize;\n}\n```\n\n默认变量\nsass的默认变量仅需要在值后面加上 `!default` 即可。\n``` css\n$baseLineHeight: 1.5 !default;\nbody {\n    line-height: $baseLineHeight;\n}\n```\n\nsass的默认变量一般是用来设置默认值，然后根据需求来覆盖的。\n``` css\n$baseLineHeight: 1.5 !default;\nbody {\n    line-height: 2;\n}\np {\n    line-height: $baseLineHeight;\n}\n```\n\n特殊变量\n一般我们定义的变量都为属性值，可直接使用，但是如果变量作为属性或在某些特殊情况下等则必须要以 `#{$variables}` 形式使用。\n``` css\n$borderDirection: top !default;\n$baseFontSize: 12px !default;\n$baseLineHeight: 1.5 !default;\n\n//应用于class和属性\n.border-#{$borderDirection} {\n    border-#{$borderDirection}: 1px solid #ccc;\n}\n//应用于复杂的属性值\nbody {\n    font:#{$baseFontSize}/#{$baseLineHeight};\n}\n```\n\n多值变量\n多值变量分为list类型和map类型，简单来说list类型有点像js中的数组，而map类型有点像js中的对象。\nlist\nlist数据可通过空格，逗号或小括号分隔多个值，可用nth($var,$index)取值。关于list数据操作还有很多其他函数如 `length($list)` ， `join($list,$list2,[$separator])` ， `append($list,$value,[$separator])` 等。\ndemo ：\n``` css\n$linkColor: #08c #333 !default;\na {\n    color: nth($linkColor,1);\n    &:hover {\n        color: nth($likColor,2);\n    }\n}\n\n```\n\nmap\nmap数据以key和value成对出现，其中value又可以是list。格式为： `$map:(key1: value1,key2:value2,key3:value3);` 。可通过 `map-get($map,$key)` 取值。关于map数据还有很多其他函数如 `map-merge($map1,$map2)` ， `map-keys($map)` ， `map-values($map)` 等。\n``` css\n$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);\n@each $header,$size in $headings {\n  #{$header} {\n    font-size: $size;\n  }\n}\n```\n\n全局变量\n在变量值后面加上!global即为全局变量。\n在选择器中声明的变量会覆盖外面全局声明的变量。\n``` css\n$fontSize: 12px;\nbody {\n  $fontSize: 14px;\n  font-size: $fontSize;\n}\np {\n  font-size: $fontSize;\n}\n```\n\n启用global之后的机制\n\n``` css\n$fontSize: 12px;\nbody {\n  $fontSize: 14px !global;\n  font-size: $fontSize;\n}\np {\n  font-size: $fontSize;\n}\n```\n\n与上面的机制对比就会发现默认在选择器里面的变量为局部变量，而只有设置了!global之后才会成为全局变量。\n\n\n### 嵌套(Nesting)\nsass的嵌套包括两种：一种是选择器的嵌套；另一种是属性的嵌套。\n##### 选择器嵌套\n所谓选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性。\n在选择器嵌套中，可以使用 `&` 表示父元素选择器\n``` css\n#top_nav {\n  line-height: 30px;\n  text-transform: capitalize;\n  background-color: #333;\n  li {\n    display: block;\n  }\n  a {\n    display: block;\n    padding: 0 10px;\n    color: #fff;\n\n    &:hover {\n      color: #ddd;\n    }\n  }\n}\n```\n\n##### 属性嵌套\n所谓属性嵌套指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。\n``` css\n.fakeshadow {\n  border: {\n    style: solid;\n    left: {\n      width: 4px;\n      color: #888;\n    }\n    right: {\n      width: 2px;\n      color: #ccc;\n    }\n  }\n}\n```\n当然这个只是属性嵌套的一个例子，在实际中这样来写 `border` 的样式或许有些复杂了，但在属性嵌套在别的地方肯定用得到。\n\n#### @at-root\n`@at-root` 用来跳出选择器嵌套的。默认所有的嵌套，继承所有上级选择器，但有了这个就可以跳出所有上级选择器。\n###### 普通跳出嵌套\n``` css\n/*没有跳出*/\n.parent-1 {\n  color: #f00;\n  .child {\n    width: 100px\n  }\n}\n\n/*单个选择器跳出*/\n.parent-2 {\n  color: #f00;\n  @at-root .child {\n    width: 200px;\n  }\n}\n\n\n/*多个选择器跳出*/\n.parent-3 {\n  background: #f00;\n  @at-root {\n    .child1 {\n      width: 300px;\n    }\n    .child2 {\n      width: 400px;\n    }\n  }\n}\n```\n\n@at-root(without:...)和@at-root(with:...)\n默认 `@at-root` 只会跳出选择器嵌套，而不能跳出 `@media` 或 `@support` ，如果要跳出这两种，则需要使用 `@at-root(without:media)` ，`@at-root(without:support)` 。这个语法的关键词有四个： `all` （表示所有），`true`（表示常规CSS）， `media`（表示media）， 'support'（表示support，因为 `@support` 目前还无法广泛使用）。我们默认的 `@at-root` 其实就是 `@at-root(without:rule)` 。\n``` css\n@media print {\n  .parent1 {\n    color: #000;\n    @at-root .child1 {\n      width: 200px\n    }\n  }\n}\n//跳出media嵌套，父级有效\n@media print {\n  .parent2 {\n    color: #f00;\n    @at-root (without:media) {\n      .child2 {\n        widht: 200px\n      }\n    }\n  }\n}\n//跳出media和父级\n@media print {\n  .parent3 {\n    color: #f00;\n    @at-root (without:all) {\n      .child3 {\n        width: 200px;\n      }\n    }\n  }\n}\n```\n\n`@at-root` 与 `&` 配合使用\n``` css\n.child {\n  @at-root .parent & {\n    color: #f00;\n  }\n}\n```\n\n应用于`@keyframe`\n``` css\n.demo {\n  ...\n  animation: motion 3s infinite;\n  @at-root {\n    @keyframes motion {\n      ...\n    }\n  }\n}\n```\n\n\n### 混合(mixin)\nsass中使用 `@mixin` 声明混合，可以传递参数，参数名以 `$` 符号开始，多个参数以逗号分开，也可以给参数设置默认值，声明的 `@mixin` 通过 `@include` 来调用。\n###### 无参数mixin\n``` css\n@mixin center-block {\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n.demo {\n  @include center-block;\n}\n```\n\n###### 有参数mixin\n``` css\n@mixin opacity($opacity: 50) {\n  opacity: $opacity / 100;\n  filter: alpha(opacity=$opacity);\n}\n```\n\n###### 多个参数mixin\n调用时可直接传入值，如 `@include` 传入参数的个数小于 `@mixin` 定义参数的个数，则按照顺表示，后面不足的使用默认值，如不足的没有默认值则报错。除此之外还可以选择性的传入参数，使用参数名与值同时传入。\n```css\n@mixin horizontal-line($border:1px dashed #ccc,$padding:10px) {\n  border-bottom: $border;\n  padding-top: $padding;\n  padding-bottom: $padding;\n}\n.imgtext-h li {\n  @include horizontal-line(1px solid #ccc);\n}\n.imgtext-h-product li {\n  @include horizontal-line($padding:15px);\n}\n```\n\n###### 多组值参数mixin\n如果一个参数可以有多组值，如 `box-shadow` 、`transition` 等，那么参数则需要在变量后加三个点表示，如 `$variables...` 。\n``` css\n//box-shadow可以有多组值，所以在变量参数后面添加...\n@mixin box-shadow($shadow...) {\n  -webkit-box-shadow: $shadow;\n  box-shadow: $shadow;\n}\n.box {\n  border: 1px solid #ccc;\n  @include box-shadow (0 2px 2px rgba(0,0,0,.3),0 3px 3px rgba(0,0,0,.3),0 4px 4px rgba(0,0,0,.3));\n}\n```\n\n#### @content\n`@content` 可以用来解决css3的 `@media` 等带来的问题。它可以使 `@mixin` 接受一整块样式，接受的样式从 `@content` 开始。\n``` css\n@mixin max-screen($res) {\n  @media only screen and (max-width:$res) {\n    @content;\n  }\n}\n@include max-screen(480px) {\n  body {\n    color: red;\n  }\n}\n```\nPS：`@mixin` 通过 `@include` 调用后解析出来的样式是以拷贝形式存在的，而下面的继承则是以联合声明的方式存在的，所以从3.2.0版本以后，建议传递参数的用 `@mixin` ，而非传递参数的使用下面的继承 `%` 。\n\n#### 继承\n`sass` 中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词 `@extend` ，后面紧跟需要继承的选择器。\n``` css\nh1 {\n  border: 4px solid #ff9aa9;\n}\n.speaker {\n  @extend h1;\n  border-width: 2px;\n}\n```\n\n##### 继承的工作细节\n关于 `@extend` 有两个要点你应该知道。\n- 跟混合器相比，继承生成的 `css` 代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 `css` 体积更小。如果你非常关心你站点的速度，请牢记这一点。\n举个例子,使用混合器的时候：\n``` css\n@mixin border-colors {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n.demo1 {\n  @include border-colors;\n}\n.demo2 {\n  @include border-colors; \n}\n```\n它生成的 `css` 如下：\n``` css\n.demo1 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n.demo2 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n```\n使用继承的时候：\n``` css\n.demo1 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n.demo2 {\n  @extend .demo1; \n}\n```\n它生成的 `css` 如下：\n``` css\n.demo1, .demo2 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n```\n可以看到，继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 `css` 体积更小。\n\n- 继承遵从 `css` 层叠的规则。当两个不同的 `css` 规则应用到同一个 `html` 元素上时，并且这两个不同的 `css` 规则对同一属性的修饰存在不同的值， `css` 层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。\n\n混合器本身不会引起 `css` 层叠的问题，因为混合器把样式直接放到了 `css` 规则中，而继承存在样式层叠的问题。被继承的样式会保持原有定义位置和选择器权重不变。通常来说这并不会引起什么问题，但是知道这点总没有坏处。\n\n#### 使用继承的最佳实践\n通常使用继承会让你的 `css` 美观、整洁。因为继承只会在生成 `css` 时复制选择器，而不会复制大段的 `css` 属性。但是如果你不小心，可能会让生成的 `css` 中包含大量的选择器复制。\n避免这种情况出现的最好方法就是不要在 `css` 规则中使用后代选择器（比如 `.foo .bar`）去继承 `css` 规则。如果你这么做，同时被继承的 `css` 规则有通过后代选择器修饰的样式，生成 `css` 中的选择器的数量很快就会失控。\n例如：\n``` css\n.bip .baz {\n  color: red;\n}\n.foo .bar {\n  @extend .baz;\n}\n```\n生成的css如下：\n``` css\n.bip .baz, .bip .foo .bar, .foo .bip .bar {\n  color: red;\n}\n```\n所以如果允许，尽可能避免这种用法。\n** 值得一提的是，只要你想，你完全可以放心地继承有后代选择器修饰规则的选择器，不管后代选择器多长，但有一个前提就是，不要用后代选择器去继承。 **\n\n###### 占位选择器 `%`\n从 `sass 3.2.0` 以后就可以定义占位选择器 `%` 。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了 `@extend` 去继承相应的样式，都会解析出来所有的样式。占位选择器以 `%` 标识定义，通过 `@extend` 调用。\n``` css\n%ir {\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n$lte7:true !default;\n%clearfix {\n  @if $lte7 {\n    *zoom: 1;\n  }\n  &:before,&:after {\n    content: '';\n    display: table;\n    font: 0/0;\n  }\n  &:after {\n    clear: both;\n  }\n}\n#header {\n  h1 {\n    @extend %ir;\n    width: 300px\n  }\n}\n.ir {\n  @extend %ir;\n}\n```\n如上代码，定义了两个占位选择器 `%ir` 和 `%clearfix` ，其中 `%clearfix` 这个没有调用，所以解析出来的css样式也就没有clearfix部分。占位选择器的出现，使css文件更加简练可控，没有多余。所以可以用其定义一些基础的样式文件，然后根据需要调用产生相应的css。\nps:在 `@media` 中暂时不能 `@extend` `@media` 外的代码片段，以后将会可以。\n\n### 函数\n`sass` 定义了很多函数可供使用，当然你也可以自己定义函数，以@function开始。`sass` 的官方函数链接为：[sass function](http://sass-lang.com/documentation/Sass/Script/Functions.html) ，实际项目中我们使用最多的应该是颜色函数，而颜色函数中又以 `lighten` 减淡和 `darken` 加深使用最多，其调用方法为 `lighten($color,$amout)` 和 `darken($color,$amount)` ，它们的第一个参数都是颜色值，第二个参数都是百分比。\n``` css\n$baseFontSize: 10px !default;\n$gray: #ccc !default;\n\n@function pxToRem($px) {\n  @return $px / $baseFontSize * 1rem;\n}\nbody {\n  font-size: $baseFontSize;\n  color: lighten($gray,10%);\n}\n.test {\n  font-size: pxToRem(16px);\n  color: darken($gray,10%);\n}\n```\n关于 `@mixin` ，`%` ，`@function` 更多说明可参阅：\n[sass文档](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)\n\n\n### 运算\n`sass` 具有运算的特性，可以对数值型的Value（如：数字、颜色、变量等）进行加减乘除四则运算。请注意运算前后请留一个空格，不然会出错。\n``` css\n$baseFontSize: 14px !default;\n$baseLineHeight: 1.5 !default;\n$baseGap: $baseFontSize * $baseLineHeight !default;\n.balber {\n  font-size: $baseGap;    //21px\n}\n```\n\n### 条件判断及循环\n###### @if判断\n`@if` 可一个条件单独使用，也可以和 `@else` 结合多条件使用\n``` css\n$lte7: true;\n$type: monster;\n.ib{\n    display:inline-block;\n    @if $lte7 {\n        *display:inline;\n        *zoom:1;\n    }\n}\np {\n  @if $type == ocean {\n    color: blue;\n  } @else if $type == matador {\n    color: red;\n  } @else if $type == monster {\n    color: green;\n  } @else {\n    color: black;\n  }\n}\n```\n生成的 `css` 如下：\n``` css\n.ib {\n  display: inline-block;\n  *display: inline;\n  *zoom: 1;\n}\np {\n  color: green;\n}\n\n```\n\n###### 三目判断\n语法为：`if($condition,$if_true,$if_false)`。三个参数分别表示：条件，条件为真的值，条件为假的值。\n``` css\nif(true,1px,2px) => 1px\nif(false,1px,2px) => 2px \n```\n\n###### for循环\nfor循环有两种形式，分别为：`@for $var from <start> through <end>` 和 `@for $var from <start> to <end>`。`$i` 表示变量，`start` 表示起始值，`end` 表示结束值，这两个的区别是关键字 `through` 表示包括 `end` 这个数，而 `to` 则不包括 `end` 这个数。\n``` css\n@for $i from 1 through 3 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n}\n@for $i from 5 to 7 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n}\n```\n\n##### each循环\n语法为：`@each $var in <list or map>`。其中 `$var` 表示变量，而 `list` 和 `map` 表示 list 类型数据和 map 类型数据。sass 3.3.0新加入了多字段循环和map数据循环。\n###### 单个字段list数据循环\n``` css\n$animal-list: puma, sea-slug, egret, salamander;\n@each $animal in $animal-list {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n  }\n}\n```\n\n###### 多个字段lsit数据循环\n``` css\n$animal-data: (puma, black, default),(sea-slug, blue, pointer),(egret, white, move);\n@each $animal, $color, $cursor in $animal-data {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n    border: 2px solid $color;\n    cursor: $cursor;\n  }\n}\n```\n\n###### 多个字段map数据循环\n``` css\n$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);\n@each $header, $size in $headings {\n  #{$header} {\n    font-size: $size;\n  }\n}\n\n```\n\n\n# 小结\n本文介绍了 `sass` 最基本部分,你可以轻松地使用 `sass` 编写清晰、无冗余、语义化的 `css` 。对于 `sass` 提供的工具你已经有了一个比较深入的了解，同时也掌握了何时使用这些工具的指导原则。\n\n变量是 `sass` 提供的最基本的工具。通过变量可以让独立的 `css` 值变得可重用，无论是在一条单独的规则范围内还是在整个样式表中。变量、混合器的命名甚至 `sass` 的文件名，可以互换通用 `_` 和 `-` 。同样基础的是 `sass` 的嵌套机制。嵌套允许 `css` 规则内嵌套 `css` 规则，减少重复编写常用的选择器，同时让样式表的结构一眼望去更加清晰。`sass` 同时提供了特殊的父选择器标识符&，通过它可以构造出更高效的嵌套。\n\n你也已经学到了 `sass` 的另一个重要特性，样式导入。通过样式导入可以把分散在多个 `sass` 文件中的内容合并生成到一个 `css` 文件，避免了项目中有大量的 `css` 文件通过原生的 `css @import` 带来的性能问题。通过嵌套导入和默认变量值，导入可以构建更强有力的、可定制的样式。混合器允许用户编写语义化样式的同时避免视觉层面上样式的重复。你不仅学到了如何使用混合器减少重复，同时学习到了如何使用混合器让你的 `css` 变得更加可维护和语义化。最后，我们学习了与混合器相辅相成的选择器继承。继承允许你声明类之间语义化的关系，通过这些关系可以保持你的 `css` 的整洁和可维护性。\n\n[sass文档](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)\n[sass函数列表](http://sass-lang.com/documentation/Sass/Script/Functions.html)","source":"_posts/sass.md","raw":"---\ntitle: Sass入门教程\ndate: 2016-10-23 10:49:15\ncategories: 前端\ntags: [css,sass]\ncomments: false\n---\n\n <span id=\"inline-blue\" style=\"font-size:100%;border-radius:3px;\">Sass</span>： (Syntactically Awesome StyleSheets)\n\n1.sass简介\n---\n来自于官网的简介：\nSass is the most mature, stable, and powerful professional grade CSS extension language in the world.\n<font color=red>Sass是世界上最成熟的，稳定的，功能强大的专业级CSS扩展语言。</font>\n\n<!-- more -->\n\n2.sass安装\n---\n因为sass依赖ruby环境，所以装sass之前先确认安装了ruby.\n在安装的时候，请勾选Add Ruby executables to your PATH这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到ruby环境.\n![](http://i1.piimg.com/567571/3a876fb3bb575d25.png)\n\n安装完ruby之后，在开始菜单中，打开我们的命令行，输入\n```\nruby -v\n```\n![](http://i1.piimg.com/567571/e5795e583371ce6d.png)\n那么我们的ruby就安装成功了。\n\n然后直接在命令行中输入\n`gem install sass`\n按回车键确认，等待一段时间就会提示你sass安装成功。\n\n如果要安装beta版本的，可以在命令行中输入\n`gem install sass --pre`\n\n最近因为墙的比较厉害，如果你没有安装成功，那么请参考下面的淘宝的RubyGems镜像安装sass，如果成功则忽略。\n由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过gem sources命令来配置源，先移除默认的https://rubygems.org源，然后添加淘宝的源 `https://ruby.taobao.org/` ，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入sass安装命令gem install sass了.\n\n```\ngem sources --remove https://rubygems.org/\ngem sources -a https://ruby.taobao.org/\ngem sources -l\n```\n如果输出：\n```\n*** CURRENT SOURCES ***\nhttps://ruby.taobao.org\n```\n则表示镜像替换成功，下一步\n```\ngem install sass\n```\n\n按回车键确认，等待一段时间就会提示你sass安装成功。\n\n如果你熟悉git命令的话，你还可以从sass的Git repository来安装，git的命令行为\n```\ngit clone git://github.com/nex3/sass.git\ncd sass\nrake install\n```\n\n升级sass版本的命令行为\n`gem update sass`\n\n如果想要安装sass的某一特定版本，命令行为\n`gem install sass --version=3.3.0`\n\n如果想要删除sass的某一特定版本，命令行为\n`gem uninstall sass --version=3.3.0`\n\n卸载sass,命令行为\n`gem uninstall sass`\n\n查看sass版本的命令行为\n`sass -v`\n\n查看ruby安装的所有程序包，命令语句为`gem list`\n\n\n\n单文件转换命令\n```\nsass style.scss style.css\n```\n\n单文件监听命令\n`sass --watch style.scss:style.css`\n\n文件夹监听命令\n`sass --watch sassFileDirectory:cssFileDirectory`\n\ncss文件转成sass/scss文件\n```\nsass-convert style.css style.sass\nsass-convert style.css style.scss\n```\n\n### sass语法\n变量\nsass 的变量必须是 $ 开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(：)分隔开（就像CSS属性设置一样），如果值后面加上!default则表示默认值。\n普通变量\n定义之后可以在全局范围内使用。\n``` css\n$fontSize: 12px;\nbody {\n    font-size: $fontSize;\n}\n```\n\n默认变量\nsass的默认变量仅需要在值后面加上 `!default` 即可。\n``` css\n$baseLineHeight: 1.5 !default;\nbody {\n    line-height: $baseLineHeight;\n}\n```\n\nsass的默认变量一般是用来设置默认值，然后根据需求来覆盖的。\n``` css\n$baseLineHeight: 1.5 !default;\nbody {\n    line-height: 2;\n}\np {\n    line-height: $baseLineHeight;\n}\n```\n\n特殊变量\n一般我们定义的变量都为属性值，可直接使用，但是如果变量作为属性或在某些特殊情况下等则必须要以 `#{$variables}` 形式使用。\n``` css\n$borderDirection: top !default;\n$baseFontSize: 12px !default;\n$baseLineHeight: 1.5 !default;\n\n//应用于class和属性\n.border-#{$borderDirection} {\n    border-#{$borderDirection}: 1px solid #ccc;\n}\n//应用于复杂的属性值\nbody {\n    font:#{$baseFontSize}/#{$baseLineHeight};\n}\n```\n\n多值变量\n多值变量分为list类型和map类型，简单来说list类型有点像js中的数组，而map类型有点像js中的对象。\nlist\nlist数据可通过空格，逗号或小括号分隔多个值，可用nth($var,$index)取值。关于list数据操作还有很多其他函数如 `length($list)` ， `join($list,$list2,[$separator])` ， `append($list,$value,[$separator])` 等。\ndemo ：\n``` css\n$linkColor: #08c #333 !default;\na {\n    color: nth($linkColor,1);\n    &:hover {\n        color: nth($likColor,2);\n    }\n}\n\n```\n\nmap\nmap数据以key和value成对出现，其中value又可以是list。格式为： `$map:(key1: value1,key2:value2,key3:value3);` 。可通过 `map-get($map,$key)` 取值。关于map数据还有很多其他函数如 `map-merge($map1,$map2)` ， `map-keys($map)` ， `map-values($map)` 等。\n``` css\n$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);\n@each $header,$size in $headings {\n  #{$header} {\n    font-size: $size;\n  }\n}\n```\n\n全局变量\n在变量值后面加上!global即为全局变量。\n在选择器中声明的变量会覆盖外面全局声明的变量。\n``` css\n$fontSize: 12px;\nbody {\n  $fontSize: 14px;\n  font-size: $fontSize;\n}\np {\n  font-size: $fontSize;\n}\n```\n\n启用global之后的机制\n\n``` css\n$fontSize: 12px;\nbody {\n  $fontSize: 14px !global;\n  font-size: $fontSize;\n}\np {\n  font-size: $fontSize;\n}\n```\n\n与上面的机制对比就会发现默认在选择器里面的变量为局部变量，而只有设置了!global之后才会成为全局变量。\n\n\n### 嵌套(Nesting)\nsass的嵌套包括两种：一种是选择器的嵌套；另一种是属性的嵌套。\n##### 选择器嵌套\n所谓选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性。\n在选择器嵌套中，可以使用 `&` 表示父元素选择器\n``` css\n#top_nav {\n  line-height: 30px;\n  text-transform: capitalize;\n  background-color: #333;\n  li {\n    display: block;\n  }\n  a {\n    display: block;\n    padding: 0 10px;\n    color: #fff;\n\n    &:hover {\n      color: #ddd;\n    }\n  }\n}\n```\n\n##### 属性嵌套\n所谓属性嵌套指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。\n``` css\n.fakeshadow {\n  border: {\n    style: solid;\n    left: {\n      width: 4px;\n      color: #888;\n    }\n    right: {\n      width: 2px;\n      color: #ccc;\n    }\n  }\n}\n```\n当然这个只是属性嵌套的一个例子，在实际中这样来写 `border` 的样式或许有些复杂了，但在属性嵌套在别的地方肯定用得到。\n\n#### @at-root\n`@at-root` 用来跳出选择器嵌套的。默认所有的嵌套，继承所有上级选择器，但有了这个就可以跳出所有上级选择器。\n###### 普通跳出嵌套\n``` css\n/*没有跳出*/\n.parent-1 {\n  color: #f00;\n  .child {\n    width: 100px\n  }\n}\n\n/*单个选择器跳出*/\n.parent-2 {\n  color: #f00;\n  @at-root .child {\n    width: 200px;\n  }\n}\n\n\n/*多个选择器跳出*/\n.parent-3 {\n  background: #f00;\n  @at-root {\n    .child1 {\n      width: 300px;\n    }\n    .child2 {\n      width: 400px;\n    }\n  }\n}\n```\n\n@at-root(without:...)和@at-root(with:...)\n默认 `@at-root` 只会跳出选择器嵌套，而不能跳出 `@media` 或 `@support` ，如果要跳出这两种，则需要使用 `@at-root(without:media)` ，`@at-root(without:support)` 。这个语法的关键词有四个： `all` （表示所有），`true`（表示常规CSS）， `media`（表示media）， 'support'（表示support，因为 `@support` 目前还无法广泛使用）。我们默认的 `@at-root` 其实就是 `@at-root(without:rule)` 。\n``` css\n@media print {\n  .parent1 {\n    color: #000;\n    @at-root .child1 {\n      width: 200px\n    }\n  }\n}\n//跳出media嵌套，父级有效\n@media print {\n  .parent2 {\n    color: #f00;\n    @at-root (without:media) {\n      .child2 {\n        widht: 200px\n      }\n    }\n  }\n}\n//跳出media和父级\n@media print {\n  .parent3 {\n    color: #f00;\n    @at-root (without:all) {\n      .child3 {\n        width: 200px;\n      }\n    }\n  }\n}\n```\n\n`@at-root` 与 `&` 配合使用\n``` css\n.child {\n  @at-root .parent & {\n    color: #f00;\n  }\n}\n```\n\n应用于`@keyframe`\n``` css\n.demo {\n  ...\n  animation: motion 3s infinite;\n  @at-root {\n    @keyframes motion {\n      ...\n    }\n  }\n}\n```\n\n\n### 混合(mixin)\nsass中使用 `@mixin` 声明混合，可以传递参数，参数名以 `$` 符号开始，多个参数以逗号分开，也可以给参数设置默认值，声明的 `@mixin` 通过 `@include` 来调用。\n###### 无参数mixin\n``` css\n@mixin center-block {\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n.demo {\n  @include center-block;\n}\n```\n\n###### 有参数mixin\n``` css\n@mixin opacity($opacity: 50) {\n  opacity: $opacity / 100;\n  filter: alpha(opacity=$opacity);\n}\n```\n\n###### 多个参数mixin\n调用时可直接传入值，如 `@include` 传入参数的个数小于 `@mixin` 定义参数的个数，则按照顺表示，后面不足的使用默认值，如不足的没有默认值则报错。除此之外还可以选择性的传入参数，使用参数名与值同时传入。\n```css\n@mixin horizontal-line($border:1px dashed #ccc,$padding:10px) {\n  border-bottom: $border;\n  padding-top: $padding;\n  padding-bottom: $padding;\n}\n.imgtext-h li {\n  @include horizontal-line(1px solid #ccc);\n}\n.imgtext-h-product li {\n  @include horizontal-line($padding:15px);\n}\n```\n\n###### 多组值参数mixin\n如果一个参数可以有多组值，如 `box-shadow` 、`transition` 等，那么参数则需要在变量后加三个点表示，如 `$variables...` 。\n``` css\n//box-shadow可以有多组值，所以在变量参数后面添加...\n@mixin box-shadow($shadow...) {\n  -webkit-box-shadow: $shadow;\n  box-shadow: $shadow;\n}\n.box {\n  border: 1px solid #ccc;\n  @include box-shadow (0 2px 2px rgba(0,0,0,.3),0 3px 3px rgba(0,0,0,.3),0 4px 4px rgba(0,0,0,.3));\n}\n```\n\n#### @content\n`@content` 可以用来解决css3的 `@media` 等带来的问题。它可以使 `@mixin` 接受一整块样式，接受的样式从 `@content` 开始。\n``` css\n@mixin max-screen($res) {\n  @media only screen and (max-width:$res) {\n    @content;\n  }\n}\n@include max-screen(480px) {\n  body {\n    color: red;\n  }\n}\n```\nPS：`@mixin` 通过 `@include` 调用后解析出来的样式是以拷贝形式存在的，而下面的继承则是以联合声明的方式存在的，所以从3.2.0版本以后，建议传递参数的用 `@mixin` ，而非传递参数的使用下面的继承 `%` 。\n\n#### 继承\n`sass` 中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词 `@extend` ，后面紧跟需要继承的选择器。\n``` css\nh1 {\n  border: 4px solid #ff9aa9;\n}\n.speaker {\n  @extend h1;\n  border-width: 2px;\n}\n```\n\n##### 继承的工作细节\n关于 `@extend` 有两个要点你应该知道。\n- 跟混合器相比，继承生成的 `css` 代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 `css` 体积更小。如果你非常关心你站点的速度，请牢记这一点。\n举个例子,使用混合器的时候：\n``` css\n@mixin border-colors {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n.demo1 {\n  @include border-colors;\n}\n.demo2 {\n  @include border-colors; \n}\n```\n它生成的 `css` 如下：\n``` css\n.demo1 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n.demo2 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n```\n使用继承的时候：\n``` css\n.demo1 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n.demo2 {\n  @extend .demo1; \n}\n```\n它生成的 `css` 如下：\n``` css\n.demo1, .demo2 {\n  width: 200px;\n  height: 200px;\n  border: 1px solid #333;\n}\n```\n可以看到，继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 `css` 体积更小。\n\n- 继承遵从 `css` 层叠的规则。当两个不同的 `css` 规则应用到同一个 `html` 元素上时，并且这两个不同的 `css` 规则对同一属性的修饰存在不同的值， `css` 层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。\n\n混合器本身不会引起 `css` 层叠的问题，因为混合器把样式直接放到了 `css` 规则中，而继承存在样式层叠的问题。被继承的样式会保持原有定义位置和选择器权重不变。通常来说这并不会引起什么问题，但是知道这点总没有坏处。\n\n#### 使用继承的最佳实践\n通常使用继承会让你的 `css` 美观、整洁。因为继承只会在生成 `css` 时复制选择器，而不会复制大段的 `css` 属性。但是如果你不小心，可能会让生成的 `css` 中包含大量的选择器复制。\n避免这种情况出现的最好方法就是不要在 `css` 规则中使用后代选择器（比如 `.foo .bar`）去继承 `css` 规则。如果你这么做，同时被继承的 `css` 规则有通过后代选择器修饰的样式，生成 `css` 中的选择器的数量很快就会失控。\n例如：\n``` css\n.bip .baz {\n  color: red;\n}\n.foo .bar {\n  @extend .baz;\n}\n```\n生成的css如下：\n``` css\n.bip .baz, .bip .foo .bar, .foo .bip .bar {\n  color: red;\n}\n```\n所以如果允许，尽可能避免这种用法。\n** 值得一提的是，只要你想，你完全可以放心地继承有后代选择器修饰规则的选择器，不管后代选择器多长，但有一个前提就是，不要用后代选择器去继承。 **\n\n###### 占位选择器 `%`\n从 `sass 3.2.0` 以后就可以定义占位选择器 `%` 。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了 `@extend` 去继承相应的样式，都会解析出来所有的样式。占位选择器以 `%` 标识定义，通过 `@extend` 调用。\n``` css\n%ir {\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n$lte7:true !default;\n%clearfix {\n  @if $lte7 {\n    *zoom: 1;\n  }\n  &:before,&:after {\n    content: '';\n    display: table;\n    font: 0/0;\n  }\n  &:after {\n    clear: both;\n  }\n}\n#header {\n  h1 {\n    @extend %ir;\n    width: 300px\n  }\n}\n.ir {\n  @extend %ir;\n}\n```\n如上代码，定义了两个占位选择器 `%ir` 和 `%clearfix` ，其中 `%clearfix` 这个没有调用，所以解析出来的css样式也就没有clearfix部分。占位选择器的出现，使css文件更加简练可控，没有多余。所以可以用其定义一些基础的样式文件，然后根据需要调用产生相应的css。\nps:在 `@media` 中暂时不能 `@extend` `@media` 外的代码片段，以后将会可以。\n\n### 函数\n`sass` 定义了很多函数可供使用，当然你也可以自己定义函数，以@function开始。`sass` 的官方函数链接为：[sass function](http://sass-lang.com/documentation/Sass/Script/Functions.html) ，实际项目中我们使用最多的应该是颜色函数，而颜色函数中又以 `lighten` 减淡和 `darken` 加深使用最多，其调用方法为 `lighten($color,$amout)` 和 `darken($color,$amount)` ，它们的第一个参数都是颜色值，第二个参数都是百分比。\n``` css\n$baseFontSize: 10px !default;\n$gray: #ccc !default;\n\n@function pxToRem($px) {\n  @return $px / $baseFontSize * 1rem;\n}\nbody {\n  font-size: $baseFontSize;\n  color: lighten($gray,10%);\n}\n.test {\n  font-size: pxToRem(16px);\n  color: darken($gray,10%);\n}\n```\n关于 `@mixin` ，`%` ，`@function` 更多说明可参阅：\n[sass文档](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)\n\n\n### 运算\n`sass` 具有运算的特性，可以对数值型的Value（如：数字、颜色、变量等）进行加减乘除四则运算。请注意运算前后请留一个空格，不然会出错。\n``` css\n$baseFontSize: 14px !default;\n$baseLineHeight: 1.5 !default;\n$baseGap: $baseFontSize * $baseLineHeight !default;\n.balber {\n  font-size: $baseGap;    //21px\n}\n```\n\n### 条件判断及循环\n###### @if判断\n`@if` 可一个条件单独使用，也可以和 `@else` 结合多条件使用\n``` css\n$lte7: true;\n$type: monster;\n.ib{\n    display:inline-block;\n    @if $lte7 {\n        *display:inline;\n        *zoom:1;\n    }\n}\np {\n  @if $type == ocean {\n    color: blue;\n  } @else if $type == matador {\n    color: red;\n  } @else if $type == monster {\n    color: green;\n  } @else {\n    color: black;\n  }\n}\n```\n生成的 `css` 如下：\n``` css\n.ib {\n  display: inline-block;\n  *display: inline;\n  *zoom: 1;\n}\np {\n  color: green;\n}\n\n```\n\n###### 三目判断\n语法为：`if($condition,$if_true,$if_false)`。三个参数分别表示：条件，条件为真的值，条件为假的值。\n``` css\nif(true,1px,2px) => 1px\nif(false,1px,2px) => 2px \n```\n\n###### for循环\nfor循环有两种形式，分别为：`@for $var from <start> through <end>` 和 `@for $var from <start> to <end>`。`$i` 表示变量，`start` 表示起始值，`end` 表示结束值，这两个的区别是关键字 `through` 表示包括 `end` 这个数，而 `to` 则不包括 `end` 这个数。\n``` css\n@for $i from 1 through 3 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n}\n@for $i from 5 to 7 {\n  .item-#{$i} {\n    width: 2em * $i;\n  }\n}\n```\n\n##### each循环\n语法为：`@each $var in <list or map>`。其中 `$var` 表示变量，而 `list` 和 `map` 表示 list 类型数据和 map 类型数据。sass 3.3.0新加入了多字段循环和map数据循环。\n###### 单个字段list数据循环\n``` css\n$animal-list: puma, sea-slug, egret, salamander;\n@each $animal in $animal-list {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n  }\n}\n```\n\n###### 多个字段lsit数据循环\n``` css\n$animal-data: (puma, black, default),(sea-slug, blue, pointer),(egret, white, move);\n@each $animal, $color, $cursor in $animal-data {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n    border: 2px solid $color;\n    cursor: $cursor;\n  }\n}\n```\n\n###### 多个字段map数据循环\n``` css\n$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);\n@each $header, $size in $headings {\n  #{$header} {\n    font-size: $size;\n  }\n}\n\n```\n\n\n# 小结\n本文介绍了 `sass` 最基本部分,你可以轻松地使用 `sass` 编写清晰、无冗余、语义化的 `css` 。对于 `sass` 提供的工具你已经有了一个比较深入的了解，同时也掌握了何时使用这些工具的指导原则。\n\n变量是 `sass` 提供的最基本的工具。通过变量可以让独立的 `css` 值变得可重用，无论是在一条单独的规则范围内还是在整个样式表中。变量、混合器的命名甚至 `sass` 的文件名，可以互换通用 `_` 和 `-` 。同样基础的是 `sass` 的嵌套机制。嵌套允许 `css` 规则内嵌套 `css` 规则，减少重复编写常用的选择器，同时让样式表的结构一眼望去更加清晰。`sass` 同时提供了特殊的父选择器标识符&，通过它可以构造出更高效的嵌套。\n\n你也已经学到了 `sass` 的另一个重要特性，样式导入。通过样式导入可以把分散在多个 `sass` 文件中的内容合并生成到一个 `css` 文件，避免了项目中有大量的 `css` 文件通过原生的 `css @import` 带来的性能问题。通过嵌套导入和默认变量值，导入可以构建更强有力的、可定制的样式。混合器允许用户编写语义化样式的同时避免视觉层面上样式的重复。你不仅学到了如何使用混合器减少重复，同时学习到了如何使用混合器让你的 `css` 变得更加可维护和语义化。最后，我们学习了与混合器相辅相成的选择器继承。继承允许你声明类之间语义化的关系，通过这些关系可以保持你的 `css` 的整洁和可维护性。\n\n[sass文档](http://sass-lang.com/documentation/file.SASS_REFERENCE.html)\n[sass函数列表](http://sass-lang.com/documentation/Sass/Script/Functions.html)","slug":"sass","published":1,"updated":"2017-01-17T15:19:34.607Z","layout":"post","photos":[],"link":"","_id":"ciysq4ukz000pugi486leijes","content":"<p> <span id=\"inline-blue\" style=\"font-size:100%;border-radius:3px;\">Sass</span>： (Syntactically Awesome StyleSheets)</p>\n<h2 id=\"1-sass简介\"><a href=\"#1-sass简介\" class=\"headerlink\" title=\"1.sass简介\"></a>1.sass简介</h2><p>来自于官网的简介：<br>Sass is the most mature, stable, and powerful professional grade CSS extension language in the world.</p>\n<font color=\"red\">Sass是世界上最成熟的，稳定的，功能强大的专业级CSS扩展语言。</font>\n\n<a id=\"more\"></a>\n<h2 id=\"2-sass安装\"><a href=\"#2-sass安装\" class=\"headerlink\" title=\"2.sass安装\"></a>2.sass安装</h2><p>因为sass依赖ruby环境，所以装sass之前先确认安装了ruby.<br>在安装的时候，请勾选Add Ruby executables to your PATH这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到ruby环境.<br><img src=\"http://i1.piimg.com/567571/3a876fb3bb575d25.png\" alt=\"\"></p>\n<p>安装完ruby之后，在开始菜单中，打开我们的命令行，输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ruby -v</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://i1.piimg.com/567571/e5795e583371ce6d.png\" alt=\"\"><br>那么我们的ruby就安装成功了。</p>\n<p>然后直接在命令行中输入<br><code>gem install sass</code><br>按回车键确认，等待一段时间就会提示你sass安装成功。</p>\n<p>如果要安装beta版本的，可以在命令行中输入<br><code>gem install sass --pre</code></p>\n<p>最近因为墙的比较厉害，如果你没有安装成功，那么请参考下面的淘宝的RubyGems镜像安装sass，如果成功则忽略。<br>由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过gem sources命令来配置源，先移除默认的<a href=\"https://rubygems.org源，然后添加淘宝的源\" target=\"_blank\" rel=\"external\">https://rubygems.org源，然后添加淘宝的源</a> <code>https://ruby.taobao.org/</code> ，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入sass安装命令gem install sass了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem sources --remove https://rubygems.org/</div><div class=\"line\">gem sources -a https://ruby.taobao.org/</div><div class=\"line\">gem sources -l</div></pre></td></tr></table></figure>\n<p>如果输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">*** CURRENT SOURCES ***</div><div class=\"line\">https://ruby.taobao.org</div></pre></td></tr></table></figure></p>\n<p>则表示镜像替换成功，下一步<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install sass</div></pre></td></tr></table></figure></p>\n<p>按回车键确认，等待一段时间就会提示你sass安装成功。</p>\n<p>如果你熟悉git命令的话，你还可以从sass的Git repository来安装，git的命令行为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git://github.com/nex3/sass.git</div><div class=\"line\">cd sass</div><div class=\"line\">rake install</div></pre></td></tr></table></figure></p>\n<p>升级sass版本的命令行为<br><code>gem update sass</code></p>\n<p>如果想要安装sass的某一特定版本，命令行为<br><code>gem install sass --version=3.3.0</code></p>\n<p>如果想要删除sass的某一特定版本，命令行为<br><code>gem uninstall sass --version=3.3.0</code></p>\n<p>卸载sass,命令行为<br><code>gem uninstall sass</code></p>\n<p>查看sass版本的命令行为<br><code>sass -v</code></p>\n<p>查看ruby安装的所有程序包，命令语句为<code>gem list</code></p>\n<p>单文件转换命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass style.scss style.css</div></pre></td></tr></table></figure></p>\n<p>单文件监听命令<br><code>sass --watch style.scss:style.css</code></p>\n<p>文件夹监听命令<br><code>sass --watch sassFileDirectory:cssFileDirectory</code></p>\n<p>css文件转成sass/scss文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass-convert style.css style.sass</div><div class=\"line\">sass-convert style.css style.scss</div></pre></td></tr></table></figure></p>\n<h3 id=\"sass语法\"><a href=\"#sass语法\" class=\"headerlink\" title=\"sass语法\"></a>sass语法</h3><p>变量<br>sass 的变量必须是 $ 开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(：)分隔开（就像CSS属性设置一样），如果值后面加上!default则表示默认值。<br>普通变量<br>定义之后可以在全局范围内使用。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$fontSize: 12px;</div><div class=\"line\">body &#123;</div><div class=\"line\">    font-size: $fontSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>默认变量<br>sass的默认变量仅需要在值后面加上 <code>!default</code> 即可。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$baseLineHeight: 1.5 !default;</div><div class=\"line\">body &#123;</div><div class=\"line\">    line-height: $baseLineHeight;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>sass的默认变量一般是用来设置默认值，然后根据需求来覆盖的。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$baseLineHeight: 1.5 !default;</div><div class=\"line\">body &#123;</div><div class=\"line\">    line-height: 2;</div><div class=\"line\">&#125;</div><div class=\"line\">p &#123;</div><div class=\"line\">    line-height: $baseLineHeight;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>特殊变量<br>一般我们定义的变量都为属性值，可直接使用，但是如果变量作为属性或在某些特殊情况下等则必须要以 <code>#{$variables}</code> 形式使用。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$borderDirection: top !default;</div><div class=\"line\">$baseFontSize: 12px !default;</div><div class=\"line\">$baseLineHeight: 1.5 !default;</div><div class=\"line\"></div><div class=\"line\">//应用于class和属性</div><div class=\"line\">.border-#&#123;$borderDirection&#125; &#123;</div><div class=\"line\">    border-#&#123;$borderDirection&#125;: 1px solid #ccc;</div><div class=\"line\">&#125;</div><div class=\"line\">//应用于复杂的属性值</div><div class=\"line\">body &#123;</div><div class=\"line\">    font:#&#123;$baseFontSize&#125;/#&#123;$baseLineHeight&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>多值变量<br>多值变量分为list类型和map类型，简单来说list类型有点像js中的数组，而map类型有点像js中的对象。<br>list<br>list数据可通过空格，逗号或小括号分隔多个值，可用nth($var,$index)取值。关于list数据操作还有很多其他函数如 <code>length($list)</code> ， <code>join($list,$list2,[$separator])</code> ， <code>append($list,$value,[$separator])</code> 等。<br>demo ：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$linkColor: #08c #333 !default;</div><div class=\"line\">a &#123;</div><div class=\"line\">    color: nth($linkColor,1);</div><div class=\"line\">    &amp;:hover &#123;</div><div class=\"line\">        color: nth($likColor,2);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>map<br>map数据以key和value成对出现，其中value又可以是list。格式为： <code>$map:(key1: value1,key2:value2,key3:value3);</code> 。可通过 <code>map-get($map,$key)</code> 取值。关于map数据还有很多其他函数如 <code>map-merge($map1,$map2)</code> ， <code>map-keys($map)</code> ， <code>map-values($map)</code> 等。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);</div><div class=\"line\">@each $header,$size in $headings &#123;</div><div class=\"line\">  #&#123;$header&#125; &#123;</div><div class=\"line\">    font-size: $size;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>全局变量<br>在变量值后面加上!global即为全局变量。<br>在选择器中声明的变量会覆盖外面全局声明的变量。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$fontSize: 12px;</div><div class=\"line\">body &#123;</div><div class=\"line\">  $fontSize: 14px;</div><div class=\"line\">  font-size: $fontSize;</div><div class=\"line\">&#125;</div><div class=\"line\">p &#123;</div><div class=\"line\">  font-size: $fontSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>启用global之后的机制</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$fontSize: 12px;</div><div class=\"line\">body &#123;</div><div class=\"line\">  $fontSize: 14px !global;</div><div class=\"line\">  font-size: $fontSize;</div><div class=\"line\">&#125;</div><div class=\"line\">p &#123;</div><div class=\"line\">  font-size: $fontSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>与上面的机制对比就会发现默认在选择器里面的变量为局部变量，而只有设置了!global之后才会成为全局变量。</p>\n<h3 id=\"嵌套-Nesting\"><a href=\"#嵌套-Nesting\" class=\"headerlink\" title=\"嵌套(Nesting)\"></a>嵌套(Nesting)</h3><p>sass的嵌套包括两种：一种是选择器的嵌套；另一种是属性的嵌套。</p>\n<h5 id=\"选择器嵌套\"><a href=\"#选择器嵌套\" class=\"headerlink\" title=\"选择器嵌套\"></a>选择器嵌套</h5><p>所谓选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性。<br>在选择器嵌套中，可以使用 <code>&amp;</code> 表示父元素选择器<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">#top_nav &#123;</div><div class=\"line\">  line-height: 30px;</div><div class=\"line\">  text-transform: capitalize;</div><div class=\"line\">  background-color: #333;</div><div class=\"line\">  li &#123;</div><div class=\"line\">    display: block;</div><div class=\"line\">  &#125;</div><div class=\"line\">  a &#123;</div><div class=\"line\">    display: block;</div><div class=\"line\">    padding: 0 10px;</div><div class=\"line\">    color: #fff;</div><div class=\"line\"></div><div class=\"line\">    &amp;:hover &#123;</div><div class=\"line\">      color: #ddd;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"属性嵌套\"><a href=\"#属性嵌套\" class=\"headerlink\" title=\"属性嵌套\"></a>属性嵌套</h5><p>所谓属性嵌套指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.fakeshadow</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border</span>: &#123;</div><div class=\"line\">    style: solid;</div><div class=\"line\">    <span class=\"attribute\">left</span>: &#123;</div><div class=\"line\">      width: <span class=\"number\">4px</span>;</div><div class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#888</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-tag\">right</span>: &#123;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">2px</span>;</div><div class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当然这个只是属性嵌套的一个例子，在实际中这样来写 <code>border</code> 的样式或许有些复杂了，但在属性嵌套在别的地方肯定用得到。</p>\n<h4 id=\"at-root\"><a href=\"#at-root\" class=\"headerlink\" title=\"@at-root\"></a>@at-root</h4><p><code>@at-root</code> 用来跳出选择器嵌套的。默认所有的嵌套，继承所有上级选择器，但有了这个就可以跳出所有上级选择器。</p>\n<h6 id=\"普通跳出嵌套\"><a href=\"#普通跳出嵌套\" class=\"headerlink\" title=\"普通跳出嵌套\"></a>普通跳出嵌套</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*没有跳出*/</div><div class=\"line\">.parent-1 &#123;</div><div class=\"line\">  color: #f00;</div><div class=\"line\">  .child &#123;</div><div class=\"line\">    width: 100px</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*单个选择器跳出*/</div><div class=\"line\">.parent-2 &#123;</div><div class=\"line\">  color: #f00;</div><div class=\"line\">  @at-root .child &#123;</div><div class=\"line\">    width: 200px;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/*多个选择器跳出*/</div><div class=\"line\">.parent-3 &#123;</div><div class=\"line\">  background: #f00;</div><div class=\"line\">  @at-root &#123;</div><div class=\"line\">    .child1 &#123;</div><div class=\"line\">      width: 300px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .child2 &#123;</div><div class=\"line\">      width: 400px;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>@at-root(without:…)和@at-root(with:…)<br>默认 <code>@at-root</code> 只会跳出选择器嵌套，而不能跳出 <code>@media</code> 或 <code>@support</code> ，如果要跳出这两种，则需要使用 <code>@at-root(without:media)</code> ，<code>@at-root(without:support)</code> 。这个语法的关键词有四个： <code>all</code> （表示所有），<code>true</code>（表示常规CSS）， <code>media</code>（表示media）， ‘support’（表示support，因为 <code>@support</code> 目前还无法广泛使用）。我们默认的 <code>@at-root</code> 其实就是 <code>@at-root(without:rule)</code> 。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media print &#123;</div><div class=\"line\">  .parent1 &#123;</div><div class=\"line\">    color: #000;</div><div class=\"line\">    @at-root .child1 &#123;</div><div class=\"line\">      width: 200px</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//跳出media嵌套，父级有效</div><div class=\"line\">@media print &#123;</div><div class=\"line\">  .parent2 &#123;</div><div class=\"line\">    color: #f00;</div><div class=\"line\">    @at-root (without:media) &#123;</div><div class=\"line\">      .child2 &#123;</div><div class=\"line\">        widht: 200px</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//跳出media和父级</div><div class=\"line\">@media print &#123;</div><div class=\"line\">  .parent3 &#123;</div><div class=\"line\">    color: #f00;</div><div class=\"line\">    @at-root (without:all) &#123;</div><div class=\"line\">      .child3 &#123;</div><div class=\"line\">        width: 200px;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>@at-root</code> 与 <code>&amp;</code> 配合使用<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.child &#123;</div><div class=\"line\">  @at-root .parent &amp; &#123;</div><div class=\"line\">    color: #f00;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>应用于<code>@keyframe</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.demo &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  animation: motion 3s infinite;</div><div class=\"line\">  @at-root &#123;</div><div class=\"line\">    @keyframes motion &#123;</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"混合-mixin\"><a href=\"#混合-mixin\" class=\"headerlink\" title=\"混合(mixin)\"></a>混合(mixin)</h3><p>sass中使用 <code>@mixin</code> 声明混合，可以传递参数，参数名以 <code>$</code> 符号开始，多个参数以逗号分开，也可以给参数设置默认值，声明的 <code>@mixin</code> 通过 <code>@include</code> 来调用。</p>\n<h6 id=\"无参数mixin\"><a href=\"#无参数mixin\" class=\"headerlink\" title=\"无参数mixin\"></a>无参数mixin</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin center-block &#123;</div><div class=\"line\">  margin: &#123;</div><div class=\"line\">    left: auto;</div><div class=\"line\">    right: auto;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.demo &#123;</div><div class=\"line\">  @include center-block;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"有参数mixin\"><a href=\"#有参数mixin\" class=\"headerlink\" title=\"有参数mixin\"></a>有参数mixin</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin opacity($opacity: 50) &#123;</div><div class=\"line\">  opacity: $opacity / 100;</div><div class=\"line\">  filter: alpha(opacity=$opacity);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"多个参数mixin\"><a href=\"#多个参数mixin\" class=\"headerlink\" title=\"多个参数mixin\"></a>多个参数mixin</h6><p>调用时可直接传入值，如 <code>@include</code> 传入参数的个数小于 <code>@mixin</code> 定义参数的个数，则按照顺表示，后面不足的使用默认值，如不足的没有默认值则报错。除此之外还可以选择性的传入参数，使用参数名与值同时传入。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin horizontal-line($border:1px dashed #ccc,$padding:10px) &#123;</div><div class=\"line\">  border-bottom: $border;</div><div class=\"line\">  padding-top: $padding;</div><div class=\"line\">  padding-bottom: $padding;</div><div class=\"line\">&#125;</div><div class=\"line\">.imgtext-h li &#123;</div><div class=\"line\">  @include horizontal-line(1px solid #ccc);</div><div class=\"line\">&#125;</div><div class=\"line\">.imgtext-h-product li &#123;</div><div class=\"line\">  @include horizontal-line($padding:15px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"多组值参数mixin\"><a href=\"#多组值参数mixin\" class=\"headerlink\" title=\"多组值参数mixin\"></a>多组值参数mixin</h6><p>如果一个参数可以有多组值，如 <code>box-shadow</code> 、<code>transition</code> 等，那么参数则需要在变量后加三个点表示，如 <code>$variables...</code> 。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//box-shadow可以有多组值，所以在变量参数后面添加...</div><div class=\"line\">@mixin box-shadow($shadow...) &#123;</div><div class=\"line\">  -webkit-box-shadow: $shadow;</div><div class=\"line\">  box-shadow: $shadow;</div><div class=\"line\">&#125;</div><div class=\"line\">.box &#123;</div><div class=\"line\">  border: 1px solid #ccc;</div><div class=\"line\">  @include box-shadow (0 2px 2px rgba(0,0,0,.3),0 3px 3px rgba(0,0,0,.3),0 4px 4px rgba(0,0,0,.3));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"content\"><a href=\"#content\" class=\"headerlink\" title=\"@content\"></a>@content</h4><p><code>@content</code> 可以用来解决css3的 <code>@media</code> 等带来的问题。它可以使 <code>@mixin</code> 接受一整块样式，接受的样式从 <code>@content</code> 开始。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">mixin</span> max-screen($res) &#123;</div><div class=\"line\">  @<span class=\"keyword\">media</span> only screen and (max-width:$res) &#123;</div><div class=\"line\">    @<span class=\"keyword\">content</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">include</span> max-screen(<span class=\"number\">480px</span>) &#123;</div><div class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: red;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>PS：<code>@mixin</code> 通过 <code>@include</code> 调用后解析出来的样式是以拷贝形式存在的，而下面的继承则是以联合声明的方式存在的，所以从3.2.0版本以后，建议传递参数的用 <code>@mixin</code> ，而非传递参数的使用下面的继承 <code>%</code> 。</p>\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p><code>sass</code> 中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词 <code>@extend</code> ，后面紧跟需要继承的选择器。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">h1 &#123;</div><div class=\"line\">  border: 4px solid #ff9aa9;</div><div class=\"line\">&#125;</div><div class=\"line\">.speaker &#123;</div><div class=\"line\">  @extend h1;</div><div class=\"line\">  border-width: 2px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"继承的工作细节\"><a href=\"#继承的工作细节\" class=\"headerlink\" title=\"继承的工作细节\"></a>继承的工作细节</h5><p>关于 <code>@extend</code> 有两个要点你应该知道。</p>\n<ul>\n<li>跟混合器相比，继承生成的 <code>css</code> 代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 <code>css</code> 体积更小。如果你非常关心你站点的速度，请牢记这一点。<br>举个例子,使用混合器的时候：<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin border-colors &#123;</div><div class=\"line\">  width: 200px;</div><div class=\"line\">  height: 200px;</div><div class=\"line\">  border: 1px solid #333;</div><div class=\"line\">&#125;</div><div class=\"line\">.demo1 &#123;</div><div class=\"line\">  @include border-colors;</div><div class=\"line\">&#125;</div><div class=\"line\">.demo2 &#123;</div><div class=\"line\">  @include border-colors; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>它生成的 <code>css</code> 如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.demo1</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.demo2</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用继承的时候：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.demo1 &#123;</div><div class=\"line\">  width: 200px;</div><div class=\"line\">  height: 200px;</div><div class=\"line\">  border: 1px solid #333;</div><div class=\"line\">&#125;</div><div class=\"line\">.demo2 &#123;</div><div class=\"line\">  @extend .demo1; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>它生成的 <code>css</code> 如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.demo1</span>, <span class=\"selector-class\">.demo2</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 <code>css</code> 体积更小。</p>\n<ul>\n<li>继承遵从 <code>css</code> 层叠的规则。当两个不同的 <code>css</code> 规则应用到同一个 <code>html</code> 元素上时，并且这两个不同的 <code>css</code> 规则对同一属性的修饰存在不同的值， <code>css</code> 层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。</li>\n</ul>\n<p>混合器本身不会引起 <code>css</code> 层叠的问题，因为混合器把样式直接放到了 <code>css</code> 规则中，而继承存在样式层叠的问题。被继承的样式会保持原有定义位置和选择器权重不变。通常来说这并不会引起什么问题，但是知道这点总没有坏处。</p>\n<h4 id=\"使用继承的最佳实践\"><a href=\"#使用继承的最佳实践\" class=\"headerlink\" title=\"使用继承的最佳实践\"></a>使用继承的最佳实践</h4><p>通常使用继承会让你的 <code>css</code> 美观、整洁。因为继承只会在生成 <code>css</code> 时复制选择器，而不会复制大段的 <code>css</code> 属性。但是如果你不小心，可能会让生成的 <code>css</code> 中包含大量的选择器复制。<br>避免这种情况出现的最好方法就是不要在 <code>css</code> 规则中使用后代选择器（比如 <code>.foo .bar</code>）去继承 <code>css</code> 规则。如果你这么做，同时被继承的 <code>css</code> 规则有通过后代选择器修饰的样式，生成 <code>css</code> 中的选择器的数量很快就会失控。<br>例如：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.bip .baz &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">.foo .bar &#123;</div><div class=\"line\">  @extend .baz;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>生成的css如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.baz</span>, <span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.foo</span> <span class=\"selector-class\">.bar</span>, <span class=\"selector-class\">.foo</span> <span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.bar</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>所以如果允许，尽可能避免这种用法。<br><strong> 值得一提的是，只要你想，你完全可以放心地继承有后代选择器修饰规则的选择器，不管后代选择器多长，但有一个前提就是，不要用后代选择器去继承。 </strong></p>\n<h6 id=\"占位选择器\"><a href=\"#占位选择器\" class=\"headerlink\" title=\"占位选择器 %\"></a>占位选择器 <code>%</code></h6><p>从 <code>sass 3.2.0</code> 以后就可以定义占位选择器 <code>%</code> 。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了 <code>@extend</code> 去继承相应的样式，都会解析出来所有的样式。占位选择器以 <code>%</code> 标识定义，通过 <code>@extend</code> 调用。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">%ir &#123;</div><div class=\"line\">  color: transparent;</div><div class=\"line\">  text-shadow: none;</div><div class=\"line\">  background-color: transparent;</div><div class=\"line\">  border: 0;</div><div class=\"line\">&#125;</div><div class=\"line\">$lte7:true !default;</div><div class=\"line\">%clearfix &#123;</div><div class=\"line\">  @if $lte7 &#123;</div><div class=\"line\">    *zoom: 1;</div><div class=\"line\">  &#125;</div><div class=\"line\">  &amp;:before,&amp;:after &#123;</div><div class=\"line\">    content: '';</div><div class=\"line\">    display: table;</div><div class=\"line\">    font: 0/0;</div><div class=\"line\">  &#125;</div><div class=\"line\">  &amp;:after &#123;</div><div class=\"line\">    clear: both;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">#header &#123;</div><div class=\"line\">  h1 &#123;</div><div class=\"line\">    @extend %ir;</div><div class=\"line\">    width: 300px</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.ir &#123;</div><div class=\"line\">  @extend %ir;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如上代码，定义了两个占位选择器 <code>%ir</code> 和 <code>%clearfix</code> ，其中 <code>%clearfix</code> 这个没有调用，所以解析出来的css样式也就没有clearfix部分。占位选择器的出现，使css文件更加简练可控，没有多余。所以可以用其定义一些基础的样式文件，然后根据需要调用产生相应的css。<br>ps:在 <code>@media</code> 中暂时不能 <code>@extend</code> <code>@media</code> 外的代码片段，以后将会可以。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p><code>sass</code> 定义了很多函数可供使用，当然你也可以自己定义函数，以@function开始。<code>sass</code> 的官方函数链接为：<a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\" target=\"_blank\" rel=\"external\">sass function</a> ，实际项目中我们使用最多的应该是颜色函数，而颜色函数中又以 <code>lighten</code> 减淡和 <code>darken</code> 加深使用最多，其调用方法为 <code>lighten($color,$amout)</code> 和 <code>darken($color,$amount)</code> ，它们的第一个参数都是颜色值，第二个参数都是百分比。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$baseFontSize: 10px !default;</div><div class=\"line\">$gray: #ccc !default;</div><div class=\"line\"></div><div class=\"line\">@function pxToRem($px) &#123;</div><div class=\"line\">  @return $px / $baseFontSize * 1rem;</div><div class=\"line\">&#125;</div><div class=\"line\">body &#123;</div><div class=\"line\">  font-size: $baseFontSize;</div><div class=\"line\">  color: lighten($gray,10%);</div><div class=\"line\">&#125;</div><div class=\"line\">.test &#123;</div><div class=\"line\">  font-size: pxToRem(16px);</div><div class=\"line\">  color: darken($gray,10%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关于 <code>@mixin</code> ，<code>%</code> ，<code>@function</code> 更多说明可参阅：<br><a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\" target=\"_blank\" rel=\"external\">sass文档</a></p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><p><code>sass</code> 具有运算的特性，可以对数值型的Value（如：数字、颜色、变量等）进行加减乘除四则运算。请注意运算前后请留一个空格，不然会出错。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$baseFontSize: 14px !default;</div><div class=\"line\">$baseLineHeight: 1.5 !default;</div><div class=\"line\">$baseGap: $baseFontSize * $baseLineHeight !default;</div><div class=\"line\">.balber &#123;</div><div class=\"line\">  font-size: $baseGap;    //21px</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"条件判断及循环\"><a href=\"#条件判断及循环\" class=\"headerlink\" title=\"条件判断及循环\"></a>条件判断及循环</h3><h6 id=\"if判断\"><a href=\"#if判断\" class=\"headerlink\" title=\"@if判断\"></a>@if判断</h6><p><code>@if</code> 可一个条件单独使用，也可以和 <code>@else</code> 结合多条件使用<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$lte7: true;</div><div class=\"line\">$type: monster;</div><div class=\"line\">.ib&#123;</div><div class=\"line\">    display:inline-block;</div><div class=\"line\">    @if $lte7 &#123;</div><div class=\"line\">        *display:inline;</div><div class=\"line\">        *zoom:1;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">p &#123;</div><div class=\"line\">  @if $type == ocean &#123;</div><div class=\"line\">    color: blue;</div><div class=\"line\">  &#125; @else if $type == matador &#123;</div><div class=\"line\">    color: red;</div><div class=\"line\">  &#125; @else if $type == monster &#123;</div><div class=\"line\">    color: green;</div><div class=\"line\">  &#125; @else &#123;</div><div class=\"line\">    color: black;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>生成的 <code>css</code> 如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.ib &#123;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  *display: inline;</div><div class=\"line\">  *zoom: 1;</div><div class=\"line\">&#125;</div><div class=\"line\">p &#123;</div><div class=\"line\">  color: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"三目判断\"><a href=\"#三目判断\" class=\"headerlink\" title=\"三目判断\"></a>三目判断</h6><p>语法为：<code>if($condition,$if_true,$if_false)</code>。三个参数分别表示：条件，条件为真的值，条件为假的值。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(true,1px,2px) =&gt; 1px</div><div class=\"line\">if(false,1px,2px) =&gt; 2px</div></pre></td></tr></table></figure></p>\n<h6 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h6><p>for循环有两种形式，分别为：<code>@for $var from &lt;start&gt; through &lt;end&gt;</code> 和 <code>@for $var from &lt;start&gt; to &lt;end&gt;</code>。<code>$i</code> 表示变量，<code>start</code> 表示起始值，<code>end</code> 表示结束值，这两个的区别是关键字 <code>through</code> 表示包括 <code>end</code> 这个数，而 <code>to</code> 则不包括 <code>end</code> 这个数。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@for $i from 1 through 3 &#123;</div><div class=\"line\">  .item-#&#123;$i&#125; &#123;</div><div class=\"line\">    width: 2em * $i;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@for $i from 5 to 7 &#123;</div><div class=\"line\">  .item-#&#123;$i&#125; &#123;</div><div class=\"line\">    width: 2em * $i;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"each循环\"><a href=\"#each循环\" class=\"headerlink\" title=\"each循环\"></a>each循环</h5><p>语法为：<code>@each $var in &lt;list or map&gt;</code>。其中 <code>$var</code> 表示变量，而 <code>list</code> 和 <code>map</code> 表示 list 类型数据和 map 类型数据。sass 3.3.0新加入了多字段循环和map数据循环。</p>\n<h6 id=\"单个字段list数据循环\"><a href=\"#单个字段list数据循环\" class=\"headerlink\" title=\"单个字段list数据循环\"></a>单个字段list数据循环</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$animal-list: puma, sea-slug, egret, salamander;</div><div class=\"line\">@each $animal in $animal-list &#123;</div><div class=\"line\">  .#&#123;$animal&#125;-icon &#123;</div><div class=\"line\">    background-image: url('/images/#&#123;$animal&#125;.png');</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"多个字段lsit数据循环\"><a href=\"#多个字段lsit数据循环\" class=\"headerlink\" title=\"多个字段lsit数据循环\"></a>多个字段lsit数据循环</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$animal-data: (puma, black, default),(sea-slug, blue, pointer),(egret, white, move);</div><div class=\"line\">@each $animal, $color, $cursor in $animal-data &#123;</div><div class=\"line\">  .#&#123;$animal&#125;-icon &#123;</div><div class=\"line\">    background-image: url('/images/#&#123;$animal&#125;.png');</div><div class=\"line\">    border: 2px solid $color;</div><div class=\"line\">    cursor: $cursor;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"多个字段map数据循环\"><a href=\"#多个字段map数据循环\" class=\"headerlink\" title=\"多个字段map数据循环\"></a>多个字段map数据循环</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);</div><div class=\"line\">@each $header, $size in $headings &#123;</div><div class=\"line\">  #&#123;$header&#125; &#123;</div><div class=\"line\">    font-size: $size;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>本文介绍了 <code>sass</code> 最基本部分,你可以轻松地使用 <code>sass</code> 编写清晰、无冗余、语义化的 <code>css</code> 。对于 <code>sass</code> 提供的工具你已经有了一个比较深入的了解，同时也掌握了何时使用这些工具的指导原则。</p>\n<p>变量是 <code>sass</code> 提供的最基本的工具。通过变量可以让独立的 <code>css</code> 值变得可重用，无论是在一条单独的规则范围内还是在整个样式表中。变量、混合器的命名甚至 <code>sass</code> 的文件名，可以互换通用 <code>_</code> 和 <code>-</code> 。同样基础的是 <code>sass</code> 的嵌套机制。嵌套允许 <code>css</code> 规则内嵌套 <code>css</code> 规则，减少重复编写常用的选择器，同时让样式表的结构一眼望去更加清晰。<code>sass</code> 同时提供了特殊的父选择器标识符&amp;，通过它可以构造出更高效的嵌套。</p>\n<p>你也已经学到了 <code>sass</code> 的另一个重要特性，样式导入。通过样式导入可以把分散在多个 <code>sass</code> 文件中的内容合并生成到一个 <code>css</code> 文件，避免了项目中有大量的 <code>css</code> 文件通过原生的 <code>css @import</code> 带来的性能问题。通过嵌套导入和默认变量值，导入可以构建更强有力的、可定制的样式。混合器允许用户编写语义化样式的同时避免视觉层面上样式的重复。你不仅学到了如何使用混合器减少重复，同时学习到了如何使用混合器让你的 <code>css</code> 变得更加可维护和语义化。最后，我们学习了与混合器相辅相成的选择器继承。继承允许你声明类之间语义化的关系，通过这些关系可以保持你的 <code>css</code> 的整洁和可维护性。</p>\n<p><a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\" target=\"_blank\" rel=\"external\">sass文档</a><br><a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\" target=\"_blank\" rel=\"external\">sass函数列表</a></p>\n","excerpt":"<p> <span id=\"inline-blue\" style=\"font-size:100%;border-radius:3px;\">Sass</span>： (Syntactically Awesome StyleSheets)</p>\n<h2 id=\"1-sass简介\"><a href=\"#1-sass简介\" class=\"headerlink\" title=\"1.sass简介\"></a>1.sass简介</h2><p>来自于官网的简介：<br>Sass is the most mature, stable, and powerful professional grade CSS extension language in the world.</p>\n<font color=red>Sass是世界上最成熟的，稳定的，功能强大的专业级CSS扩展语言。</font>","more":"<h2 id=\"2-sass安装\"><a href=\"#2-sass安装\" class=\"headerlink\" title=\"2.sass安装\"></a>2.sass安装</h2><p>因为sass依赖ruby环境，所以装sass之前先确认安装了ruby.<br>在安装的时候，请勾选Add Ruby executables to your PATH这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到ruby环境.<br><img src=\"http://i1.piimg.com/567571/3a876fb3bb575d25.png\" alt=\"\"></p>\n<p>安装完ruby之后，在开始菜单中，打开我们的命令行，输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ruby -v</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://i1.piimg.com/567571/e5795e583371ce6d.png\" alt=\"\"><br>那么我们的ruby就安装成功了。</p>\n<p>然后直接在命令行中输入<br><code>gem install sass</code><br>按回车键确认，等待一段时间就会提示你sass安装成功。</p>\n<p>如果要安装beta版本的，可以在命令行中输入<br><code>gem install sass --pre</code></p>\n<p>最近因为墙的比较厉害，如果你没有安装成功，那么请参考下面的淘宝的RubyGems镜像安装sass，如果成功则忽略。<br>由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过gem sources命令来配置源，先移除默认的<a href=\"https://rubygems.org源，然后添加淘宝的源\">https://rubygems.org源，然后添加淘宝的源</a> <code>https://ruby.taobao.org/</code> ，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入sass安装命令gem install sass了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem sources --remove https://rubygems.org/</div><div class=\"line\">gem sources -a https://ruby.taobao.org/</div><div class=\"line\">gem sources -l</div></pre></td></tr></table></figure>\n<p>如果输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">*** CURRENT SOURCES ***</div><div class=\"line\">https://ruby.taobao.org</div></pre></td></tr></table></figure></p>\n<p>则表示镜像替换成功，下一步<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install sass</div></pre></td></tr></table></figure></p>\n<p>按回车键确认，等待一段时间就会提示你sass安装成功。</p>\n<p>如果你熟悉git命令的话，你还可以从sass的Git repository来安装，git的命令行为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone git://github.com/nex3/sass.git</div><div class=\"line\">cd sass</div><div class=\"line\">rake install</div></pre></td></tr></table></figure></p>\n<p>升级sass版本的命令行为<br><code>gem update sass</code></p>\n<p>如果想要安装sass的某一特定版本，命令行为<br><code>gem install sass --version=3.3.0</code></p>\n<p>如果想要删除sass的某一特定版本，命令行为<br><code>gem uninstall sass --version=3.3.0</code></p>\n<p>卸载sass,命令行为<br><code>gem uninstall sass</code></p>\n<p>查看sass版本的命令行为<br><code>sass -v</code></p>\n<p>查看ruby安装的所有程序包，命令语句为<code>gem list</code></p>\n<p>单文件转换命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass style.scss style.css</div></pre></td></tr></table></figure></p>\n<p>单文件监听命令<br><code>sass --watch style.scss:style.css</code></p>\n<p>文件夹监听命令<br><code>sass --watch sassFileDirectory:cssFileDirectory</code></p>\n<p>css文件转成sass/scss文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sass-convert style.css style.sass</div><div class=\"line\">sass-convert style.css style.scss</div></pre></td></tr></table></figure></p>\n<h3 id=\"sass语法\"><a href=\"#sass语法\" class=\"headerlink\" title=\"sass语法\"></a>sass语法</h3><p>变量<br>sass 的变量必须是 $ 开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(：)分隔开（就像CSS属性设置一样），如果值后面加上!default则表示默认值。<br>普通变量<br>定义之后可以在全局范围内使用。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$fontSize: 12px;</div><div class=\"line\">body &#123;</div><div class=\"line\">    font-size: $fontSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>默认变量<br>sass的默认变量仅需要在值后面加上 <code>!default</code> 即可。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$baseLineHeight: 1.5 !default;</div><div class=\"line\">body &#123;</div><div class=\"line\">    line-height: $baseLineHeight;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>sass的默认变量一般是用来设置默认值，然后根据需求来覆盖的。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$baseLineHeight: 1.5 !default;</div><div class=\"line\">body &#123;</div><div class=\"line\">    line-height: 2;</div><div class=\"line\">&#125;</div><div class=\"line\">p &#123;</div><div class=\"line\">    line-height: $baseLineHeight;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>特殊变量<br>一般我们定义的变量都为属性值，可直接使用，但是如果变量作为属性或在某些特殊情况下等则必须要以 <code>#{$variables}</code> 形式使用。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$borderDirection: top !default;</div><div class=\"line\">$baseFontSize: 12px !default;</div><div class=\"line\">$baseLineHeight: 1.5 !default;</div><div class=\"line\"></div><div class=\"line\">//应用于class和属性</div><div class=\"line\">.border-#&#123;$borderDirection&#125; &#123;</div><div class=\"line\">    border-#&#123;$borderDirection&#125;: 1px solid #ccc;</div><div class=\"line\">&#125;</div><div class=\"line\">//应用于复杂的属性值</div><div class=\"line\">body &#123;</div><div class=\"line\">    font:#&#123;$baseFontSize&#125;/#&#123;$baseLineHeight&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>多值变量<br>多值变量分为list类型和map类型，简单来说list类型有点像js中的数组，而map类型有点像js中的对象。<br>list<br>list数据可通过空格，逗号或小括号分隔多个值，可用nth($var,$index)取值。关于list数据操作还有很多其他函数如 <code>length($list)</code> ， <code>join($list,$list2,[$separator])</code> ， <code>append($list,$value,[$separator])</code> 等。<br>demo ：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$linkColor: #08c #333 !default;</div><div class=\"line\">a &#123;</div><div class=\"line\">    color: nth($linkColor,1);</div><div class=\"line\">    &amp;:hover &#123;</div><div class=\"line\">        color: nth($likColor,2);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>map<br>map数据以key和value成对出现，其中value又可以是list。格式为： <code>$map:(key1: value1,key2:value2,key3:value3);</code> 。可通过 <code>map-get($map,$key)</code> 取值。关于map数据还有很多其他函数如 <code>map-merge($map1,$map2)</code> ， <code>map-keys($map)</code> ， <code>map-values($map)</code> 等。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);</div><div class=\"line\">@each $header,$size in $headings &#123;</div><div class=\"line\">  #&#123;$header&#125; &#123;</div><div class=\"line\">    font-size: $size;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>全局变量<br>在变量值后面加上!global即为全局变量。<br>在选择器中声明的变量会覆盖外面全局声明的变量。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$fontSize: 12px;</div><div class=\"line\">body &#123;</div><div class=\"line\">  $fontSize: 14px;</div><div class=\"line\">  font-size: $fontSize;</div><div class=\"line\">&#125;</div><div class=\"line\">p &#123;</div><div class=\"line\">  font-size: $fontSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>启用global之后的机制</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$fontSize: 12px;</div><div class=\"line\">body &#123;</div><div class=\"line\">  $fontSize: 14px !global;</div><div class=\"line\">  font-size: $fontSize;</div><div class=\"line\">&#125;</div><div class=\"line\">p &#123;</div><div class=\"line\">  font-size: $fontSize;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>与上面的机制对比就会发现默认在选择器里面的变量为局部变量，而只有设置了!global之后才会成为全局变量。</p>\n<h3 id=\"嵌套-Nesting\"><a href=\"#嵌套-Nesting\" class=\"headerlink\" title=\"嵌套(Nesting)\"></a>嵌套(Nesting)</h3><p>sass的嵌套包括两种：一种是选择器的嵌套；另一种是属性的嵌套。</p>\n<h5 id=\"选择器嵌套\"><a href=\"#选择器嵌套\" class=\"headerlink\" title=\"选择器嵌套\"></a>选择器嵌套</h5><p>所谓选择器嵌套指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性。<br>在选择器嵌套中，可以使用 <code>&amp;</code> 表示父元素选择器<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">#top_nav &#123;</div><div class=\"line\">  line-height: 30px;</div><div class=\"line\">  text-transform: capitalize;</div><div class=\"line\">  background-color: #333;</div><div class=\"line\">  li &#123;</div><div class=\"line\">    display: block;</div><div class=\"line\">  &#125;</div><div class=\"line\">  a &#123;</div><div class=\"line\">    display: block;</div><div class=\"line\">    padding: 0 10px;</div><div class=\"line\">    color: #fff;</div><div class=\"line\"></div><div class=\"line\">    &amp;:hover &#123;</div><div class=\"line\">      color: #ddd;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"属性嵌套\"><a href=\"#属性嵌套\" class=\"headerlink\" title=\"属性嵌套\"></a>属性嵌套</h5><p>所谓属性嵌套指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.fakeshadow</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border</span>: &#123;</div><div class=\"line\">    style: solid;</div><div class=\"line\">    <span class=\"attribute\">left</span>: &#123;</div><div class=\"line\">      width: <span class=\"number\">4px</span>;</div><div class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#888</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-tag\">right</span>: &#123;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">2px</span>;</div><div class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当然这个只是属性嵌套的一个例子，在实际中这样来写 <code>border</code> 的样式或许有些复杂了，但在属性嵌套在别的地方肯定用得到。</p>\n<h4 id=\"at-root\"><a href=\"#at-root\" class=\"headerlink\" title=\"@at-root\"></a>@at-root</h4><p><code>@at-root</code> 用来跳出选择器嵌套的。默认所有的嵌套，继承所有上级选择器，但有了这个就可以跳出所有上级选择器。</p>\n<h6 id=\"普通跳出嵌套\"><a href=\"#普通跳出嵌套\" class=\"headerlink\" title=\"普通跳出嵌套\"></a>普通跳出嵌套</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*没有跳出*/</div><div class=\"line\">.parent-1 &#123;</div><div class=\"line\">  color: #f00;</div><div class=\"line\">  .child &#123;</div><div class=\"line\">    width: 100px</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*单个选择器跳出*/</div><div class=\"line\">.parent-2 &#123;</div><div class=\"line\">  color: #f00;</div><div class=\"line\">  @at-root .child &#123;</div><div class=\"line\">    width: 200px;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">/*多个选择器跳出*/</div><div class=\"line\">.parent-3 &#123;</div><div class=\"line\">  background: #f00;</div><div class=\"line\">  @at-root &#123;</div><div class=\"line\">    .child1 &#123;</div><div class=\"line\">      width: 300px;</div><div class=\"line\">    &#125;</div><div class=\"line\">    .child2 &#123;</div><div class=\"line\">      width: 400px;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>@at-root(without:…)和@at-root(with:…)<br>默认 <code>@at-root</code> 只会跳出选择器嵌套，而不能跳出 <code>@media</code> 或 <code>@support</code> ，如果要跳出这两种，则需要使用 <code>@at-root(without:media)</code> ，<code>@at-root(without:support)</code> 。这个语法的关键词有四个： <code>all</code> （表示所有），<code>true</code>（表示常规CSS）， <code>media</code>（表示media）， ‘support’（表示support，因为 <code>@support</code> 目前还无法广泛使用）。我们默认的 <code>@at-root</code> 其实就是 <code>@at-root(without:rule)</code> 。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media print &#123;</div><div class=\"line\">  .parent1 &#123;</div><div class=\"line\">    color: #000;</div><div class=\"line\">    @at-root .child1 &#123;</div><div class=\"line\">      width: 200px</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//跳出media嵌套，父级有效</div><div class=\"line\">@media print &#123;</div><div class=\"line\">  .parent2 &#123;</div><div class=\"line\">    color: #f00;</div><div class=\"line\">    @at-root (without:media) &#123;</div><div class=\"line\">      .child2 &#123;</div><div class=\"line\">        widht: 200px</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//跳出media和父级</div><div class=\"line\">@media print &#123;</div><div class=\"line\">  .parent3 &#123;</div><div class=\"line\">    color: #f00;</div><div class=\"line\">    @at-root (without:all) &#123;</div><div class=\"line\">      .child3 &#123;</div><div class=\"line\">        width: 200px;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>@at-root</code> 与 <code>&amp;</code> 配合使用<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.child &#123;</div><div class=\"line\">  @at-root .parent &amp; &#123;</div><div class=\"line\">    color: #f00;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>应用于<code>@keyframe</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.demo &#123;</div><div class=\"line\">  ...</div><div class=\"line\">  animation: motion 3s infinite;</div><div class=\"line\">  @at-root &#123;</div><div class=\"line\">    @keyframes motion &#123;</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"混合-mixin\"><a href=\"#混合-mixin\" class=\"headerlink\" title=\"混合(mixin)\"></a>混合(mixin)</h3><p>sass中使用 <code>@mixin</code> 声明混合，可以传递参数，参数名以 <code>$</code> 符号开始，多个参数以逗号分开，也可以给参数设置默认值，声明的 <code>@mixin</code> 通过 <code>@include</code> 来调用。</p>\n<h6 id=\"无参数mixin\"><a href=\"#无参数mixin\" class=\"headerlink\" title=\"无参数mixin\"></a>无参数mixin</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin center-block &#123;</div><div class=\"line\">  margin: &#123;</div><div class=\"line\">    left: auto;</div><div class=\"line\">    right: auto;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.demo &#123;</div><div class=\"line\">  @include center-block;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"有参数mixin\"><a href=\"#有参数mixin\" class=\"headerlink\" title=\"有参数mixin\"></a>有参数mixin</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin opacity($opacity: 50) &#123;</div><div class=\"line\">  opacity: $opacity / 100;</div><div class=\"line\">  filter: alpha(opacity=$opacity);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"多个参数mixin\"><a href=\"#多个参数mixin\" class=\"headerlink\" title=\"多个参数mixin\"></a>多个参数mixin</h6><p>调用时可直接传入值，如 <code>@include</code> 传入参数的个数小于 <code>@mixin</code> 定义参数的个数，则按照顺表示，后面不足的使用默认值，如不足的没有默认值则报错。除此之外还可以选择性的传入参数，使用参数名与值同时传入。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin horizontal-line($border:1px dashed #ccc,$padding:10px) &#123;</div><div class=\"line\">  border-bottom: $border;</div><div class=\"line\">  padding-top: $padding;</div><div class=\"line\">  padding-bottom: $padding;</div><div class=\"line\">&#125;</div><div class=\"line\">.imgtext-h li &#123;</div><div class=\"line\">  @include horizontal-line(1px solid #ccc);</div><div class=\"line\">&#125;</div><div class=\"line\">.imgtext-h-product li &#123;</div><div class=\"line\">  @include horizontal-line($padding:15px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"多组值参数mixin\"><a href=\"#多组值参数mixin\" class=\"headerlink\" title=\"多组值参数mixin\"></a>多组值参数mixin</h6><p>如果一个参数可以有多组值，如 <code>box-shadow</code> 、<code>transition</code> 等，那么参数则需要在变量后加三个点表示，如 <code>$variables...</code> 。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//box-shadow可以有多组值，所以在变量参数后面添加...</div><div class=\"line\">@mixin box-shadow($shadow...) &#123;</div><div class=\"line\">  -webkit-box-shadow: $shadow;</div><div class=\"line\">  box-shadow: $shadow;</div><div class=\"line\">&#125;</div><div class=\"line\">.box &#123;</div><div class=\"line\">  border: 1px solid #ccc;</div><div class=\"line\">  @include box-shadow (0 2px 2px rgba(0,0,0,.3),0 3px 3px rgba(0,0,0,.3),0 4px 4px rgba(0,0,0,.3));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"content\"><a href=\"#content\" class=\"headerlink\" title=\"@content\"></a>@content</h4><p><code>@content</code> 可以用来解决css3的 <code>@media</code> 等带来的问题。它可以使 <code>@mixin</code> 接受一整块样式，接受的样式从 <code>@content</code> 开始。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">mixin</span> max-screen($res) &#123;</div><div class=\"line\">  @<span class=\"keyword\">media</span> only screen and (max-width:$res) &#123;</div><div class=\"line\">    @<span class=\"keyword\">content</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@<span class=\"keyword\">include</span> max-screen(<span class=\"number\">480px</span>) &#123;</div><div class=\"line\">  <span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: red;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>PS：<code>@mixin</code> 通过 <code>@include</code> 调用后解析出来的样式是以拷贝形式存在的，而下面的继承则是以联合声明的方式存在的，所以从3.2.0版本以后，建议传递参数的用 <code>@mixin</code> ，而非传递参数的使用下面的继承 <code>%</code> 。</p>\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p><code>sass</code> 中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词 <code>@extend</code> ，后面紧跟需要继承的选择器。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">h1 &#123;</div><div class=\"line\">  border: 4px solid #ff9aa9;</div><div class=\"line\">&#125;</div><div class=\"line\">.speaker &#123;</div><div class=\"line\">  @extend h1;</div><div class=\"line\">  border-width: 2px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"继承的工作细节\"><a href=\"#继承的工作细节\" class=\"headerlink\" title=\"继承的工作细节\"></a>继承的工作细节</h5><p>关于 <code>@extend</code> 有两个要点你应该知道。</p>\n<ul>\n<li>跟混合器相比，继承生成的 <code>css</code> 代码相对更少。因为继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 <code>css</code> 体积更小。如果你非常关心你站点的速度，请牢记这一点。<br>举个例子,使用混合器的时候：<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@mixin border-colors &#123;</div><div class=\"line\">  width: 200px;</div><div class=\"line\">  height: 200px;</div><div class=\"line\">  border: 1px solid #333;</div><div class=\"line\">&#125;</div><div class=\"line\">.demo1 &#123;</div><div class=\"line\">  @include border-colors;</div><div class=\"line\">&#125;</div><div class=\"line\">.demo2 &#123;</div><div class=\"line\">  @include border-colors; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>它生成的 <code>css</code> 如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.demo1</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.demo2</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用继承的时候：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.demo1 &#123;</div><div class=\"line\">  width: 200px;</div><div class=\"line\">  height: 200px;</div><div class=\"line\">  border: 1px solid #333;</div><div class=\"line\">&#125;</div><div class=\"line\">.demo2 &#123;</div><div class=\"line\">  @extend .demo1; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>它生成的 <code>css</code> 如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.demo1</span>, <span class=\"selector-class\">.demo2</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#333</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到，继承仅仅是重复选择器，而不会重复属性，所以使用继承往往比混合器生成的 <code>css</code> 体积更小。</p>\n<ul>\n<li>继承遵从 <code>css</code> 层叠的规则。当两个不同的 <code>css</code> 规则应用到同一个 <code>html</code> 元素上时，并且这两个不同的 <code>css</code> 规则对同一属性的修饰存在不同的值， <code>css</code> 层叠规则会决定应用哪个样式。相当直观：通常权重更高的选择器胜出，如果权重相同，定义在后边的规则胜出。</li>\n</ul>\n<p>混合器本身不会引起 <code>css</code> 层叠的问题，因为混合器把样式直接放到了 <code>css</code> 规则中，而继承存在样式层叠的问题。被继承的样式会保持原有定义位置和选择器权重不变。通常来说这并不会引起什么问题，但是知道这点总没有坏处。</p>\n<h4 id=\"使用继承的最佳实践\"><a href=\"#使用继承的最佳实践\" class=\"headerlink\" title=\"使用继承的最佳实践\"></a>使用继承的最佳实践</h4><p>通常使用继承会让你的 <code>css</code> 美观、整洁。因为继承只会在生成 <code>css</code> 时复制选择器，而不会复制大段的 <code>css</code> 属性。但是如果你不小心，可能会让生成的 <code>css</code> 中包含大量的选择器复制。<br>避免这种情况出现的最好方法就是不要在 <code>css</code> 规则中使用后代选择器（比如 <code>.foo .bar</code>）去继承 <code>css</code> 规则。如果你这么做，同时被继承的 <code>css</code> 规则有通过后代选择器修饰的样式，生成 <code>css</code> 中的选择器的数量很快就会失控。<br>例如：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.bip .baz &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div><div class=\"line\">.foo .bar &#123;</div><div class=\"line\">  @extend .baz;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>生成的css如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.baz</span>, <span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.foo</span> <span class=\"selector-class\">.bar</span>, <span class=\"selector-class\">.foo</span> <span class=\"selector-class\">.bip</span> <span class=\"selector-class\">.bar</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>所以如果允许，尽可能避免这种用法。<br><strong> 值得一提的是，只要你想，你完全可以放心地继承有后代选择器修饰规则的选择器，不管后代选择器多长，但有一个前提就是，不要用后代选择器去继承。 </strong></p>\n<h6 id=\"占位选择器\"><a href=\"#占位选择器\" class=\"headerlink\" title=\"占位选择器 %\"></a>占位选择器 <code>%</code></h6><p>从 <code>sass 3.2.0</code> 以后就可以定义占位选择器 <code>%</code> 。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了 <code>@extend</code> 去继承相应的样式，都会解析出来所有的样式。占位选择器以 <code>%</code> 标识定义，通过 <code>@extend</code> 调用。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">%ir &#123;</div><div class=\"line\">  color: transparent;</div><div class=\"line\">  text-shadow: none;</div><div class=\"line\">  background-color: transparent;</div><div class=\"line\">  border: 0;</div><div class=\"line\">&#125;</div><div class=\"line\">$lte7:true !default;</div><div class=\"line\">%clearfix &#123;</div><div class=\"line\">  @if $lte7 &#123;</div><div class=\"line\">    *zoom: 1;</div><div class=\"line\">  &#125;</div><div class=\"line\">  &amp;:before,&amp;:after &#123;</div><div class=\"line\">    content: '';</div><div class=\"line\">    display: table;</div><div class=\"line\">    font: 0/0;</div><div class=\"line\">  &#125;</div><div class=\"line\">  &amp;:after &#123;</div><div class=\"line\">    clear: both;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">#header &#123;</div><div class=\"line\">  h1 &#123;</div><div class=\"line\">    @extend %ir;</div><div class=\"line\">    width: 300px</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">.ir &#123;</div><div class=\"line\">  @extend %ir;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如上代码，定义了两个占位选择器 <code>%ir</code> 和 <code>%clearfix</code> ，其中 <code>%clearfix</code> 这个没有调用，所以解析出来的css样式也就没有clearfix部分。占位选择器的出现，使css文件更加简练可控，没有多余。所以可以用其定义一些基础的样式文件，然后根据需要调用产生相应的css。<br>ps:在 <code>@media</code> 中暂时不能 <code>@extend</code> <code>@media</code> 外的代码片段，以后将会可以。</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p><code>sass</code> 定义了很多函数可供使用，当然你也可以自己定义函数，以@function开始。<code>sass</code> 的官方函数链接为：<a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\">sass function</a> ，实际项目中我们使用最多的应该是颜色函数，而颜色函数中又以 <code>lighten</code> 减淡和 <code>darken</code> 加深使用最多，其调用方法为 <code>lighten($color,$amout)</code> 和 <code>darken($color,$amount)</code> ，它们的第一个参数都是颜色值，第二个参数都是百分比。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$baseFontSize: 10px !default;</div><div class=\"line\">$gray: #ccc !default;</div><div class=\"line\"></div><div class=\"line\">@function pxToRem($px) &#123;</div><div class=\"line\">  @return $px / $baseFontSize * 1rem;</div><div class=\"line\">&#125;</div><div class=\"line\">body &#123;</div><div class=\"line\">  font-size: $baseFontSize;</div><div class=\"line\">  color: lighten($gray,10%);</div><div class=\"line\">&#125;</div><div class=\"line\">.test &#123;</div><div class=\"line\">  font-size: pxToRem(16px);</div><div class=\"line\">  color: darken($gray,10%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关于 <code>@mixin</code> ，<code>%</code> ，<code>@function</code> 更多说明可参阅：<br><a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\">sass文档</a></p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><p><code>sass</code> 具有运算的特性，可以对数值型的Value（如：数字、颜色、变量等）进行加减乘除四则运算。请注意运算前后请留一个空格，不然会出错。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$baseFontSize: 14px !default;</div><div class=\"line\">$baseLineHeight: 1.5 !default;</div><div class=\"line\">$baseGap: $baseFontSize * $baseLineHeight !default;</div><div class=\"line\">.balber &#123;</div><div class=\"line\">  font-size: $baseGap;    //21px</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"条件判断及循环\"><a href=\"#条件判断及循环\" class=\"headerlink\" title=\"条件判断及循环\"></a>条件判断及循环</h3><h6 id=\"if判断\"><a href=\"#if判断\" class=\"headerlink\" title=\"@if判断\"></a>@if判断</h6><p><code>@if</code> 可一个条件单独使用，也可以和 <code>@else</code> 结合多条件使用<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$lte7: true;</div><div class=\"line\">$type: monster;</div><div class=\"line\">.ib&#123;</div><div class=\"line\">    display:inline-block;</div><div class=\"line\">    @if $lte7 &#123;</div><div class=\"line\">        *display:inline;</div><div class=\"line\">        *zoom:1;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">p &#123;</div><div class=\"line\">  @if $type == ocean &#123;</div><div class=\"line\">    color: blue;</div><div class=\"line\">  &#125; @else if $type == matador &#123;</div><div class=\"line\">    color: red;</div><div class=\"line\">  &#125; @else if $type == monster &#123;</div><div class=\"line\">    color: green;</div><div class=\"line\">  &#125; @else &#123;</div><div class=\"line\">    color: black;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>生成的 <code>css</code> 如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.ib &#123;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  *display: inline;</div><div class=\"line\">  *zoom: 1;</div><div class=\"line\">&#125;</div><div class=\"line\">p &#123;</div><div class=\"line\">  color: green;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h6 id=\"三目判断\"><a href=\"#三目判断\" class=\"headerlink\" title=\"三目判断\"></a>三目判断</h6><p>语法为：<code>if($condition,$if_true,$if_false)</code>。三个参数分别表示：条件，条件为真的值，条件为假的值。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(true,1px,2px) =&gt; 1px</div><div class=\"line\">if(false,1px,2px) =&gt; 2px</div></pre></td></tr></table></figure></p>\n<h6 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h6><p>for循环有两种形式，分别为：<code>@for $var from &lt;start&gt; through &lt;end&gt;</code> 和 <code>@for $var from &lt;start&gt; to &lt;end&gt;</code>。<code>$i</code> 表示变量，<code>start</code> 表示起始值，<code>end</code> 表示结束值，这两个的区别是关键字 <code>through</code> 表示包括 <code>end</code> 这个数，而 <code>to</code> 则不包括 <code>end</code> 这个数。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@for $i from 1 through 3 &#123;</div><div class=\"line\">  .item-#&#123;$i&#125; &#123;</div><div class=\"line\">    width: 2em * $i;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@for $i from 5 to 7 &#123;</div><div class=\"line\">  .item-#&#123;$i&#125; &#123;</div><div class=\"line\">    width: 2em * $i;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"each循环\"><a href=\"#each循环\" class=\"headerlink\" title=\"each循环\"></a>each循环</h5><p>语法为：<code>@each $var in &lt;list or map&gt;</code>。其中 <code>$var</code> 表示变量，而 <code>list</code> 和 <code>map</code> 表示 list 类型数据和 map 类型数据。sass 3.3.0新加入了多字段循环和map数据循环。</p>\n<h6 id=\"单个字段list数据循环\"><a href=\"#单个字段list数据循环\" class=\"headerlink\" title=\"单个字段list数据循环\"></a>单个字段list数据循环</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$animal-list: puma, sea-slug, egret, salamander;</div><div class=\"line\">@each $animal in $animal-list &#123;</div><div class=\"line\">  .#&#123;$animal&#125;-icon &#123;</div><div class=\"line\">    background-image: url('/images/#&#123;$animal&#125;.png');</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"多个字段lsit数据循环\"><a href=\"#多个字段lsit数据循环\" class=\"headerlink\" title=\"多个字段lsit数据循环\"></a>多个字段lsit数据循环</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$animal-data: (puma, black, default),(sea-slug, blue, pointer),(egret, white, move);</div><div class=\"line\">@each $animal, $color, $cursor in $animal-data &#123;</div><div class=\"line\">  .#&#123;$animal&#125;-icon &#123;</div><div class=\"line\">    background-image: url('/images/#&#123;$animal&#125;.png');</div><div class=\"line\">    border: 2px solid $color;</div><div class=\"line\">    cursor: $cursor;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"多个字段map数据循环\"><a href=\"#多个字段map数据循环\" class=\"headerlink\" title=\"多个字段map数据循环\"></a>多个字段map数据循环</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);</div><div class=\"line\">@each $header, $size in $headings &#123;</div><div class=\"line\">  #&#123;$header&#125; &#123;</div><div class=\"line\">    font-size: $size;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>本文介绍了 <code>sass</code> 最基本部分,你可以轻松地使用 <code>sass</code> 编写清晰、无冗余、语义化的 <code>css</code> 。对于 <code>sass</code> 提供的工具你已经有了一个比较深入的了解，同时也掌握了何时使用这些工具的指导原则。</p>\n<p>变量是 <code>sass</code> 提供的最基本的工具。通过变量可以让独立的 <code>css</code> 值变得可重用，无论是在一条单独的规则范围内还是在整个样式表中。变量、混合器的命名甚至 <code>sass</code> 的文件名，可以互换通用 <code>_</code> 和 <code>-</code> 。同样基础的是 <code>sass</code> 的嵌套机制。嵌套允许 <code>css</code> 规则内嵌套 <code>css</code> 规则，减少重复编写常用的选择器，同时让样式表的结构一眼望去更加清晰。<code>sass</code> 同时提供了特殊的父选择器标识符&amp;，通过它可以构造出更高效的嵌套。</p>\n<p>你也已经学到了 <code>sass</code> 的另一个重要特性，样式导入。通过样式导入可以把分散在多个 <code>sass</code> 文件中的内容合并生成到一个 <code>css</code> 文件，避免了项目中有大量的 <code>css</code> 文件通过原生的 <code>css @import</code> 带来的性能问题。通过嵌套导入和默认变量值，导入可以构建更强有力的、可定制的样式。混合器允许用户编写语义化样式的同时避免视觉层面上样式的重复。你不仅学到了如何使用混合器减少重复，同时学习到了如何使用混合器让你的 <code>css</code> 变得更加可维护和语义化。最后，我们学习了与混合器相辅相成的选择器继承。继承允许你声明类之间语义化的关系，通过这些关系可以保持你的 <code>css</code> 的整洁和可维护性。</p>\n<p><a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html\">sass文档</a><br><a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\">sass函数列表</a></p>"},{"title":"【转】为什么一些生活中很外向开朗的人会喜欢独来独往","date":"2016-12-24T14:25:24.000Z","comments":0,"_content":"\n<p id=\"div-border-left-purple\">因为他是一个内向的人。\n    不要怀疑，很多人都是这样。\n\n    内向的人，通过独处来恢复精力。\n    所以他们不是喜欢孤独，而是，孤独才是他们的常态。\n    他们跟别人交流、相处，其实都是在消耗精力。\n</p>\n\n\n\n下面详述：\n\n<!-- more -->\n\n心理学上有一个模型，叫「五因素模型」，又叫「大五人格模型」。是目前公认比较全面的人格分析模型。\n这个模型中，把人的性格用五个维度来区分。\n分别是：\n\n<span id=\"inline-red\">外向性（Extraversion）</span>\n<span id=\"inline-yellow\">神经质（Neuroticism）</span>\n<span id=\"inline-green\">亲和性（Agreeableness）</span>\n<span id=\"inline-blue\">负责性（Conscientiousness）</span>\n<span id=\"inline-purple\">经验开放性（Openness to experience）</span>\n\n在「外向性」维度量表上，高得分者被认为是「外向」的，而低得分者则被认为「内向」。\n这里的「外向」和「内向」是有一定描述的。\n\n外向：倾向于人际交往，热情、爱说话、充满自信、喜欢交友。在社交聚会中感到快乐。大都愿意与他人共处而不是独处。在其他人面前精力充沛，而在独处时变得平淡或感到无聊。更愿意与别人交谈而不是独自思考。等等。\n\n内向：倾向于安静的、低调的、深思熟虑的，很少参加社交活动。他们在独自的活动中感到快乐，比如阅读、写作、绘画、编程，等等。典型内向的人大都愿意独处而不是与他人共处。习惯在一个时间只专注于一件事情。更愿意独自思考而不是与别人交谈。等等。\n\n可以看到，区分「外向」和「内向」，最关键是，是看他是更愿意跟别人在一起，还是一个人独处。而不是开朗、活泼、健谈，这些。\n\n因为：内向的人在跟亲密朋友相处时，也能表现出如上特质。\n\n\n更深入地说，外向与内向的差异，主要在于下面三点：\n\n##### 经验的广度和深度\n\n外向的人倾向于广度。\n他们喜欢了解很多事物，对很多领域都抱有热情，喜欢交很多朋友（但也许都不够知心），喜欢尝试不同的东西。对他们而言，生活就是积累尽可能广泛的经验。\n\n内向的人则倾向于拓展某一方面的深度。\n他们同样会对许多领域和事物抱有兴趣，但与外向的人不同，他们大多不会浅尝辄止，而是会深入钻研下去。他们的朋友不多，多数人跟他们只是点头之交，但他们会对朋友交心。\n对他们而言，太多的经验会造成压力。\n\n##### 对刺激的反应\n\n外向的人喜欢体验各种不同的刺激，并对刺激有较高的适应值和较高的恢复水平。也就是说，他们乐于接受刺激，并且对刺激有较高的适应能力。\n\n内向的人内心活动水平较高，对他们而言，任何进入大脑的刺激，都会引起紧张水平的迅速升高（相对于外向的人），引起「刺激过多」的不舒服感受。\n\n##### 精力的来源 （这是重点）\n\n外向的人会从外部世界获得精力。\n对他们而言，聚会、聊天、一起做事情，都是获得精力的方式。而当他们独处时，亦即切断了他们的精力来源，很快就会感到精力耗尽和无聊疲倦。\n\n内向的人，则是自己制造精力。\n对他们而言，聚会、聊天、一起做事情，都是在花费他们的精力。他们只有在独处时，才能恢复精力。所以有些人跟别人在一起时很容易疲倦，自个儿待着反而神采奕奕，就是这样。\n\n但是，内向的人绝非都安静、低调、不善言谈，当他们精力充沛时，他可以跟你聊上几个小时，眉飞色舞。\n同样，外向的人也绝非一定开朗活泼。当他精力耗尽时，同样会一蹶不振。\n\n关键只在于精力的水平，以及恢复精力的方式。\n\n\n这里给一张图，帮助大家理解：\n\n![](http://p1.bpimg.com/567571/0351c7f1aa17b88b.jpg)\n\n\n\n\n作者：Lachel\n原文：https://www.zhihu.com/question/24303670","source":"_posts/why-introversion-like-alone.md","raw":"---\ntitle: 【转】为什么一些生活中很外向开朗的人会喜欢独来独往\ndate: 2016-12-24 22:25:24\ncategories: 综合\ntags: [essay]\ncomments: false\n---\n\n<p id=\"div-border-left-purple\">因为他是一个内向的人。\n    不要怀疑，很多人都是这样。\n\n    内向的人，通过独处来恢复精力。\n    所以他们不是喜欢孤独，而是，孤独才是他们的常态。\n    他们跟别人交流、相处，其实都是在消耗精力。\n</p>\n\n\n\n下面详述：\n\n<!-- more -->\n\n心理学上有一个模型，叫「五因素模型」，又叫「大五人格模型」。是目前公认比较全面的人格分析模型。\n这个模型中，把人的性格用五个维度来区分。\n分别是：\n\n<span id=\"inline-red\">外向性（Extraversion）</span>\n<span id=\"inline-yellow\">神经质（Neuroticism）</span>\n<span id=\"inline-green\">亲和性（Agreeableness）</span>\n<span id=\"inline-blue\">负责性（Conscientiousness）</span>\n<span id=\"inline-purple\">经验开放性（Openness to experience）</span>\n\n在「外向性」维度量表上，高得分者被认为是「外向」的，而低得分者则被认为「内向」。\n这里的「外向」和「内向」是有一定描述的。\n\n外向：倾向于人际交往，热情、爱说话、充满自信、喜欢交友。在社交聚会中感到快乐。大都愿意与他人共处而不是独处。在其他人面前精力充沛，而在独处时变得平淡或感到无聊。更愿意与别人交谈而不是独自思考。等等。\n\n内向：倾向于安静的、低调的、深思熟虑的，很少参加社交活动。他们在独自的活动中感到快乐，比如阅读、写作、绘画、编程，等等。典型内向的人大都愿意独处而不是与他人共处。习惯在一个时间只专注于一件事情。更愿意独自思考而不是与别人交谈。等等。\n\n可以看到，区分「外向」和「内向」，最关键是，是看他是更愿意跟别人在一起，还是一个人独处。而不是开朗、活泼、健谈，这些。\n\n因为：内向的人在跟亲密朋友相处时，也能表现出如上特质。\n\n\n更深入地说，外向与内向的差异，主要在于下面三点：\n\n##### 经验的广度和深度\n\n外向的人倾向于广度。\n他们喜欢了解很多事物，对很多领域都抱有热情，喜欢交很多朋友（但也许都不够知心），喜欢尝试不同的东西。对他们而言，生活就是积累尽可能广泛的经验。\n\n内向的人则倾向于拓展某一方面的深度。\n他们同样会对许多领域和事物抱有兴趣，但与外向的人不同，他们大多不会浅尝辄止，而是会深入钻研下去。他们的朋友不多，多数人跟他们只是点头之交，但他们会对朋友交心。\n对他们而言，太多的经验会造成压力。\n\n##### 对刺激的反应\n\n外向的人喜欢体验各种不同的刺激，并对刺激有较高的适应值和较高的恢复水平。也就是说，他们乐于接受刺激，并且对刺激有较高的适应能力。\n\n内向的人内心活动水平较高，对他们而言，任何进入大脑的刺激，都会引起紧张水平的迅速升高（相对于外向的人），引起「刺激过多」的不舒服感受。\n\n##### 精力的来源 （这是重点）\n\n外向的人会从外部世界获得精力。\n对他们而言，聚会、聊天、一起做事情，都是获得精力的方式。而当他们独处时，亦即切断了他们的精力来源，很快就会感到精力耗尽和无聊疲倦。\n\n内向的人，则是自己制造精力。\n对他们而言，聚会、聊天、一起做事情，都是在花费他们的精力。他们只有在独处时，才能恢复精力。所以有些人跟别人在一起时很容易疲倦，自个儿待着反而神采奕奕，就是这样。\n\n但是，内向的人绝非都安静、低调、不善言谈，当他们精力充沛时，他可以跟你聊上几个小时，眉飞色舞。\n同样，外向的人也绝非一定开朗活泼。当他精力耗尽时，同样会一蹶不振。\n\n关键只在于精力的水平，以及恢复精力的方式。\n\n\n这里给一张图，帮助大家理解：\n\n![](http://p1.bpimg.com/567571/0351c7f1aa17b88b.jpg)\n\n\n\n\n作者：Lachel\n原文：https://www.zhihu.com/question/24303670","slug":"why-introversion-like-alone","published":1,"updated":"2017-01-17T15:19:41.820Z","layout":"post","photos":[],"link":"","_id":"ciysq4ulp000uugi4bp99oyvx","content":"<p id=\"div-border-left-purple\">因为他是一个内向的人。<br>    不要怀疑，很多人都是这样。<br><br>    内向的人，通过独处来恢复精力。<br>    所以他们不是喜欢孤独，而是，孤独才是他们的常态。<br>    他们跟别人交流、相处，其实都是在消耗精力。<br></p>\n\n\n\n<p>下面详述：</p>\n<a id=\"more\"></a>\n<p>心理学上有一个模型，叫「五因素模型」，又叫「大五人格模型」。是目前公认比较全面的人格分析模型。<br>这个模型中，把人的性格用五个维度来区分。<br>分别是：</p>\n<p><span id=\"inline-red\">外向性（Extraversion）</span><br><span id=\"inline-yellow\">神经质（Neuroticism）</span><br><span id=\"inline-green\">亲和性（Agreeableness）</span><br><span id=\"inline-blue\">负责性（Conscientiousness）</span><br><span id=\"inline-purple\">经验开放性（Openness to experience）</span></p>\n<p>在「外向性」维度量表上，高得分者被认为是「外向」的，而低得分者则被认为「内向」。<br>这里的「外向」和「内向」是有一定描述的。</p>\n<p>外向：倾向于人际交往，热情、爱说话、充满自信、喜欢交友。在社交聚会中感到快乐。大都愿意与他人共处而不是独处。在其他人面前精力充沛，而在独处时变得平淡或感到无聊。更愿意与别人交谈而不是独自思考。等等。</p>\n<p>内向：倾向于安静的、低调的、深思熟虑的，很少参加社交活动。他们在独自的活动中感到快乐，比如阅读、写作、绘画、编程，等等。典型内向的人大都愿意独处而不是与他人共处。习惯在一个时间只专注于一件事情。更愿意独自思考而不是与别人交谈。等等。</p>\n<p>可以看到，区分「外向」和「内向」，最关键是，是看他是更愿意跟别人在一起，还是一个人独处。而不是开朗、活泼、健谈，这些。</p>\n<p>因为：内向的人在跟亲密朋友相处时，也能表现出如上特质。</p>\n<p>更深入地说，外向与内向的差异，主要在于下面三点：</p>\n<h5 id=\"经验的广度和深度\"><a href=\"#经验的广度和深度\" class=\"headerlink\" title=\"经验的广度和深度\"></a>经验的广度和深度</h5><p>外向的人倾向于广度。<br>他们喜欢了解很多事物，对很多领域都抱有热情，喜欢交很多朋友（但也许都不够知心），喜欢尝试不同的东西。对他们而言，生活就是积累尽可能广泛的经验。</p>\n<p>内向的人则倾向于拓展某一方面的深度。<br>他们同样会对许多领域和事物抱有兴趣，但与外向的人不同，他们大多不会浅尝辄止，而是会深入钻研下去。他们的朋友不多，多数人跟他们只是点头之交，但他们会对朋友交心。<br>对他们而言，太多的经验会造成压力。</p>\n<h5 id=\"对刺激的反应\"><a href=\"#对刺激的反应\" class=\"headerlink\" title=\"对刺激的反应\"></a>对刺激的反应</h5><p>外向的人喜欢体验各种不同的刺激，并对刺激有较高的适应值和较高的恢复水平。也就是说，他们乐于接受刺激，并且对刺激有较高的适应能力。</p>\n<p>内向的人内心活动水平较高，对他们而言，任何进入大脑的刺激，都会引起紧张水平的迅速升高（相对于外向的人），引起「刺激过多」的不舒服感受。</p>\n<h5 id=\"精力的来源-（这是重点）\"><a href=\"#精力的来源-（这是重点）\" class=\"headerlink\" title=\"精力的来源 （这是重点）\"></a>精力的来源 （这是重点）</h5><p>外向的人会从外部世界获得精力。<br>对他们而言，聚会、聊天、一起做事情，都是获得精力的方式。而当他们独处时，亦即切断了他们的精力来源，很快就会感到精力耗尽和无聊疲倦。</p>\n<p>内向的人，则是自己制造精力。<br>对他们而言，聚会、聊天、一起做事情，都是在花费他们的精力。他们只有在独处时，才能恢复精力。所以有些人跟别人在一起时很容易疲倦，自个儿待着反而神采奕奕，就是这样。</p>\n<p>但是，内向的人绝非都安静、低调、不善言谈，当他们精力充沛时，他可以跟你聊上几个小时，眉飞色舞。<br>同样，外向的人也绝非一定开朗活泼。当他精力耗尽时，同样会一蹶不振。</p>\n<p>关键只在于精力的水平，以及恢复精力的方式。</p>\n<p>这里给一张图，帮助大家理解：</p>\n<p><img src=\"http://p1.bpimg.com/567571/0351c7f1aa17b88b.jpg\" alt=\"\"></p>\n<p>作者：Lachel<br>原文：<a href=\"https://www.zhihu.com/question/24303670\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/24303670</a></p>\n","excerpt":"<p id=\"div-border-left-purple\">因为他是一个内向的人。<br>    不要怀疑，很多人都是这样。<br><br>    内向的人，通过独处来恢复精力。<br>    所以他们不是喜欢孤独，而是，孤独才是他们的常态。<br>    他们跟别人交流、相处，其实都是在消耗精力。<br></p>\n\n\n\n<p>下面详述：</p>","more":"<p>心理学上有一个模型，叫「五因素模型」，又叫「大五人格模型」。是目前公认比较全面的人格分析模型。<br>这个模型中，把人的性格用五个维度来区分。<br>分别是：</p>\n<p><span id=\"inline-red\">外向性（Extraversion）</span><br><span id=\"inline-yellow\">神经质（Neuroticism）</span><br><span id=\"inline-green\">亲和性（Agreeableness）</span><br><span id=\"inline-blue\">负责性（Conscientiousness）</span><br><span id=\"inline-purple\">经验开放性（Openness to experience）</span></p>\n<p>在「外向性」维度量表上，高得分者被认为是「外向」的，而低得分者则被认为「内向」。<br>这里的「外向」和「内向」是有一定描述的。</p>\n<p>外向：倾向于人际交往，热情、爱说话、充满自信、喜欢交友。在社交聚会中感到快乐。大都愿意与他人共处而不是独处。在其他人面前精力充沛，而在独处时变得平淡或感到无聊。更愿意与别人交谈而不是独自思考。等等。</p>\n<p>内向：倾向于安静的、低调的、深思熟虑的，很少参加社交活动。他们在独自的活动中感到快乐，比如阅读、写作、绘画、编程，等等。典型内向的人大都愿意独处而不是与他人共处。习惯在一个时间只专注于一件事情。更愿意独自思考而不是与别人交谈。等等。</p>\n<p>可以看到，区分「外向」和「内向」，最关键是，是看他是更愿意跟别人在一起，还是一个人独处。而不是开朗、活泼、健谈，这些。</p>\n<p>因为：内向的人在跟亲密朋友相处时，也能表现出如上特质。</p>\n<p>更深入地说，外向与内向的差异，主要在于下面三点：</p>\n<h5 id=\"经验的广度和深度\"><a href=\"#经验的广度和深度\" class=\"headerlink\" title=\"经验的广度和深度\"></a>经验的广度和深度</h5><p>外向的人倾向于广度。<br>他们喜欢了解很多事物，对很多领域都抱有热情，喜欢交很多朋友（但也许都不够知心），喜欢尝试不同的东西。对他们而言，生活就是积累尽可能广泛的经验。</p>\n<p>内向的人则倾向于拓展某一方面的深度。<br>他们同样会对许多领域和事物抱有兴趣，但与外向的人不同，他们大多不会浅尝辄止，而是会深入钻研下去。他们的朋友不多，多数人跟他们只是点头之交，但他们会对朋友交心。<br>对他们而言，太多的经验会造成压力。</p>\n<h5 id=\"对刺激的反应\"><a href=\"#对刺激的反应\" class=\"headerlink\" title=\"对刺激的反应\"></a>对刺激的反应</h5><p>外向的人喜欢体验各种不同的刺激，并对刺激有较高的适应值和较高的恢复水平。也就是说，他们乐于接受刺激，并且对刺激有较高的适应能力。</p>\n<p>内向的人内心活动水平较高，对他们而言，任何进入大脑的刺激，都会引起紧张水平的迅速升高（相对于外向的人），引起「刺激过多」的不舒服感受。</p>\n<h5 id=\"精力的来源-（这是重点）\"><a href=\"#精力的来源-（这是重点）\" class=\"headerlink\" title=\"精力的来源 （这是重点）\"></a>精力的来源 （这是重点）</h5><p>外向的人会从外部世界获得精力。<br>对他们而言，聚会、聊天、一起做事情，都是获得精力的方式。而当他们独处时，亦即切断了他们的精力来源，很快就会感到精力耗尽和无聊疲倦。</p>\n<p>内向的人，则是自己制造精力。<br>对他们而言，聚会、聊天、一起做事情，都是在花费他们的精力。他们只有在独处时，才能恢复精力。所以有些人跟别人在一起时很容易疲倦，自个儿待着反而神采奕奕，就是这样。</p>\n<p>但是，内向的人绝非都安静、低调、不善言谈，当他们精力充沛时，他可以跟你聊上几个小时，眉飞色舞。<br>同样，外向的人也绝非一定开朗活泼。当他精力耗尽时，同样会一蹶不振。</p>\n<p>关键只在于精力的水平，以及恢复精力的方式。</p>\n<p>这里给一张图，帮助大家理解：</p>\n<p><img src=\"http://p1.bpimg.com/567571/0351c7f1aa17b88b.jpg\" alt=\"\"></p>\n<p>作者：Lachel<br>原文：<a href=\"https://www.zhihu.com/question/24303670\">https://www.zhihu.com/question/24303670</a></p>"},{"title":"jQuery使用技巧","date":"2016-11-22T03:54:55.000Z","comments":0,"_content":"### 禁用页面的右键菜单\n``` javascript\n$(document).ready(function(){  \n  $(document).bind(\"contextmenu\",function(e){  \n    return false;  \n  });  \n});\n```\n\n### 新窗口打开页面\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <a href=\"https://www.google.com\">google_新窗口</a>\n  <a href=\"https://www.google.com\" rel=\"external\">google_新窗口</a>\n  <a href=\"demo1.html\">当前窗口</a>\n<script>\n  $(function(){\n    $('a[href^=\"http://\"]').attr(\"target\",\"_blank\");\n  });\n</script>\n</body>\n</html>\n```\n\n### <font color='#099'>输入框文字获取和失去焦点【推荐】</font>\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <input type=\"text\" class=\"text1\" />\n<script>\n$(document).ready(function() {  \n  $(\"input.text1\").val(\"Enter your search text here.\");  \n  textFill( $('input.text1') );  \n});\nfunction textFill(input){ //input focus text function  \n  var originalvalue = input.val();  \n  input.focus( function(){  \n    if( $.trim(input.val()) == originalvalue ){\n      input.val(''); \n    }  \n  }).blur( function(){  \n    if( $.trim(input.val()) == '' ){ \n      input.val(originalvalue); \n    }  \n  });  \n}\n</script>\n</body>\n</html>\n```\n\n### 返回头部滑动动画\n``` html\n<script>\njQuery.fn.scrollTo = function(speed) {\n  var targetOffset = $(this).offset().top;\n  $('html,body').stop().animate({scrollTop: targetOffset}, speed);\n  return this;\n}; \n// use\n$(\"#goheader\").click(function(){\n  $(\"body\").scrollTo(500);\n  return false;\n}); \n</script>\n```\n\n### 获取鼠标位置\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div id=\"XY\" ></div>\n<script>\n$(function(){\n  $(document).mousemove(function(e){  \n    $('#XY').html(\"X : \" + e.pageX + \" | Y : \" + e.pageY);  \n  });\n});\n</script>\n</body>\n</html>\n```\n\n### 关闭所有 jQuery 动画效果\n``` javascript\njQuery.fx.off = true;\n```\n\n### 检测鼠标的右键和左键\n``` javascript\n$('#box').mousedown(function(e) {\n  alert(e.which);\n});\n\n```\n\n### 回车提交表单\n``` javascript\n$(function() {\n  $('input').keyup(function(e) {\n    if(e.which == '13') {\n      alert('回车提交');\n    }\n  });\n});\n```\n\n### 切换复选框\n``` javascript\nvar tog = false;\n$('button').click(function() {\n  $(\"input[type=checkbox]\").attr(\"checked\",!tog);\n  tog = !tog;\n});\n```\n\n### 使用 siblings() 来选择同辈元素\n``` javascript\n//不这样做\n$('#nav li').click(function(){\n  $('#nav li').removeClass('active');\n  $(this).addClass('active');\n});\n//替代做法是\n$('#nav li').click(function() {\n  $(this).addClass('active').siblings().removeClass('active');\n});\n```\n\n### 为任何与选择器相匹配的元素绑定事件\n``` javascript\n$(\"table\").on(\"click\",\"td\",function(){ \n  $(this).toggleClass(\"hover\"); \n});\n```\n\n### $.proxy 的使用\n使用回调方法的缺点之一是当执行类库中的方法后，上下文对象被设置到另外一个元素，比如，执行下面代码：\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <style>\n    #panel {\n      width: 300px;\n      height: 300px;\n      background-color: #ccc;\n    }\n  </style>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div id=\"panel\" style=\"display:none\">\n    <button>Close</button>\n  </div>\n  <script>\n  $('#panel').fadeIn(function(){\n    $('#panel button').click(function(){\n      $(this).fadeOut();\n    });\n  });\n  </script>\n</body>\n</html>\n```\n你将遇到问题，button 元素会消失，而不是 panel 元素。可以使用 `$.proxy` 方法解决这个问题，代码如下：\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <style>\n    #panel {\n      width: 300px;\n      height: 300px;\n      background-color: #ccc;\n    }\n  </style>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div id=\"panel\" style=\"display:none\">\n    <button>Close</button>\n  </div>\n  <script>\n  $('#panel').fadeIn(function(){\n    $('#panel button').click($.proxy(function(){\n      $(this).fadeOut();\n    },this));\n  });\n  </script>\n</body>\n</html>\n```\n这样才正确执行。\n\n### 限制 Text-Area 域中的字符的个数\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <textarea id=\"mytextarea\"></textarea>\n  <script>\n    jQuery.fn.maxLength = function(max){\n      this.each(function(){\n        var type = this.tagName.toLowerCase();\n          var inputType = this.type? this.type.toLowerCase() : null;\n            if(type == \"input\" && inputType == \"text\" || inputType == \"password\"){\n              //应用标准的maxLength\n              this.maxLength = max;\n            }else if(type == \"textarea\"){\n              this.onkeypress = function(e){\n                var ob = e || event;\n                var keyCode = ob.keyCode;\n                var hasSelection = document.selection? document.selection.createRange().text.length > 0 : this.selectionStart != this.selectionEnd;\n                return !(this.value.length >= max && (keyCode > 50 || keyCode == 32 || keyCode == 0 || keyCode == 13) && !ob.ctrlKey && !ob.altKey && !hasSelection);\n              };\n              this.onkeyup = function(){\n                if(this.value.length > max){\n                  this.value = this.value.substring(0,max);\n                }\n              };\n            }\n      });\n    };\n    //use\n    $('#mytextarea').maxLength(10);\n  </script>    \n</body>\n</html>\n```\n\n### 解析 json 数据时报 parseError 错误\njQuery 在 1.4 版本后，采用了更为严格的 json 解析方式，即所有内容都必须要有双引号，如果升级 jQuery 版本后，ajax 加载 json 报错，有可能就是这个原因。比如：\n``` json\n// 1.4之前版本，key没引号，这样没问题\n{\n  key:\"coco\",\n  status:\"0\"\n}\n```\n但升级成jQuery1.4后，都必须加上双引号，格式如下：\n``` json\n{\n  \"key\":\"coco\",\n  \"status\":\"0\"\n}\n```\n\n### 从元素中除去 HTML\n``` html\n<script>\n(function($) { \n$.fn.stripHtml = function() { \n　var regexp = /<(\"[^\"]*\"|'[^']*'|[^'\">])*>/gi; \n　this.each(function() { \n  　$(this).html( $(this).html().replace(regexp,'') ); \n　});\n　return $(this); \n} \n})(jQuery); \n//用法： \n$('div').stripHtml(); \n</script>\n```\n\n### 扩展 String 对象的方法\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div>\n    <input type=\"text\" /><button >check</button>\n  </div>\n  <script>\n  $.extend(String.prototype, {\n  isPositiveInteger:function(){\n    return (new RegExp(/^[1-9]\\d*$/).test(this));\n  },\n  isInteger:function(){\n    return (new RegExp(/^\\d+$/).test(this));\n  },\n  isNumber: function(value, element) {\n    return (new RegExp(/^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/).test(this));\n  },\n  trim:function(){\n    return this.replace(/(^\\s*)|(\\s*$)|\\r|\\n/g, \"\");\n  },\n  trans:function() {\n    return this.replace(/&lt;/g, '<').replace(/&gt;/g,'>').replace(/&quot;/g, '\"');\n  },\n  replaceAll:function(os, ns) {\n    return this.replace(new RegExp(os,\"gm\"),ns);\n  },\n  skipChar:function(ch) {\n    if (!this || this.length===0) {return '';}\n    if (this.charAt(0)===ch) {return this.substring(1).skipChar(ch);}\n    return this;\n  },\n  isValidPwd:function() {\n    return (new RegExp(/^([_]|[a-zA-Z0-9]){6,32}$/).test(this)); \n  },\n  isValidMail:function(){\n    return(new RegExp(/^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/).test(this.trim()));\n  },\n  isSpaces:function() {\n    for(var i=0; i<this.length; i+=1) {\n    var ch = this.charAt(i);\n    if (ch!=' '&& ch!=\"\\n\" && ch!=\"\\t\" && ch!=\"\\r\") {return false;}\n    }\n    return true;\n  },\n  isPhone:function() {\n    return (new RegExp(/(^([0-9]{3,4}[-])?\\d{3,8}(-\\d{1,6})?$)|(^\\([0-9]{3,4}\\)\\d{3,8}(\\(\\d{1,6}\\))?$)|(^\\d{3,8}$)/).test(this));\n  },\n  isUrl:function(){\n    return (new RegExp(/^[a-zA-z]+:\\/\\/([a-zA-Z0-9\\-\\.]+)([-\\w .\\/?%&=:]*)$/).test(this));\n  },\n  isExternalUrl:function(){\n    return this.isUrl() && this.indexOf(\"://\"+document.domain) == -1;\n  }\n  });\n\n  $(\"button\").click(function(){\n    alert(   $(\"input\").val().isInteger()  );\n  });\n  </script>\n</body>\n</html>\n```\n\n","source":"_posts/use-jquery-skill.md","raw":"---\ntitle: jQuery使用技巧\ndate: 2016-11-22 11:54:55\ncategories: 前端\ntags: [JavaScript, jQuery]\ncomments: false\n---\n### 禁用页面的右键菜单\n``` javascript\n$(document).ready(function(){  \n  $(document).bind(\"contextmenu\",function(e){  \n    return false;  \n  });  \n});\n```\n\n### 新窗口打开页面\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <a href=\"https://www.google.com\">google_新窗口</a>\n  <a href=\"https://www.google.com\" rel=\"external\">google_新窗口</a>\n  <a href=\"demo1.html\">当前窗口</a>\n<script>\n  $(function(){\n    $('a[href^=\"http://\"]').attr(\"target\",\"_blank\");\n  });\n</script>\n</body>\n</html>\n```\n\n### <font color='#099'>输入框文字获取和失去焦点【推荐】</font>\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <input type=\"text\" class=\"text1\" />\n<script>\n$(document).ready(function() {  \n  $(\"input.text1\").val(\"Enter your search text here.\");  \n  textFill( $('input.text1') );  \n});\nfunction textFill(input){ //input focus text function  \n  var originalvalue = input.val();  \n  input.focus( function(){  \n    if( $.trim(input.val()) == originalvalue ){\n      input.val(''); \n    }  \n  }).blur( function(){  \n    if( $.trim(input.val()) == '' ){ \n      input.val(originalvalue); \n    }  \n  });  \n}\n</script>\n</body>\n</html>\n```\n\n### 返回头部滑动动画\n``` html\n<script>\njQuery.fn.scrollTo = function(speed) {\n  var targetOffset = $(this).offset().top;\n  $('html,body').stop().animate({scrollTop: targetOffset}, speed);\n  return this;\n}; \n// use\n$(\"#goheader\").click(function(){\n  $(\"body\").scrollTo(500);\n  return false;\n}); \n</script>\n```\n\n### 获取鼠标位置\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div id=\"XY\" ></div>\n<script>\n$(function(){\n  $(document).mousemove(function(e){  \n    $('#XY').html(\"X : \" + e.pageX + \" | Y : \" + e.pageY);  \n  });\n});\n</script>\n</body>\n</html>\n```\n\n### 关闭所有 jQuery 动画效果\n``` javascript\njQuery.fx.off = true;\n```\n\n### 检测鼠标的右键和左键\n``` javascript\n$('#box').mousedown(function(e) {\n  alert(e.which);\n});\n\n```\n\n### 回车提交表单\n``` javascript\n$(function() {\n  $('input').keyup(function(e) {\n    if(e.which == '13') {\n      alert('回车提交');\n    }\n  });\n});\n```\n\n### 切换复选框\n``` javascript\nvar tog = false;\n$('button').click(function() {\n  $(\"input[type=checkbox]\").attr(\"checked\",!tog);\n  tog = !tog;\n});\n```\n\n### 使用 siblings() 来选择同辈元素\n``` javascript\n//不这样做\n$('#nav li').click(function(){\n  $('#nav li').removeClass('active');\n  $(this).addClass('active');\n});\n//替代做法是\n$('#nav li').click(function() {\n  $(this).addClass('active').siblings().removeClass('active');\n});\n```\n\n### 为任何与选择器相匹配的元素绑定事件\n``` javascript\n$(\"table\").on(\"click\",\"td\",function(){ \n  $(this).toggleClass(\"hover\"); \n});\n```\n\n### $.proxy 的使用\n使用回调方法的缺点之一是当执行类库中的方法后，上下文对象被设置到另外一个元素，比如，执行下面代码：\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <style>\n    #panel {\n      width: 300px;\n      height: 300px;\n      background-color: #ccc;\n    }\n  </style>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div id=\"panel\" style=\"display:none\">\n    <button>Close</button>\n  </div>\n  <script>\n  $('#panel').fadeIn(function(){\n    $('#panel button').click(function(){\n      $(this).fadeOut();\n    });\n  });\n  </script>\n</body>\n</html>\n```\n你将遇到问题，button 元素会消失，而不是 panel 元素。可以使用 `$.proxy` 方法解决这个问题，代码如下：\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <style>\n    #panel {\n      width: 300px;\n      height: 300px;\n      background-color: #ccc;\n    }\n  </style>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div id=\"panel\" style=\"display:none\">\n    <button>Close</button>\n  </div>\n  <script>\n  $('#panel').fadeIn(function(){\n    $('#panel button').click($.proxy(function(){\n      $(this).fadeOut();\n    },this));\n  });\n  </script>\n</body>\n</html>\n```\n这样才正确执行。\n\n### 限制 Text-Area 域中的字符的个数\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <textarea id=\"mytextarea\"></textarea>\n  <script>\n    jQuery.fn.maxLength = function(max){\n      this.each(function(){\n        var type = this.tagName.toLowerCase();\n          var inputType = this.type? this.type.toLowerCase() : null;\n            if(type == \"input\" && inputType == \"text\" || inputType == \"password\"){\n              //应用标准的maxLength\n              this.maxLength = max;\n            }else if(type == \"textarea\"){\n              this.onkeypress = function(e){\n                var ob = e || event;\n                var keyCode = ob.keyCode;\n                var hasSelection = document.selection? document.selection.createRange().text.length > 0 : this.selectionStart != this.selectionEnd;\n                return !(this.value.length >= max && (keyCode > 50 || keyCode == 32 || keyCode == 0 || keyCode == 13) && !ob.ctrlKey && !ob.altKey && !hasSelection);\n              };\n              this.onkeyup = function(){\n                if(this.value.length > max){\n                  this.value = this.value.substring(0,max);\n                }\n              };\n            }\n      });\n    };\n    //use\n    $('#mytextarea').maxLength(10);\n  </script>    \n</body>\n</html>\n```\n\n### 解析 json 数据时报 parseError 错误\njQuery 在 1.4 版本后，采用了更为严格的 json 解析方式，即所有内容都必须要有双引号，如果升级 jQuery 版本后，ajax 加载 json 报错，有可能就是这个原因。比如：\n``` json\n// 1.4之前版本，key没引号，这样没问题\n{\n  key:\"coco\",\n  status:\"0\"\n}\n```\n但升级成jQuery1.4后，都必须加上双引号，格式如下：\n``` json\n{\n  \"key\":\"coco\",\n  \"status\":\"0\"\n}\n```\n\n### 从元素中除去 HTML\n``` html\n<script>\n(function($) { \n$.fn.stripHtml = function() { \n　var regexp = /<(\"[^\"]*\"|'[^']*'|[^'\">])*>/gi; \n　this.each(function() { \n  　$(this).html( $(this).html().replace(regexp,'') ); \n　});\n　return $(this); \n} \n})(jQuery); \n//用法： \n$('div').stripHtml(); \n</script>\n```\n\n### 扩展 String 对象的方法\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Document</title>\n  <script src=\"jquery.js\"></script>\n</head>\n<body>\n  <div>\n    <input type=\"text\" /><button >check</button>\n  </div>\n  <script>\n  $.extend(String.prototype, {\n  isPositiveInteger:function(){\n    return (new RegExp(/^[1-9]\\d*$/).test(this));\n  },\n  isInteger:function(){\n    return (new RegExp(/^\\d+$/).test(this));\n  },\n  isNumber: function(value, element) {\n    return (new RegExp(/^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)(?:\\.\\d+)?$/).test(this));\n  },\n  trim:function(){\n    return this.replace(/(^\\s*)|(\\s*$)|\\r|\\n/g, \"\");\n  },\n  trans:function() {\n    return this.replace(/&lt;/g, '<').replace(/&gt;/g,'>').replace(/&quot;/g, '\"');\n  },\n  replaceAll:function(os, ns) {\n    return this.replace(new RegExp(os,\"gm\"),ns);\n  },\n  skipChar:function(ch) {\n    if (!this || this.length===0) {return '';}\n    if (this.charAt(0)===ch) {return this.substring(1).skipChar(ch);}\n    return this;\n  },\n  isValidPwd:function() {\n    return (new RegExp(/^([_]|[a-zA-Z0-9]){6,32}$/).test(this)); \n  },\n  isValidMail:function(){\n    return(new RegExp(/^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/).test(this.trim()));\n  },\n  isSpaces:function() {\n    for(var i=0; i<this.length; i+=1) {\n    var ch = this.charAt(i);\n    if (ch!=' '&& ch!=\"\\n\" && ch!=\"\\t\" && ch!=\"\\r\") {return false;}\n    }\n    return true;\n  },\n  isPhone:function() {\n    return (new RegExp(/(^([0-9]{3,4}[-])?\\d{3,8}(-\\d{1,6})?$)|(^\\([0-9]{3,4}\\)\\d{3,8}(\\(\\d{1,6}\\))?$)|(^\\d{3,8}$)/).test(this));\n  },\n  isUrl:function(){\n    return (new RegExp(/^[a-zA-z]+:\\/\\/([a-zA-Z0-9\\-\\.]+)([-\\w .\\/?%&=:]*)$/).test(this));\n  },\n  isExternalUrl:function(){\n    return this.isUrl() && this.indexOf(\"://\"+document.domain) == -1;\n  }\n  });\n\n  $(\"button\").click(function(){\n    alert(   $(\"input\").val().isInteger()  );\n  });\n  </script>\n</body>\n</html>\n```\n\n","slug":"use-jquery-skill","published":1,"updated":"2017-01-18T14:33:19.829Z","layout":"post","photos":[],"link":"","_id":"ciysq4um8000xugi403xhq35m","content":"<h3 id=\"禁用页面的右键菜单\"><a href=\"#禁用页面的右键菜单\" class=\"headerlink\" title=\"禁用页面的右键菜单\"></a>禁用页面的右键菜单</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">  $(<span class=\"built_in\">document</span>).bind(<span class=\"string\">\"contextmenu\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </div><div class=\"line\">  &#125;);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"新窗口打开页面\"><a href=\"#新窗口打开页面\" class=\"headerlink\" title=\"新窗口打开页面\"></a>新窗口打开页面</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://www.google.com\"</span>&gt;</span>google_新窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://www.google.com\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"external\"</span>&gt;</span>google_新窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"demo1.html\"</span>&gt;</span>当前窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'a[href^=\"http://\"]'</span>).attr(<span class=\"string\">\"target\"</span>,<span class=\"string\">\"_blank\"</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"输入框文字获取和失去焦点【推荐】\"><a href=\"#输入框文字获取和失去焦点【推荐】\" class=\"headerlink\" title=\"输入框文字获取和失去焦点【推荐】\"></a><font color=\"#099\">输入框文字获取和失去焦点【推荐】</font></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  $(<span class=\"string\">\"input.text1\"</span>).val(<span class=\"string\">\"Enter your search text here.\"</span>);  </div><div class=\"line\">  textFill( $(<span class=\"string\">'input.text1'</span>) );  </div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">textFill</span>(<span class=\"params\">input</span>)</span>&#123; <span class=\"comment\">//input focus text function  </span></div><div class=\"line\">  <span class=\"keyword\">var</span> originalvalue = input.val();  </div><div class=\"line\">  input.focus( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>( $.trim(input.val()) == originalvalue )&#123;</div><div class=\"line\">      input.val(<span class=\"string\">''</span>); </div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;).blur( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>( $.trim(input.val()) == <span class=\"string\">''</span> )&#123; </div><div class=\"line\">      input.val(originalvalue); </div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;);  </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"返回头部滑动动画\"><a href=\"#返回头部滑动动画\" class=\"headerlink\" title=\"返回头部滑动动画\"></a>返回头部滑动动画</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">jQuery.fn.scrollTo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> targetOffset = $(<span class=\"keyword\">this</span>).offset().top;</div><div class=\"line\">  $(<span class=\"string\">'html,body'</span>).stop().animate(&#123;scrollTop: targetOffset&#125;, speed);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;; </div><div class=\"line\"><span class=\"comment\">// use</span></div><div class=\"line\">$(<span class=\"string\">\"#goheader\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">\"body\"</span>).scrollTo(<span class=\"number\">500</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;); </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"获取鼠标位置\"><a href=\"#获取鼠标位置\" class=\"headerlink\" title=\"获取鼠标位置\"></a>获取鼠标位置</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"XY\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"built_in\">document</span>).mousemove(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </div><div class=\"line\">    $(<span class=\"string\">'#XY'</span>).html(<span class=\"string\">\"X : \"</span> + e.pageX + <span class=\"string\">\" | Y : \"</span> + e.pageY);  </div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"关闭所有-jQuery-动画效果\"><a href=\"#关闭所有-jQuery-动画效果\" class=\"headerlink\" title=\"关闭所有 jQuery 动画效果\"></a>关闭所有 jQuery 动画效果</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.fx.off = <span class=\"literal\">true</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"检测鼠标的右键和左键\"><a href=\"#检测鼠标的右键和左键\" class=\"headerlink\" title=\"检测鼠标的右键和左键\"></a>检测鼠标的右键和左键</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#box'</span>).mousedown(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  alert(e.which);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"回车提交表单\"><a href=\"#回车提交表单\" class=\"headerlink\" title=\"回车提交表单\"></a>回车提交表单</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'input'</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(e.which == <span class=\"string\">'13'</span>) &#123;</div><div class=\"line\">      alert(<span class=\"string\">'回车提交'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"切换复选框\"><a href=\"#切换复选框\" class=\"headerlink\" title=\"切换复选框\"></a>切换复选框</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tog = <span class=\"literal\">false</span>;</div><div class=\"line\">$(<span class=\"string\">'button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $(<span class=\"string\">\"input[type=checkbox]\"</span>).attr(<span class=\"string\">\"checked\"</span>,!tog);</div><div class=\"line\">  tog = !tog;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"使用-siblings-来选择同辈元素\"><a href=\"#使用-siblings-来选择同辈元素\" class=\"headerlink\" title=\"使用 siblings() 来选择同辈元素\"></a>使用 siblings() 来选择同辈元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不这样做</span></div><div class=\"line\">$(<span class=\"string\">'#nav li'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'#nav li'</span>).removeClass(<span class=\"string\">'active'</span>);</div><div class=\"line\">  $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'active'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//替代做法是</span></div><div class=\"line\">$(<span class=\"string\">'#nav li'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'active'</span>).siblings().removeClass(<span class=\"string\">'active'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"为任何与选择器相匹配的元素绑定事件\"><a href=\"#为任何与选择器相匹配的元素绑定事件\" class=\"headerlink\" title=\"为任何与选择器相匹配的元素绑定事件\"></a>为任何与选择器相匹配的元素绑定事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"table\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"string\">\"td\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">  $(<span class=\"keyword\">this</span>).toggleClass(<span class=\"string\">\"hover\"</span>); </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"proxy-的使用\"><a href=\"#proxy-的使用\" class=\"headerlink\" title=\"$.proxy 的使用\"></a>$.proxy 的使用</h3><p>使用回调方法的缺点之一是当执行类库中的方法后，上下文对象被设置到另外一个元素，比如，执行下面代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">    <span class=\"selector-id\">#panel</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:none\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Close<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  $(<span class=\"string\">'#panel'</span>).fadeIn(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#panel button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      $(<span class=\"keyword\">this</span>).fadeOut();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>你将遇到问题，button 元素会消失，而不是 panel 元素。可以使用 <code>$.proxy</code> 方法解决这个问题，代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">    <span class=\"selector-id\">#panel</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:none\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Close<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  $(<span class=\"string\">'#panel'</span>).fadeIn(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#panel button'</span>).click($.proxy(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      $(<span class=\"keyword\">this</span>).fadeOut();</div><div class=\"line\">    &#125;,<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样才正确执行。</p>\n<h3 id=\"限制-Text-Area-域中的字符的个数\"><a href=\"#限制-Text-Area-域中的字符的个数\" class=\"headerlink\" title=\"限制 Text-Area 域中的字符的个数\"></a>限制 Text-Area 域中的字符的个数</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mytextarea\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    jQuery.fn.maxLength = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">max</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> type = <span class=\"keyword\">this</span>.tagName.toLowerCase();</div><div class=\"line\">          <span class=\"keyword\">var</span> inputType = <span class=\"keyword\">this</span>.type? <span class=\"keyword\">this</span>.type.toLowerCase() : <span class=\"literal\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(type == <span class=\"string\">\"input\"</span> &amp;&amp; inputType == <span class=\"string\">\"text\"</span> || inputType == <span class=\"string\">\"password\"</span>)&#123;</div><div class=\"line\">              <span class=\"comment\">//应用标准的maxLength</span></div><div class=\"line\">              <span class=\"keyword\">this</span>.maxLength = max;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type == <span class=\"string\">\"textarea\"</span>)&#123;</div><div class=\"line\">              <span class=\"keyword\">this</span>.onkeypress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> ob = e || event;</div><div class=\"line\">                <span class=\"keyword\">var</span> keyCode = ob.keyCode;</div><div class=\"line\">                <span class=\"keyword\">var</span> hasSelection = <span class=\"built_in\">document</span>.selection? <span class=\"built_in\">document</span>.selection.createRange().text.length &gt; <span class=\"number\">0</span> : <span class=\"keyword\">this</span>.selectionStart != <span class=\"keyword\">this</span>.selectionEnd;</div><div class=\"line\">                <span class=\"keyword\">return</span> !(<span class=\"keyword\">this</span>.value.length &gt;= max &amp;&amp; (keyCode &gt; <span class=\"number\">50</span> || keyCode == <span class=\"number\">32</span> || keyCode == <span class=\"number\">0</span> || keyCode == <span class=\"number\">13</span>) &amp;&amp; !ob.ctrlKey &amp;&amp; !ob.altKey &amp;&amp; !hasSelection);</div><div class=\"line\">              &#125;;</div><div class=\"line\">              <span class=\"keyword\">this</span>.onkeyup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.value.length &gt; max)&#123;</div><div class=\"line\">                  <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.value.substring(<span class=\"number\">0</span>,max);</div><div class=\"line\">                &#125;</div><div class=\"line\">              &#125;;</div><div class=\"line\">            &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">//use</span></div><div class=\"line\">    $(<span class=\"string\">'#mytextarea'</span>).maxLength(<span class=\"number\">10</span>);</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>    </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"解析-json-数据时报-parseError-错误\"><a href=\"#解析-json-数据时报-parseError-错误\" class=\"headerlink\" title=\"解析 json 数据时报 parseError 错误\"></a>解析 json 数据时报 parseError 错误</h3><p>jQuery 在 1.4 版本后，采用了更为严格的 json 解析方式，即所有内容都必须要有双引号，如果升级 jQuery 版本后，ajax 加载 json 报错，有可能就是这个原因。比如：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 1.4之前版本，key没引号，这样没问题</div><div class=\"line\">&#123;</div><div class=\"line\">  key:\"coco\",</div><div class=\"line\">  status:\"0\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但升级成jQuery1.4后，都必须加上双引号，格式如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"key\"</span>:<span class=\"string\">\"coco\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"status\"</span>:<span class=\"string\">\"0\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"从元素中除去-HTML\"><a href=\"#从元素中除去-HTML\" class=\"headerlink\" title=\"从元素中除去 HTML\"></a>从元素中除去 HTML</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>) </span>&#123; </div><div class=\"line\">$.fn.stripHtml = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">　<span class=\"keyword\">var</span> regexp = <span class=\"regexp\">/&lt;(\"[^\"]*\"|'[^']*'|[^'\"&gt;])*&gt;/gi</span>; </div><div class=\"line\">　<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">  　$(<span class=\"keyword\">this</span>).html( $(<span class=\"keyword\">this</span>).html().replace(regexp,<span class=\"string\">''</span>) ); </div><div class=\"line\">　&#125;);</div><div class=\"line\">　<span class=\"keyword\">return</span> $(<span class=\"keyword\">this</span>); </div><div class=\"line\">&#125; </div><div class=\"line\">&#125;)(jQuery); </div><div class=\"line\"><span class=\"comment\">//用法： </span></div><div class=\"line\">$(<span class=\"string\">'div'</span>).stripHtml(); </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"扩展-String-对象的方法\"><a href=\"#扩展-String-对象的方法\" class=\"headerlink\" title=\"扩展 String 对象的方法\"></a>扩展 String 对象的方法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> &gt;</span>check<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  $.extend(<span class=\"built_in\">String</span>.prototype, &#123;</div><div class=\"line\">  isPositiveInteger:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^[1-9]\\d*$/</span>).test(<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isInteger:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^\\d+$/</span>).test(<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isNumber: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^-?(?:\\d+|\\d&#123;1,3&#125;(?:,\\d&#123;3&#125;)+)(?:\\.\\d+)?$/</span>).test(<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;,</div><div class=\"line\">  trim:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/(^\\s*)|(\\s*$)|\\r|\\n/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  trans:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/&amp;lt;/g</span>, <span class=\"string\">'&lt;'</span>).replace(<span class=\"regexp\">/&amp;gt;/g</span>,<span class=\"string\">'&gt;'</span>).replace(<span class=\"regexp\">/&amp;quot;/g</span>, <span class=\"string\">'\"'</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  replaceAll:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">os, ns</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(os,<span class=\"string\">\"gm\"</span>),ns);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  skipChar:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ch</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span> || <span class=\"keyword\">this</span>.length===<span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"string\">''</span>;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.charAt(<span class=\"number\">0</span>)===ch) &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.substring(<span class=\"number\">1</span>).skipChar(ch);&#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isValidPwd:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^([_]|[a-zA-Z0-9])&#123;6,32&#125;$/</span>).test(<span class=\"keyword\">this</span>)); </div><div class=\"line\">  &#125;,</div><div class=\"line\">  isValidMail:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/</span>).test(<span class=\"keyword\">this</span>.trim()));</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isSpaces:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"keyword\">this</span>.length; i+=<span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ch = <span class=\"keyword\">this</span>.charAt(i);</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch!=<span class=\"string\">' '</span>&amp;&amp; ch!=<span class=\"string\">\"\\n\"</span> &amp;&amp; ch!=<span class=\"string\">\"\\t\"</span> &amp;&amp; ch!=<span class=\"string\">\"\\r\"</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isPhone:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/(^([0-9]&#123;3,4&#125;[-])?\\d&#123;3,8&#125;(-\\d&#123;1,6&#125;)?$)|(^\\([0-9]&#123;3,4&#125;\\)\\d&#123;3,8&#125;(\\(\\d&#123;1,6&#125;\\))?$)|(^\\d&#123;3,8&#125;$)/</span>).test(<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isUrl:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^[a-zA-z]+:\\/\\/([a-zA-Z0-9\\-\\.]+)([-\\w .\\/?%&amp;=:]*)$/</span>).test(<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isExternalUrl:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.isUrl() &amp;&amp; <span class=\"keyword\">this</span>.indexOf(<span class=\"string\">\"://\"</span>+<span class=\"built_in\">document</span>.domain) == <span class=\"number\">-1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  $(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(   $(<span class=\"string\">\"input\"</span>).val().isInteger()  );</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"禁用页面的右键菜单\"><a href=\"#禁用页面的右键菜单\" class=\"headerlink\" title=\"禁用页面的右键菜单\"></a>禁用页面的右键菜单</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">  $(<span class=\"built_in\">document</span>).bind(<span class=\"string\">\"contextmenu\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </div><div class=\"line\">  &#125;);  </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"新窗口打开页面\"><a href=\"#新窗口打开页面\" class=\"headerlink\" title=\"新窗口打开页面\"></a>新窗口打开页面</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://www.google.com\"</span>&gt;</span>google_新窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://www.google.com\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"external\"</span>&gt;</span>google_新窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"demo1.html\"</span>&gt;</span>当前窗口<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'a[href^=\"http://\"]'</span>).attr(<span class=\"string\">\"target\"</span>,<span class=\"string\">\"_blank\"</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"输入框文字获取和失去焦点【推荐】\"><a href=\"#输入框文字获取和失去焦点【推荐】\" class=\"headerlink\" title=\"输入框文字获取和失去焦点【推荐】\"></a><font color='#099'>输入框文字获取和失去焦点【推荐】</font></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"text1\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;  </div><div class=\"line\">  $(<span class=\"string\">\"input.text1\"</span>).val(<span class=\"string\">\"Enter your search text here.\"</span>);  </div><div class=\"line\">  textFill( $(<span class=\"string\">'input.text1'</span>) );  </div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">textFill</span>(<span class=\"params\">input</span>)</span>&#123; <span class=\"comment\">//input focus text function  </span></div><div class=\"line\">  <span class=\"keyword\">var</span> originalvalue = input.val();  </div><div class=\"line\">  input.focus( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>( $.trim(input.val()) == originalvalue )&#123;</div><div class=\"line\">      input.val(<span class=\"string\">''</span>); </div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;).blur( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>( $.trim(input.val()) == <span class=\"string\">''</span> )&#123; </div><div class=\"line\">      input.val(originalvalue); </div><div class=\"line\">    &#125;  </div><div class=\"line\">  &#125;);  </div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"返回头部滑动动画\"><a href=\"#返回头部滑动动画\" class=\"headerlink\" title=\"返回头部滑动动画\"></a>返回头部滑动动画</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">jQuery.fn.scrollTo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">speed</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> targetOffset = $(<span class=\"keyword\">this</span>).offset().top;</div><div class=\"line\">  $(<span class=\"string\">'html,body'</span>).stop().animate(&#123;scrollTop: targetOffset&#125;, speed);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;; </div><div class=\"line\"><span class=\"comment\">// use</span></div><div class=\"line\">$(<span class=\"string\">\"#goheader\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">\"body\"</span>).scrollTo(<span class=\"number\">500</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;); </div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"获取鼠标位置\"><a href=\"#获取鼠标位置\" class=\"headerlink\" title=\"获取鼠标位置\"></a>获取鼠标位置</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"XY\"</span> &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"built_in\">document</span>).mousemove(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;  </div><div class=\"line\">    $(<span class=\"string\">'#XY'</span>).html(<span class=\"string\">\"X : \"</span> + e.pageX + <span class=\"string\">\" | Y : \"</span> + e.pageY);  </div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"关闭所有-jQuery-动画效果\"><a href=\"#关闭所有-jQuery-动画效果\" class=\"headerlink\" title=\"关闭所有 jQuery 动画效果\"></a>关闭所有 jQuery 动画效果</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.fx.off = <span class=\"literal\">true</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"检测鼠标的右键和左键\"><a href=\"#检测鼠标的右键和左键\" class=\"headerlink\" title=\"检测鼠标的右键和左键\"></a>检测鼠标的右键和左键</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'#box'</span>).mousedown(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  alert(e.which);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"回车提交表单\"><a href=\"#回车提交表单\" class=\"headerlink\" title=\"回车提交表单\"></a>回车提交表单</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'input'</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(e.which == <span class=\"string\">'13'</span>) &#123;</div><div class=\"line\">      alert(<span class=\"string\">'回车提交'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"切换复选框\"><a href=\"#切换复选框\" class=\"headerlink\" title=\"切换复选框\"></a>切换复选框</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tog = <span class=\"literal\">false</span>;</div><div class=\"line\">$(<span class=\"string\">'button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $(<span class=\"string\">\"input[type=checkbox]\"</span>).attr(<span class=\"string\">\"checked\"</span>,!tog);</div><div class=\"line\">  tog = !tog;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"使用-siblings-来选择同辈元素\"><a href=\"#使用-siblings-来选择同辈元素\" class=\"headerlink\" title=\"使用 siblings() 来选择同辈元素\"></a>使用 siblings() 来选择同辈元素</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//不这样做</span></div><div class=\"line\">$(<span class=\"string\">'#nav li'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  $(<span class=\"string\">'#nav li'</span>).removeClass(<span class=\"string\">'active'</span>);</div><div class=\"line\">  $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'active'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//替代做法是</span></div><div class=\"line\">$(<span class=\"string\">'#nav li'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  $(<span class=\"keyword\">this</span>).addClass(<span class=\"string\">'active'</span>).siblings().removeClass(<span class=\"string\">'active'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"为任何与选择器相匹配的元素绑定事件\"><a href=\"#为任何与选择器相匹配的元素绑定事件\" class=\"headerlink\" title=\"为任何与选择器相匹配的元素绑定事件\"></a>为任何与选择器相匹配的元素绑定事件</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"table\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"string\">\"td\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">  $(<span class=\"keyword\">this</span>).toggleClass(<span class=\"string\">\"hover\"</span>); </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"proxy-的使用\"><a href=\"#proxy-的使用\" class=\"headerlink\" title=\"$.proxy 的使用\"></a>$.proxy 的使用</h3><p>使用回调方法的缺点之一是当执行类库中的方法后，上下文对象被设置到另外一个元素，比如，执行下面代码：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></div><div class=\"line\">    <span class=\"selector-id\">#panel</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:none\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Close<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  $(<span class=\"string\">'#panel'</span>).fadeIn(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#panel button'</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      $(<span class=\"keyword\">this</span>).fadeOut();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>你将遇到问题，button 元素会消失，而不是 panel 元素。可以使用 <code>$.proxy</code> 方法解决这个问题，代码如下：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></div><div class=\"line\">    <span class=\"selector-id\">#panel</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#ccc</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"panel\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:none\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>Close<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  $(<span class=\"string\">'#panel'</span>).fadeIn(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    $(<span class=\"string\">'#panel button'</span>).click($.proxy(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      $(<span class=\"keyword\">this</span>).fadeOut();</div><div class=\"line\">    &#125;,<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;);</div><div class=\"line\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样才正确执行。</p>\n<h3 id=\"限制-Text-Area-域中的字符的个数\"><a href=\"#限制-Text-Area-域中的字符的个数\" class=\"headerlink\" title=\"限制 Text-Area 域中的字符的个数\"></a>限制 Text-Area 域中的字符的个数</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mytextarea\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    jQuery.fn.maxLength = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">max</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> type = <span class=\"keyword\">this</span>.tagName.toLowerCase();</div><div class=\"line\">          <span class=\"keyword\">var</span> inputType = <span class=\"keyword\">this</span>.type? <span class=\"keyword\">this</span>.type.toLowerCase() : <span class=\"literal\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(type == <span class=\"string\">\"input\"</span> &amp;&amp; inputType == <span class=\"string\">\"text\"</span> || inputType == <span class=\"string\">\"password\"</span>)&#123;</div><div class=\"line\">              <span class=\"comment\">//应用标准的maxLength</span></div><div class=\"line\">              <span class=\"keyword\">this</span>.maxLength = max;</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type == <span class=\"string\">\"textarea\"</span>)&#123;</div><div class=\"line\">              <span class=\"keyword\">this</span>.onkeypress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> ob = e || event;</div><div class=\"line\">                <span class=\"keyword\">var</span> keyCode = ob.keyCode;</div><div class=\"line\">                <span class=\"keyword\">var</span> hasSelection = <span class=\"built_in\">document</span>.selection? <span class=\"built_in\">document</span>.selection.createRange().text.length &gt; <span class=\"number\">0</span> : <span class=\"keyword\">this</span>.selectionStart != <span class=\"keyword\">this</span>.selectionEnd;</div><div class=\"line\">                <span class=\"keyword\">return</span> !(<span class=\"keyword\">this</span>.value.length &gt;= max &amp;&amp; (keyCode &gt; <span class=\"number\">50</span> || keyCode == <span class=\"number\">32</span> || keyCode == <span class=\"number\">0</span> || keyCode == <span class=\"number\">13</span>) &amp;&amp; !ob.ctrlKey &amp;&amp; !ob.altKey &amp;&amp; !hasSelection);</div><div class=\"line\">              &#125;;</div><div class=\"line\">              <span class=\"keyword\">this</span>.onkeyup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.value.length &gt; max)&#123;</div><div class=\"line\">                  <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.value.substring(<span class=\"number\">0</span>,max);</div><div class=\"line\">                &#125;</div><div class=\"line\">              &#125;;</div><div class=\"line\">            &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">//use</span></div><div class=\"line\">    $(<span class=\"string\">'#mytextarea'</span>).maxLength(<span class=\"number\">10</span>);</div><div class=\"line\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>    </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"解析-json-数据时报-parseError-错误\"><a href=\"#解析-json-数据时报-parseError-错误\" class=\"headerlink\" title=\"解析 json 数据时报 parseError 错误\"></a>解析 json 数据时报 parseError 错误</h3><p>jQuery 在 1.4 版本后，采用了更为严格的 json 解析方式，即所有内容都必须要有双引号，如果升级 jQuery 版本后，ajax 加载 json 报错，有可能就是这个原因。比如：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 1.4之前版本，key没引号，这样没问题</div><div class=\"line\">&#123;</div><div class=\"line\">  key:\"coco\",</div><div class=\"line\">  status:\"0\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但升级成jQuery1.4后，都必须加上双引号，格式如下：<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"key\"</span>:<span class=\"string\">\"coco\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"status\"</span>:<span class=\"string\">\"0\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"从元素中除去-HTML\"><a href=\"#从元素中除去-HTML\" class=\"headerlink\" title=\"从元素中除去 HTML\"></a>从元素中除去 HTML</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>) </span>&#123; </div><div class=\"line\">$.fn.stripHtml = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">　<span class=\"keyword\">var</span> regexp = <span class=\"regexp\">/&lt;(\"[^\"]*\"|'[^']*'|[^'\"&gt;])*&gt;/gi</span>; </div><div class=\"line\">　<span class=\"keyword\">this</span>.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">  　$(<span class=\"keyword\">this</span>).html( $(<span class=\"keyword\">this</span>).html().replace(regexp,<span class=\"string\">''</span>) ); </div><div class=\"line\">　&#125;);</div><div class=\"line\">　<span class=\"keyword\">return</span> $(<span class=\"keyword\">this</span>); </div><div class=\"line\">&#125; </div><div class=\"line\">&#125;)(jQuery); </div><div class=\"line\"><span class=\"comment\">//用法： </span></div><div class=\"line\">$(<span class=\"string\">'div'</span>).stripHtml(); </div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"扩展-String-对象的方法\"><a href=\"#扩展-String-对象的方法\" class=\"headerlink\" title=\"扩展 String 对象的方法\"></a>扩展 String 对象的方法</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> /&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> &gt;</span>check<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">  $.extend(<span class=\"built_in\">String</span>.prototype, &#123;</div><div class=\"line\">  isPositiveInteger:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^[1-9]\\d*$/</span>).test(<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isInteger:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^\\d+$/</span>).test(<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isNumber: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, element</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^-?(?:\\d+|\\d&#123;1,3&#125;(?:,\\d&#123;3&#125;)+)(?:\\.\\d+)?$/</span>).test(<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;,</div><div class=\"line\">  trim:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/(^\\s*)|(\\s*$)|\\r|\\n/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  trans:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"regexp\">/&amp;lt;/g</span>, <span class=\"string\">'&lt;'</span>).replace(<span class=\"regexp\">/&amp;gt;/g</span>,<span class=\"string\">'&gt;'</span>).replace(<span class=\"regexp\">/&amp;quot;/g</span>, <span class=\"string\">'\"'</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  replaceAll:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">os, ns</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.replace(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(os,<span class=\"string\">\"gm\"</span>),ns);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  skipChar:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ch</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span> || <span class=\"keyword\">this</span>.length===<span class=\"number\">0</span>) &#123;<span class=\"keyword\">return</span> <span class=\"string\">''</span>;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.charAt(<span class=\"number\">0</span>)===ch) &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.substring(<span class=\"number\">1</span>).skipChar(ch);&#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isValidPwd:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^([_]|[a-zA-Z0-9])&#123;6,32&#125;$/</span>).test(<span class=\"keyword\">this</span>)); </div><div class=\"line\">  &#125;,</div><div class=\"line\">  isValidMail:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/</span>).test(<span class=\"keyword\">this</span>.trim()));</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isSpaces:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"keyword\">this</span>.length; i+=<span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ch = <span class=\"keyword\">this</span>.charAt(i);</div><div class=\"line\">    <span class=\"keyword\">if</span> (ch!=<span class=\"string\">' '</span>&amp;&amp; ch!=<span class=\"string\">\"\\n\"</span> &amp;&amp; ch!=<span class=\"string\">\"\\t\"</span> &amp;&amp; ch!=<span class=\"string\">\"\\r\"</span>) &#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isPhone:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/(^([0-9]&#123;3,4&#125;[-])?\\d&#123;3,8&#125;(-\\d&#123;1,6&#125;)?$)|(^\\([0-9]&#123;3,4&#125;\\)\\d&#123;3,8&#125;(\\(\\d&#123;1,6&#125;\\))?$)|(^\\d&#123;3,8&#125;$)/</span>).test(<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isUrl:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/^[a-zA-z]+:\\/\\/([a-zA-Z0-9\\-\\.]+)([-\\w .\\/?%&amp;=:]*)$/</span>).test(<span class=\"keyword\">this</span>));</div><div class=\"line\">  &#125;,</div><div class=\"line\">  isExternalUrl:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.isUrl() &amp;&amp; <span class=\"keyword\">this</span>.indexOf(<span class=\"string\">\"://\"</span>+<span class=\"built_in\">document</span>.domain) == <span class=\"number\">-1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  $(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(   $(<span class=\"string\">\"input\"</span>).val().isInteger()  );</div><div class=\"line\">  &#125;);</div><div class=\"line\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciysq4uih0009ugi41h9u20c5","category_id":"ciysq4uh50005ugi49rozxg3e","_id":"ciysq4ujw000hugi4vzl1wl5f"},{"post_id":"ciysq4uf60001ugi4hsift2ln","category_id":"ciysq4uh50005ugi49rozxg3e","_id":"ciysq4ukp000lugi492urdqzx"},{"post_id":"ciysq4uj9000bugi42nd9qofo","category_id":"ciysq4uh50005ugi49rozxg3e","_id":"ciysq4ukx000ougi4mi1tepjs"},{"post_id":"ciysq4ujq000gugi412wqa3ab","category_id":"ciysq4uh50005ugi49rozxg3e","_id":"ciysq4uln000tugi41tvnmo5s"},{"post_id":"ciysq4ug70003ugi45ohps8ik","category_id":"ciysq4ujc000cugi4ksbalbb2","_id":"ciysq4um6000wugi4jn7nwxo3"},{"post_id":"ciysq4uk1000iugi4y5u8plgv","category_id":"ciysq4uh50005ugi49rozxg3e","_id":"ciysq4umm000zugi4altfwc73"},{"post_id":"ciysq4uhk0007ugi4l3hf0tv6","category_id":"ciysq4uh50005ugi49rozxg3e","_id":"ciysq4umx0012ugi4ug1uk013"},{"post_id":"ciysq4ulp000uugi4bp99oyvx","category_id":"ciysq4uh50005ugi49rozxg3e","_id":"ciysq4umy0013ugi47dpklzua"},{"post_id":"ciysq4um8000xugi403xhq35m","category_id":"ciysq4ulk000rugi4cf880j9q","_id":"ciysq4un20015ugi47se5nmwa"},{"post_id":"ciysq4ukr000mugi4hwb7np9s","category_id":"ciysq4ulk000rugi4cf880j9q","_id":"ciysq4un60017ugi4r6kdzvwg"},{"post_id":"ciysq4ukz000pugi486leijes","category_id":"ciysq4ulk000rugi4cf880j9q","_id":"ciysq4und001augi4bfwjmo7a"}],"PostTag":[{"post_id":"ciysq4uf60001ugi4hsift2ln","tag_id":"ciysq4uhg0006ugi4c2zfpfie","_id":"ciysq4ujp000fugi424flgn74"},{"post_id":"ciysq4ug70003ugi45ohps8ik","tag_id":"ciysq4uje000dugi4xlspnntf","_id":"ciysq4ukv000nugi4u9ake6j8"},{"post_id":"ciysq4ukr000mugi4hwb7np9s","tag_id":"ciysq4uje000dugi4xlspnntf","_id":"ciysq4ulm000sugi4231fsl4i"},{"post_id":"ciysq4uhk0007ugi4l3hf0tv6","tag_id":"ciysq4ukb000kugi46ithypig","_id":"ciysq4um5000vugi47kwlshc7"},{"post_id":"ciysq4ulp000uugi4bp99oyvx","tag_id":"ciysq4uje000dugi4xlspnntf","_id":"ciysq4uml000yugi4j71lunsz"},{"post_id":"ciysq4uih0009ugi41h9u20c5","tag_id":"ciysq4ulh000qugi4y8vyyz2e","_id":"ciysq4un30016ugi4qz5akpvj"},{"post_id":"ciysq4uih0009ugi41h9u20c5","tag_id":"ciysq4umo0010ugi45osa2mkr","_id":"ciysq4un70018ugi4zeqzivug"},{"post_id":"ciysq4uj9000bugi42nd9qofo","tag_id":"ciysq4ulh000qugi4y8vyyz2e","_id":"ciysq4unt001cugi4ke04p0mh"},{"post_id":"ciysq4uj9000bugi42nd9qofo","tag_id":"ciysq4umo0010ugi45osa2mkr","_id":"ciysq4unv001dugi4hjdbtgzc"},{"post_id":"ciysq4ujq000gugi412wqa3ab","tag_id":"ciysq4ulh000qugi4y8vyyz2e","_id":"ciysq4uo5001gugi4yi8x1s4o"},{"post_id":"ciysq4ujq000gugi412wqa3ab","tag_id":"ciysq4umo0010ugi45osa2mkr","_id":"ciysq4uoa001hugi46tt7pdsi"},{"post_id":"ciysq4uk1000iugi4y5u8plgv","tag_id":"ciysq4ulh000qugi4y8vyyz2e","_id":"ciysq4up4001kugi4dwdocey0"},{"post_id":"ciysq4uk1000iugi4y5u8plgv","tag_id":"ciysq4umo0010ugi45osa2mkr","_id":"ciysq4upk001lugi402tyfpnz"},{"post_id":"ciysq4ukz000pugi486leijes","tag_id":"ciysq4up0001jugi4weadb71s","_id":"ciysq4uq3001ougi4cnunrubj"},{"post_id":"ciysq4ukz000pugi486leijes","tag_id":"ciysq4upo001mugi4f1ctf3vv","_id":"ciysq4uqe001pugi4ckztalbn"},{"post_id":"ciysq4um8000xugi403xhq35m","tag_id":"ciysq4upw001nugi4mnng9ugu","_id":"ciysq4uqq001rugi4ja3580k9"},{"post_id":"ciysq4um8000xugi403xhq35m","tag_id":"ciysq4uqi001qugi4vre2qhqq","_id":"ciysq4uqt001sugi4n0u1pz9a"}],"Tag":[{"name":"Git","_id":"ciysq4uhg0006ugi4c2zfpfie"},{"name":"essay","_id":"ciysq4uje000dugi4xlspnntf"},{"name":"javascript","_id":"ciysq4ukb000kugi46ithypig"},{"name":"Hexo","_id":"ciysq4ulh000qugi4y8vyyz2e"},{"name":"Next","_id":"ciysq4umo0010ugi45osa2mkr"},{"name":"css","_id":"ciysq4up0001jugi4weadb71s"},{"name":"sass","_id":"ciysq4upo001mugi4f1ctf3vv"},{"name":"JavaScript","_id":"ciysq4upw001nugi4mnng9ugu"},{"name":"jQuery","_id":"ciysq4uqi001qugi4vre2qhqq"}]}}